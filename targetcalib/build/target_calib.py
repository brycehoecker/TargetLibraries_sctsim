# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _target_calib
else:
    import _target_calib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _target_calib.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _target_calib.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _target_calib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _target_calib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _target_calib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _target_calib.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _target_calib.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _target_calib.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _target_calib.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _target_calib.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _target_calib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _target_calib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _target_calib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _target_calib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _target_calib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _target_calib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _target_calib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _target_calib:
_target_calib.SwigPyIterator_swigregister(SwigPyIterator)

class FloatVector(object):
    r"""Proxy of C++ std::vector< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(FloatVector self) -> SwigPyIterator"""
        return _target_calib.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FloatVector self) -> bool"""
        return _target_calib.FloatVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FloatVector self) -> bool"""
        return _target_calib.FloatVector___bool__(self)

    def __len__(self):
        r"""__len__(FloatVector self) -> std::vector< float >::size_type"""
        return _target_calib.FloatVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> FloatVector"""
        return _target_calib.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)
        __setslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, FloatVector v)
        """
        return _target_calib.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)"""
        return _target_calib.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FloatVector self, std::vector< float >::difference_type i)
        __delitem__(FloatVector self, PySliceObject * slice)
        """
        return _target_calib.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FloatVector self, PySliceObject * slice) -> FloatVector
        __getitem__(FloatVector self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &
        """
        return _target_calib.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FloatVector self, PySliceObject * slice, FloatVector v)
        __setitem__(FloatVector self, PySliceObject * slice)
        __setitem__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)
        """
        return _target_calib.FloatVector___setitem__(self, *args)

    def pop(self):
        r"""pop(FloatVector self) -> std::vector< float >::value_type"""
        return _target_calib.FloatVector_pop(self)

    def append(self, x):
        r"""append(FloatVector self, std::vector< float >::value_type const & x)"""
        return _target_calib.FloatVector_append(self, x)

    def empty(self):
        r"""empty(FloatVector self) -> bool"""
        return _target_calib.FloatVector_empty(self)

    def size(self):
        r"""size(FloatVector self) -> std::vector< float >::size_type"""
        return _target_calib.FloatVector_size(self)

    def swap(self, v):
        r"""swap(FloatVector self, FloatVector v)"""
        return _target_calib.FloatVector_swap(self, v)

    def begin(self):
        r"""begin(FloatVector self) -> std::vector< float >::iterator"""
        return _target_calib.FloatVector_begin(self)

    def end(self):
        r"""end(FloatVector self) -> std::vector< float >::iterator"""
        return _target_calib.FloatVector_end(self)

    def rbegin(self):
        r"""rbegin(FloatVector self) -> std::vector< float >::reverse_iterator"""
        return _target_calib.FloatVector_rbegin(self)

    def rend(self):
        r"""rend(FloatVector self) -> std::vector< float >::reverse_iterator"""
        return _target_calib.FloatVector_rend(self)

    def clear(self):
        r"""clear(FloatVector self)"""
        return _target_calib.FloatVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(FloatVector self) -> std::vector< float >::allocator_type"""
        return _target_calib.FloatVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FloatVector self)"""
        return _target_calib.FloatVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FloatVector self, std::vector< float >::iterator pos) -> std::vector< float >::iterator
        erase(FloatVector self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator
        """
        return _target_calib.FloatVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FloatVector self) -> FloatVector
        __init__(FloatVector self, FloatVector other) -> FloatVector
        __init__(FloatVector self, std::vector< float >::size_type size) -> FloatVector
        __init__(FloatVector self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> FloatVector
        """
        _target_calib.FloatVector_swiginit(self, _target_calib.new_FloatVector(*args))

    def push_back(self, x):
        r"""push_back(FloatVector self, std::vector< float >::value_type const & x)"""
        return _target_calib.FloatVector_push_back(self, x)

    def front(self):
        r"""front(FloatVector self) -> std::vector< float >::value_type const &"""
        return _target_calib.FloatVector_front(self)

    def back(self):
        r"""back(FloatVector self) -> std::vector< float >::value_type const &"""
        return _target_calib.FloatVector_back(self)

    def assign(self, n, x):
        r"""assign(FloatVector self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)"""
        return _target_calib.FloatVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FloatVector self, std::vector< float >::size_type new_size)
        resize(FloatVector self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)
        """
        return _target_calib.FloatVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FloatVector self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator
        insert(FloatVector self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)
        """
        return _target_calib.FloatVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(FloatVector self, std::vector< float >::size_type n)"""
        return _target_calib.FloatVector_reserve(self, n)

    def capacity(self):
        r"""capacity(FloatVector self) -> std::vector< float >::size_type"""
        return _target_calib.FloatVector_capacity(self)
    __swig_destroy__ = _target_calib.delete_FloatVector

# Register FloatVector in _target_calib:
_target_calib.FloatVector_swigregister(FloatVector)

class DoubleVector(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DoubleVector self) -> SwigPyIterator"""
        return _target_calib.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DoubleVector self) -> bool"""
        return _target_calib.DoubleVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DoubleVector self) -> bool"""
        return _target_calib.DoubleVector___bool__(self)

    def __len__(self):
        r"""__len__(DoubleVector self) -> std::vector< double >::size_type"""
        return _target_calib.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector"""
        return _target_calib.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)
        """
        return _target_calib.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _target_calib.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)
        __delitem__(DoubleVector self, PySliceObject * slice)
        """
        return _target_calib.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector
        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _target_calib.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)
        __setitem__(DoubleVector self, PySliceObject * slice)
        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _target_calib.DoubleVector___setitem__(self, *args)

    def pop(self):
        r"""pop(DoubleVector self) -> std::vector< double >::value_type"""
        return _target_calib.DoubleVector_pop(self)

    def append(self, x):
        r"""append(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _target_calib.DoubleVector_append(self, x)

    def empty(self):
        r"""empty(DoubleVector self) -> bool"""
        return _target_calib.DoubleVector_empty(self)

    def size(self):
        r"""size(DoubleVector self) -> std::vector< double >::size_type"""
        return _target_calib.DoubleVector_size(self)

    def swap(self, v):
        r"""swap(DoubleVector self, DoubleVector v)"""
        return _target_calib.DoubleVector_swap(self, v)

    def begin(self):
        r"""begin(DoubleVector self) -> std::vector< double >::iterator"""
        return _target_calib.DoubleVector_begin(self)

    def end(self):
        r"""end(DoubleVector self) -> std::vector< double >::iterator"""
        return _target_calib.DoubleVector_end(self)

    def rbegin(self):
        r"""rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _target_calib.DoubleVector_rbegin(self)

    def rend(self):
        r"""rend(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _target_calib.DoubleVector_rend(self)

    def clear(self):
        r"""clear(DoubleVector self)"""
        return _target_calib.DoubleVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DoubleVector self) -> std::vector< double >::allocator_type"""
        return _target_calib.DoubleVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DoubleVector self)"""
        return _target_calib.DoubleVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _target_calib.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DoubleVector self) -> DoubleVector
        __init__(DoubleVector self, DoubleVector other) -> DoubleVector
        __init__(DoubleVector self, std::vector< double >::size_type size) -> DoubleVector
        __init__(DoubleVector self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector
        """
        _target_calib.DoubleVector_swiginit(self, _target_calib.new_DoubleVector(*args))

    def push_back(self, x):
        r"""push_back(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _target_calib.DoubleVector_push_back(self, x)

    def front(self):
        r"""front(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _target_calib.DoubleVector_front(self)

    def back(self):
        r"""back(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _target_calib.DoubleVector_back(self)

    def assign(self, n, x):
        r"""assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _target_calib.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DoubleVector self, std::vector< double >::size_type new_size)
        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _target_calib.DoubleVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _target_calib.DoubleVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(DoubleVector self, std::vector< double >::size_type n)"""
        return _target_calib.DoubleVector_reserve(self, n)

    def capacity(self):
        r"""capacity(DoubleVector self) -> std::vector< double >::size_type"""
        return _target_calib.DoubleVector_capacity(self)
    __swig_destroy__ = _target_calib.delete_DoubleVector

# Register DoubleVector in _target_calib:
_target_calib.DoubleVector_swigregister(DoubleVector)

class UInt16Vector(object):
    r"""Proxy of C++ std::vector< uint16_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(UInt16Vector self) -> SwigPyIterator"""
        return _target_calib.UInt16Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(UInt16Vector self) -> bool"""
        return _target_calib.UInt16Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(UInt16Vector self) -> bool"""
        return _target_calib.UInt16Vector___bool__(self)

    def __len__(self):
        r"""__len__(UInt16Vector self) -> std::vector< unsigned short >::size_type"""
        return _target_calib.UInt16Vector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(UInt16Vector self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j) -> UInt16Vector"""
        return _target_calib.UInt16Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(UInt16Vector self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j)
        __setslice__(UInt16Vector self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j, UInt16Vector v)
        """
        return _target_calib.UInt16Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(UInt16Vector self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j)"""
        return _target_calib.UInt16Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(UInt16Vector self, std::vector< unsigned short >::difference_type i)
        __delitem__(UInt16Vector self, PySliceObject * slice)
        """
        return _target_calib.UInt16Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(UInt16Vector self, PySliceObject * slice) -> UInt16Vector
        __getitem__(UInt16Vector self, std::vector< unsigned short >::difference_type i) -> std::vector< unsigned short >::value_type const &
        """
        return _target_calib.UInt16Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(UInt16Vector self, PySliceObject * slice, UInt16Vector v)
        __setitem__(UInt16Vector self, PySliceObject * slice)
        __setitem__(UInt16Vector self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::value_type const & x)
        """
        return _target_calib.UInt16Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(UInt16Vector self) -> std::vector< unsigned short >::value_type"""
        return _target_calib.UInt16Vector_pop(self)

    def append(self, x):
        r"""append(UInt16Vector self, std::vector< unsigned short >::value_type const & x)"""
        return _target_calib.UInt16Vector_append(self, x)

    def empty(self):
        r"""empty(UInt16Vector self) -> bool"""
        return _target_calib.UInt16Vector_empty(self)

    def size(self):
        r"""size(UInt16Vector self) -> std::vector< unsigned short >::size_type"""
        return _target_calib.UInt16Vector_size(self)

    def swap(self, v):
        r"""swap(UInt16Vector self, UInt16Vector v)"""
        return _target_calib.UInt16Vector_swap(self, v)

    def begin(self):
        r"""begin(UInt16Vector self) -> std::vector< unsigned short >::iterator"""
        return _target_calib.UInt16Vector_begin(self)

    def end(self):
        r"""end(UInt16Vector self) -> std::vector< unsigned short >::iterator"""
        return _target_calib.UInt16Vector_end(self)

    def rbegin(self):
        r"""rbegin(UInt16Vector self) -> std::vector< unsigned short >::reverse_iterator"""
        return _target_calib.UInt16Vector_rbegin(self)

    def rend(self):
        r"""rend(UInt16Vector self) -> std::vector< unsigned short >::reverse_iterator"""
        return _target_calib.UInt16Vector_rend(self)

    def clear(self):
        r"""clear(UInt16Vector self)"""
        return _target_calib.UInt16Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(UInt16Vector self) -> std::vector< unsigned short >::allocator_type"""
        return _target_calib.UInt16Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(UInt16Vector self)"""
        return _target_calib.UInt16Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(UInt16Vector self, std::vector< unsigned short >::iterator pos) -> std::vector< unsigned short >::iterator
        erase(UInt16Vector self, std::vector< unsigned short >::iterator first, std::vector< unsigned short >::iterator last) -> std::vector< unsigned short >::iterator
        """
        return _target_calib.UInt16Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(UInt16Vector self) -> UInt16Vector
        __init__(UInt16Vector self, UInt16Vector other) -> UInt16Vector
        __init__(UInt16Vector self, std::vector< unsigned short >::size_type size) -> UInt16Vector
        __init__(UInt16Vector self, std::vector< unsigned short >::size_type size, std::vector< unsigned short >::value_type const & value) -> UInt16Vector
        """
        _target_calib.UInt16Vector_swiginit(self, _target_calib.new_UInt16Vector(*args))

    def push_back(self, x):
        r"""push_back(UInt16Vector self, std::vector< unsigned short >::value_type const & x)"""
        return _target_calib.UInt16Vector_push_back(self, x)

    def front(self):
        r"""front(UInt16Vector self) -> std::vector< unsigned short >::value_type const &"""
        return _target_calib.UInt16Vector_front(self)

    def back(self):
        r"""back(UInt16Vector self) -> std::vector< unsigned short >::value_type const &"""
        return _target_calib.UInt16Vector_back(self)

    def assign(self, n, x):
        r"""assign(UInt16Vector self, std::vector< unsigned short >::size_type n, std::vector< unsigned short >::value_type const & x)"""
        return _target_calib.UInt16Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(UInt16Vector self, std::vector< unsigned short >::size_type new_size)
        resize(UInt16Vector self, std::vector< unsigned short >::size_type new_size, std::vector< unsigned short >::value_type const & x)
        """
        return _target_calib.UInt16Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(UInt16Vector self, std::vector< unsigned short >::iterator pos, std::vector< unsigned short >::value_type const & x) -> std::vector< unsigned short >::iterator
        insert(UInt16Vector self, std::vector< unsigned short >::iterator pos, std::vector< unsigned short >::size_type n, std::vector< unsigned short >::value_type const & x)
        """
        return _target_calib.UInt16Vector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(UInt16Vector self, std::vector< unsigned short >::size_type n)"""
        return _target_calib.UInt16Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(UInt16Vector self) -> std::vector< unsigned short >::size_type"""
        return _target_calib.UInt16Vector_capacity(self)
    __swig_destroy__ = _target_calib.delete_UInt16Vector

# Register UInt16Vector in _target_calib:
_target_calib.UInt16Vector_swigregister(UInt16Vector)

class Int16Vector(object):
    r"""Proxy of C++ std::vector< int16_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Int16Vector self) -> SwigPyIterator"""
        return _target_calib.Int16Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Int16Vector self) -> bool"""
        return _target_calib.Int16Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Int16Vector self) -> bool"""
        return _target_calib.Int16Vector___bool__(self)

    def __len__(self):
        r"""__len__(Int16Vector self) -> std::vector< short >::size_type"""
        return _target_calib.Int16Vector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Int16Vector self, std::vector< short >::difference_type i, std::vector< short >::difference_type j) -> Int16Vector"""
        return _target_calib.Int16Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Int16Vector self, std::vector< short >::difference_type i, std::vector< short >::difference_type j)
        __setslice__(Int16Vector self, std::vector< short >::difference_type i, std::vector< short >::difference_type j, Int16Vector v)
        """
        return _target_calib.Int16Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Int16Vector self, std::vector< short >::difference_type i, std::vector< short >::difference_type j)"""
        return _target_calib.Int16Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Int16Vector self, std::vector< short >::difference_type i)
        __delitem__(Int16Vector self, PySliceObject * slice)
        """
        return _target_calib.Int16Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Int16Vector self, PySliceObject * slice) -> Int16Vector
        __getitem__(Int16Vector self, std::vector< short >::difference_type i) -> std::vector< short >::value_type const &
        """
        return _target_calib.Int16Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Int16Vector self, PySliceObject * slice, Int16Vector v)
        __setitem__(Int16Vector self, PySliceObject * slice)
        __setitem__(Int16Vector self, std::vector< short >::difference_type i, std::vector< short >::value_type const & x)
        """
        return _target_calib.Int16Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Int16Vector self) -> std::vector< short >::value_type"""
        return _target_calib.Int16Vector_pop(self)

    def append(self, x):
        r"""append(Int16Vector self, std::vector< short >::value_type const & x)"""
        return _target_calib.Int16Vector_append(self, x)

    def empty(self):
        r"""empty(Int16Vector self) -> bool"""
        return _target_calib.Int16Vector_empty(self)

    def size(self):
        r"""size(Int16Vector self) -> std::vector< short >::size_type"""
        return _target_calib.Int16Vector_size(self)

    def swap(self, v):
        r"""swap(Int16Vector self, Int16Vector v)"""
        return _target_calib.Int16Vector_swap(self, v)

    def begin(self):
        r"""begin(Int16Vector self) -> std::vector< short >::iterator"""
        return _target_calib.Int16Vector_begin(self)

    def end(self):
        r"""end(Int16Vector self) -> std::vector< short >::iterator"""
        return _target_calib.Int16Vector_end(self)

    def rbegin(self):
        r"""rbegin(Int16Vector self) -> std::vector< short >::reverse_iterator"""
        return _target_calib.Int16Vector_rbegin(self)

    def rend(self):
        r"""rend(Int16Vector self) -> std::vector< short >::reverse_iterator"""
        return _target_calib.Int16Vector_rend(self)

    def clear(self):
        r"""clear(Int16Vector self)"""
        return _target_calib.Int16Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Int16Vector self) -> std::vector< short >::allocator_type"""
        return _target_calib.Int16Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Int16Vector self)"""
        return _target_calib.Int16Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Int16Vector self, std::vector< short >::iterator pos) -> std::vector< short >::iterator
        erase(Int16Vector self, std::vector< short >::iterator first, std::vector< short >::iterator last) -> std::vector< short >::iterator
        """
        return _target_calib.Int16Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Int16Vector self) -> Int16Vector
        __init__(Int16Vector self, Int16Vector other) -> Int16Vector
        __init__(Int16Vector self, std::vector< short >::size_type size) -> Int16Vector
        __init__(Int16Vector self, std::vector< short >::size_type size, std::vector< short >::value_type const & value) -> Int16Vector
        """
        _target_calib.Int16Vector_swiginit(self, _target_calib.new_Int16Vector(*args))

    def push_back(self, x):
        r"""push_back(Int16Vector self, std::vector< short >::value_type const & x)"""
        return _target_calib.Int16Vector_push_back(self, x)

    def front(self):
        r"""front(Int16Vector self) -> std::vector< short >::value_type const &"""
        return _target_calib.Int16Vector_front(self)

    def back(self):
        r"""back(Int16Vector self) -> std::vector< short >::value_type const &"""
        return _target_calib.Int16Vector_back(self)

    def assign(self, n, x):
        r"""assign(Int16Vector self, std::vector< short >::size_type n, std::vector< short >::value_type const & x)"""
        return _target_calib.Int16Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Int16Vector self, std::vector< short >::size_type new_size)
        resize(Int16Vector self, std::vector< short >::size_type new_size, std::vector< short >::value_type const & x)
        """
        return _target_calib.Int16Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Int16Vector self, std::vector< short >::iterator pos, std::vector< short >::value_type const & x) -> std::vector< short >::iterator
        insert(Int16Vector self, std::vector< short >::iterator pos, std::vector< short >::size_type n, std::vector< short >::value_type const & x)
        """
        return _target_calib.Int16Vector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Int16Vector self, std::vector< short >::size_type n)"""
        return _target_calib.Int16Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Int16Vector self) -> std::vector< short >::size_type"""
        return _target_calib.Int16Vector_capacity(self)
    __swig_destroy__ = _target_calib.delete_Int16Vector

# Register Int16Vector in _target_calib:
_target_calib.Int16Vector_swigregister(Int16Vector)

class IntVector(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(IntVector self) -> SwigPyIterator"""
        return _target_calib.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(IntVector self) -> bool"""
        return _target_calib.IntVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(IntVector self) -> bool"""
        return _target_calib.IntVector___bool__(self)

    def __len__(self):
        r"""__len__(IntVector self) -> std::vector< int >::size_type"""
        return _target_calib.IntVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector"""
        return _target_calib.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v)
        """
        return _target_calib.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _target_calib.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(IntVector self, std::vector< int >::difference_type i)
        __delitem__(IntVector self, PySliceObject * slice)
        """
        return _target_calib.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector
        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _target_calib.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)
        __setitem__(IntVector self, PySliceObject * slice)
        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _target_calib.IntVector___setitem__(self, *args)

    def pop(self):
        r"""pop(IntVector self) -> std::vector< int >::value_type"""
        return _target_calib.IntVector_pop(self)

    def append(self, x):
        r"""append(IntVector self, std::vector< int >::value_type const & x)"""
        return _target_calib.IntVector_append(self, x)

    def empty(self):
        r"""empty(IntVector self) -> bool"""
        return _target_calib.IntVector_empty(self)

    def size(self):
        r"""size(IntVector self) -> std::vector< int >::size_type"""
        return _target_calib.IntVector_size(self)

    def swap(self, v):
        r"""swap(IntVector self, IntVector v)"""
        return _target_calib.IntVector_swap(self, v)

    def begin(self):
        r"""begin(IntVector self) -> std::vector< int >::iterator"""
        return _target_calib.IntVector_begin(self)

    def end(self):
        r"""end(IntVector self) -> std::vector< int >::iterator"""
        return _target_calib.IntVector_end(self)

    def rbegin(self):
        r"""rbegin(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _target_calib.IntVector_rbegin(self)

    def rend(self):
        r"""rend(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _target_calib.IntVector_rend(self)

    def clear(self):
        r"""clear(IntVector self)"""
        return _target_calib.IntVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(IntVector self) -> std::vector< int >::allocator_type"""
        return _target_calib.IntVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(IntVector self)"""
        return _target_calib.IntVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _target_calib.IntVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(IntVector self) -> IntVector
        __init__(IntVector self, IntVector other) -> IntVector
        __init__(IntVector self, std::vector< int >::size_type size) -> IntVector
        __init__(IntVector self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector
        """
        _target_calib.IntVector_swiginit(self, _target_calib.new_IntVector(*args))

    def push_back(self, x):
        r"""push_back(IntVector self, std::vector< int >::value_type const & x)"""
        return _target_calib.IntVector_push_back(self, x)

    def front(self):
        r"""front(IntVector self) -> std::vector< int >::value_type const &"""
        return _target_calib.IntVector_front(self)

    def back(self):
        r"""back(IntVector self) -> std::vector< int >::value_type const &"""
        return _target_calib.IntVector_back(self)

    def assign(self, n, x):
        r"""assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _target_calib.IntVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(IntVector self, std::vector< int >::size_type new_size)
        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _target_calib.IntVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _target_calib.IntVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(IntVector self, std::vector< int >::size_type n)"""
        return _target_calib.IntVector_reserve(self, n)

    def capacity(self):
        r"""capacity(IntVector self) -> std::vector< int >::size_type"""
        return _target_calib.IntVector_capacity(self)
    __swig_destroy__ = _target_calib.delete_IntVector

# Register IntVector in _target_calib:
_target_calib.IntVector_swigregister(IntVector)

class FloatVector2D(object):
    r"""Proxy of C++ std::vector< std::vector< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(FloatVector2D self) -> SwigPyIterator"""
        return _target_calib.FloatVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FloatVector2D self) -> bool"""
        return _target_calib.FloatVector2D___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FloatVector2D self) -> bool"""
        return _target_calib.FloatVector2D___bool__(self)

    def __len__(self):
        r"""__len__(FloatVector2D self) -> std::vector< std::vector< float > >::size_type"""
        return _target_calib.FloatVector2D___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(FloatVector2D self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j) -> FloatVector2D"""
        return _target_calib.FloatVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FloatVector2D self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j)
        __setslice__(FloatVector2D self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j, FloatVector2D v)
        """
        return _target_calib.FloatVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(FloatVector2D self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j)"""
        return _target_calib.FloatVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FloatVector2D self, std::vector< std::vector< float > >::difference_type i)
        __delitem__(FloatVector2D self, PySliceObject * slice)
        """
        return _target_calib.FloatVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FloatVector2D self, PySliceObject * slice) -> FloatVector2D
        __getitem__(FloatVector2D self, std::vector< std::vector< float > >::difference_type i) -> FloatVector
        """
        return _target_calib.FloatVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FloatVector2D self, PySliceObject * slice, FloatVector2D v)
        __setitem__(FloatVector2D self, PySliceObject * slice)
        __setitem__(FloatVector2D self, std::vector< std::vector< float > >::difference_type i, FloatVector x)
        """
        return _target_calib.FloatVector2D___setitem__(self, *args)

    def pop(self):
        r"""pop(FloatVector2D self) -> FloatVector"""
        return _target_calib.FloatVector2D_pop(self)

    def append(self, x):
        r"""append(FloatVector2D self, FloatVector x)"""
        return _target_calib.FloatVector2D_append(self, x)

    def empty(self):
        r"""empty(FloatVector2D self) -> bool"""
        return _target_calib.FloatVector2D_empty(self)

    def size(self):
        r"""size(FloatVector2D self) -> std::vector< std::vector< float > >::size_type"""
        return _target_calib.FloatVector2D_size(self)

    def swap(self, v):
        r"""swap(FloatVector2D self, FloatVector2D v)"""
        return _target_calib.FloatVector2D_swap(self, v)

    def begin(self):
        r"""begin(FloatVector2D self) -> std::vector< std::vector< float > >::iterator"""
        return _target_calib.FloatVector2D_begin(self)

    def end(self):
        r"""end(FloatVector2D self) -> std::vector< std::vector< float > >::iterator"""
        return _target_calib.FloatVector2D_end(self)

    def rbegin(self):
        r"""rbegin(FloatVector2D self) -> std::vector< std::vector< float > >::reverse_iterator"""
        return _target_calib.FloatVector2D_rbegin(self)

    def rend(self):
        r"""rend(FloatVector2D self) -> std::vector< std::vector< float > >::reverse_iterator"""
        return _target_calib.FloatVector2D_rend(self)

    def clear(self):
        r"""clear(FloatVector2D self)"""
        return _target_calib.FloatVector2D_clear(self)

    def get_allocator(self):
        r"""get_allocator(FloatVector2D self) -> std::vector< std::vector< float > >::allocator_type"""
        return _target_calib.FloatVector2D_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FloatVector2D self)"""
        return _target_calib.FloatVector2D_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FloatVector2D self, std::vector< std::vector< float > >::iterator pos) -> std::vector< std::vector< float > >::iterator
        erase(FloatVector2D self, std::vector< std::vector< float > >::iterator first, std::vector< std::vector< float > >::iterator last) -> std::vector< std::vector< float > >::iterator
        """
        return _target_calib.FloatVector2D_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FloatVector2D self) -> FloatVector2D
        __init__(FloatVector2D self, FloatVector2D other) -> FloatVector2D
        __init__(FloatVector2D self, std::vector< std::vector< float > >::size_type size) -> FloatVector2D
        __init__(FloatVector2D self, std::vector< std::vector< float > >::size_type size, FloatVector value) -> FloatVector2D
        """
        _target_calib.FloatVector2D_swiginit(self, _target_calib.new_FloatVector2D(*args))

    def push_back(self, x):
        r"""push_back(FloatVector2D self, FloatVector x)"""
        return _target_calib.FloatVector2D_push_back(self, x)

    def front(self):
        r"""front(FloatVector2D self) -> FloatVector"""
        return _target_calib.FloatVector2D_front(self)

    def back(self):
        r"""back(FloatVector2D self) -> FloatVector"""
        return _target_calib.FloatVector2D_back(self)

    def assign(self, n, x):
        r"""assign(FloatVector2D self, std::vector< std::vector< float > >::size_type n, FloatVector x)"""
        return _target_calib.FloatVector2D_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FloatVector2D self, std::vector< std::vector< float > >::size_type new_size)
        resize(FloatVector2D self, std::vector< std::vector< float > >::size_type new_size, FloatVector x)
        """
        return _target_calib.FloatVector2D_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FloatVector2D self, std::vector< std::vector< float > >::iterator pos, FloatVector x) -> std::vector< std::vector< float > >::iterator
        insert(FloatVector2D self, std::vector< std::vector< float > >::iterator pos, std::vector< std::vector< float > >::size_type n, FloatVector x)
        """
        return _target_calib.FloatVector2D_insert(self, *args)

    def reserve(self, n):
        r"""reserve(FloatVector2D self, std::vector< std::vector< float > >::size_type n)"""
        return _target_calib.FloatVector2D_reserve(self, n)

    def capacity(self):
        r"""capacity(FloatVector2D self) -> std::vector< std::vector< float > >::size_type"""
        return _target_calib.FloatVector2D_capacity(self)
    __swig_destroy__ = _target_calib.delete_FloatVector2D

# Register FloatVector2D in _target_calib:
_target_calib.FloatVector2D_swigregister(FloatVector2D)

class FloatVector3D(object):
    r"""Proxy of C++ std::vector< std::vector< std::vector< float > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(FloatVector3D self) -> SwigPyIterator"""
        return _target_calib.FloatVector3D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FloatVector3D self) -> bool"""
        return _target_calib.FloatVector3D___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FloatVector3D self) -> bool"""
        return _target_calib.FloatVector3D___bool__(self)

    def __len__(self):
        r"""__len__(FloatVector3D self) -> std::vector< std::vector< std::vector< float > > >::size_type"""
        return _target_calib.FloatVector3D___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::difference_type i, std::vector< std::vector< std::vector< float > > >::difference_type j) -> FloatVector3D"""
        return _target_calib.FloatVector3D___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::difference_type i, std::vector< std::vector< std::vector< float > > >::difference_type j)
        __setslice__(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::difference_type i, std::vector< std::vector< std::vector< float > > >::difference_type j, FloatVector3D v)
        """
        return _target_calib.FloatVector3D___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::difference_type i, std::vector< std::vector< std::vector< float > > >::difference_type j)"""
        return _target_calib.FloatVector3D___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::difference_type i)
        __delitem__(FloatVector3D self, PySliceObject * slice)
        """
        return _target_calib.FloatVector3D___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FloatVector3D self, PySliceObject * slice) -> FloatVector3D
        __getitem__(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::difference_type i) -> FloatVector2D
        """
        return _target_calib.FloatVector3D___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FloatVector3D self, PySliceObject * slice, FloatVector3D v)
        __setitem__(FloatVector3D self, PySliceObject * slice)
        __setitem__(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::difference_type i, FloatVector2D x)
        """
        return _target_calib.FloatVector3D___setitem__(self, *args)

    def pop(self):
        r"""pop(FloatVector3D self) -> FloatVector2D"""
        return _target_calib.FloatVector3D_pop(self)

    def append(self, x):
        r"""append(FloatVector3D self, FloatVector2D x)"""
        return _target_calib.FloatVector3D_append(self, x)

    def empty(self):
        r"""empty(FloatVector3D self) -> bool"""
        return _target_calib.FloatVector3D_empty(self)

    def size(self):
        r"""size(FloatVector3D self) -> std::vector< std::vector< std::vector< float > > >::size_type"""
        return _target_calib.FloatVector3D_size(self)

    def swap(self, v):
        r"""swap(FloatVector3D self, FloatVector3D v)"""
        return _target_calib.FloatVector3D_swap(self, v)

    def begin(self):
        r"""begin(FloatVector3D self) -> std::vector< std::vector< std::vector< float > > >::iterator"""
        return _target_calib.FloatVector3D_begin(self)

    def end(self):
        r"""end(FloatVector3D self) -> std::vector< std::vector< std::vector< float > > >::iterator"""
        return _target_calib.FloatVector3D_end(self)

    def rbegin(self):
        r"""rbegin(FloatVector3D self) -> std::vector< std::vector< std::vector< float > > >::reverse_iterator"""
        return _target_calib.FloatVector3D_rbegin(self)

    def rend(self):
        r"""rend(FloatVector3D self) -> std::vector< std::vector< std::vector< float > > >::reverse_iterator"""
        return _target_calib.FloatVector3D_rend(self)

    def clear(self):
        r"""clear(FloatVector3D self)"""
        return _target_calib.FloatVector3D_clear(self)

    def get_allocator(self):
        r"""get_allocator(FloatVector3D self) -> std::vector< std::vector< std::vector< float > > >::allocator_type"""
        return _target_calib.FloatVector3D_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FloatVector3D self)"""
        return _target_calib.FloatVector3D_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::iterator pos) -> std::vector< std::vector< std::vector< float > > >::iterator
        erase(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::iterator first, std::vector< std::vector< std::vector< float > > >::iterator last) -> std::vector< std::vector< std::vector< float > > >::iterator
        """
        return _target_calib.FloatVector3D_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FloatVector3D self) -> FloatVector3D
        __init__(FloatVector3D self, FloatVector3D other) -> FloatVector3D
        __init__(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::size_type size) -> FloatVector3D
        __init__(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::size_type size, FloatVector2D value) -> FloatVector3D
        """
        _target_calib.FloatVector3D_swiginit(self, _target_calib.new_FloatVector3D(*args))

    def push_back(self, x):
        r"""push_back(FloatVector3D self, FloatVector2D x)"""
        return _target_calib.FloatVector3D_push_back(self, x)

    def front(self):
        r"""front(FloatVector3D self) -> FloatVector2D"""
        return _target_calib.FloatVector3D_front(self)

    def back(self):
        r"""back(FloatVector3D self) -> FloatVector2D"""
        return _target_calib.FloatVector3D_back(self)

    def assign(self, n, x):
        r"""assign(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::size_type n, FloatVector2D x)"""
        return _target_calib.FloatVector3D_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::size_type new_size)
        resize(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::size_type new_size, FloatVector2D x)
        """
        return _target_calib.FloatVector3D_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::iterator pos, FloatVector2D x) -> std::vector< std::vector< std::vector< float > > >::iterator
        insert(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::iterator pos, std::vector< std::vector< std::vector< float > > >::size_type n, FloatVector2D x)
        """
        return _target_calib.FloatVector3D_insert(self, *args)

    def reserve(self, n):
        r"""reserve(FloatVector3D self, std::vector< std::vector< std::vector< float > > >::size_type n)"""
        return _target_calib.FloatVector3D_reserve(self, n)

    def capacity(self):
        r"""capacity(FloatVector3D self) -> std::vector< std::vector< std::vector< float > > >::size_type"""
        return _target_calib.FloatVector3D_capacity(self)
    __swig_destroy__ = _target_calib.delete_FloatVector3D

# Register FloatVector3D in _target_calib:
_target_calib.FloatVector3D_swigregister(FloatVector3D)

class FloatVector4D(object):
    r"""Proxy of C++ std::vector< std::vector< std::vector< std::vector< float > > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(FloatVector4D self) -> SwigPyIterator"""
        return _target_calib.FloatVector4D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FloatVector4D self) -> bool"""
        return _target_calib.FloatVector4D___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FloatVector4D self) -> bool"""
        return _target_calib.FloatVector4D___bool__(self)

    def __len__(self):
        r"""__len__(FloatVector4D self) -> std::vector< std::vector< std::vector< std::vector< float > > > >::size_type"""
        return _target_calib.FloatVector4D___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::difference_type i, std::vector< std::vector< std::vector< std::vector< float > > > >::difference_type j) -> FloatVector4D"""
        return _target_calib.FloatVector4D___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::difference_type i, std::vector< std::vector< std::vector< std::vector< float > > > >::difference_type j)
        __setslice__(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::difference_type i, std::vector< std::vector< std::vector< std::vector< float > > > >::difference_type j, FloatVector4D v)
        """
        return _target_calib.FloatVector4D___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::difference_type i, std::vector< std::vector< std::vector< std::vector< float > > > >::difference_type j)"""
        return _target_calib.FloatVector4D___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::difference_type i)
        __delitem__(FloatVector4D self, PySliceObject * slice)
        """
        return _target_calib.FloatVector4D___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FloatVector4D self, PySliceObject * slice) -> FloatVector4D
        __getitem__(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::difference_type i) -> FloatVector3D
        """
        return _target_calib.FloatVector4D___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FloatVector4D self, PySliceObject * slice, FloatVector4D v)
        __setitem__(FloatVector4D self, PySliceObject * slice)
        __setitem__(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::difference_type i, FloatVector3D x)
        """
        return _target_calib.FloatVector4D___setitem__(self, *args)

    def pop(self):
        r"""pop(FloatVector4D self) -> FloatVector3D"""
        return _target_calib.FloatVector4D_pop(self)

    def append(self, x):
        r"""append(FloatVector4D self, FloatVector3D x)"""
        return _target_calib.FloatVector4D_append(self, x)

    def empty(self):
        r"""empty(FloatVector4D self) -> bool"""
        return _target_calib.FloatVector4D_empty(self)

    def size(self):
        r"""size(FloatVector4D self) -> std::vector< std::vector< std::vector< std::vector< float > > > >::size_type"""
        return _target_calib.FloatVector4D_size(self)

    def swap(self, v):
        r"""swap(FloatVector4D self, FloatVector4D v)"""
        return _target_calib.FloatVector4D_swap(self, v)

    def begin(self):
        r"""begin(FloatVector4D self) -> std::vector< std::vector< std::vector< std::vector< float > > > >::iterator"""
        return _target_calib.FloatVector4D_begin(self)

    def end(self):
        r"""end(FloatVector4D self) -> std::vector< std::vector< std::vector< std::vector< float > > > >::iterator"""
        return _target_calib.FloatVector4D_end(self)

    def rbegin(self):
        r"""rbegin(FloatVector4D self) -> std::vector< std::vector< std::vector< std::vector< float > > > >::reverse_iterator"""
        return _target_calib.FloatVector4D_rbegin(self)

    def rend(self):
        r"""rend(FloatVector4D self) -> std::vector< std::vector< std::vector< std::vector< float > > > >::reverse_iterator"""
        return _target_calib.FloatVector4D_rend(self)

    def clear(self):
        r"""clear(FloatVector4D self)"""
        return _target_calib.FloatVector4D_clear(self)

    def get_allocator(self):
        r"""get_allocator(FloatVector4D self) -> std::vector< std::vector< std::vector< std::vector< float > > > >::allocator_type"""
        return _target_calib.FloatVector4D_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FloatVector4D self)"""
        return _target_calib.FloatVector4D_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::iterator pos) -> std::vector< std::vector< std::vector< std::vector< float > > > >::iterator
        erase(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::iterator first, std::vector< std::vector< std::vector< std::vector< float > > > >::iterator last) -> std::vector< std::vector< std::vector< std::vector< float > > > >::iterator
        """
        return _target_calib.FloatVector4D_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FloatVector4D self) -> FloatVector4D
        __init__(FloatVector4D self, FloatVector4D other) -> FloatVector4D
        __init__(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::size_type size) -> FloatVector4D
        __init__(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::size_type size, FloatVector3D value) -> FloatVector4D
        """
        _target_calib.FloatVector4D_swiginit(self, _target_calib.new_FloatVector4D(*args))

    def push_back(self, x):
        r"""push_back(FloatVector4D self, FloatVector3D x)"""
        return _target_calib.FloatVector4D_push_back(self, x)

    def front(self):
        r"""front(FloatVector4D self) -> FloatVector3D"""
        return _target_calib.FloatVector4D_front(self)

    def back(self):
        r"""back(FloatVector4D self) -> FloatVector3D"""
        return _target_calib.FloatVector4D_back(self)

    def assign(self, n, x):
        r"""assign(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::size_type n, FloatVector3D x)"""
        return _target_calib.FloatVector4D_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::size_type new_size)
        resize(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::size_type new_size, FloatVector3D x)
        """
        return _target_calib.FloatVector4D_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::iterator pos, FloatVector3D x) -> std::vector< std::vector< std::vector< std::vector< float > > > >::iterator
        insert(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::iterator pos, std::vector< std::vector< std::vector< std::vector< float > > > >::size_type n, FloatVector3D x)
        """
        return _target_calib.FloatVector4D_insert(self, *args)

    def reserve(self, n):
        r"""reserve(FloatVector4D self, std::vector< std::vector< std::vector< std::vector< float > > > >::size_type n)"""
        return _target_calib.FloatVector4D_reserve(self, n)

    def capacity(self):
        r"""capacity(FloatVector4D self) -> std::vector< std::vector< std::vector< std::vector< float > > > >::size_type"""
        return _target_calib.FloatVector4D_capacity(self)
    __swig_destroy__ = _target_calib.delete_FloatVector4D

# Register FloatVector4D in _target_calib:
_target_calib.FloatVector4D_swigregister(FloatVector4D)

class StringVector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StringVector self) -> SwigPyIterator"""
        return _target_calib.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StringVector self) -> bool"""
        return _target_calib.StringVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StringVector self) -> bool"""
        return _target_calib.StringVector___bool__(self)

    def __len__(self):
        r"""__len__(StringVector self) -> std::vector< std::string >::size_type"""
        return _target_calib.StringVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringVector"""
        return _target_calib.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StringVector v)
        """
        return _target_calib.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _target_calib.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StringVector self, std::vector< std::string >::difference_type i)
        __delitem__(StringVector self, PySliceObject * slice)
        """
        return _target_calib.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StringVector self, PySliceObject * slice) -> StringVector
        __getitem__(StringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _target_calib.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StringVector self, PySliceObject * slice, StringVector v)
        __setitem__(StringVector self, PySliceObject * slice)
        __setitem__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _target_calib.StringVector___setitem__(self, *args)

    def pop(self):
        r"""pop(StringVector self) -> std::vector< std::string >::value_type"""
        return _target_calib.StringVector_pop(self)

    def append(self, x):
        r"""append(StringVector self, std::vector< std::string >::value_type const & x)"""
        return _target_calib.StringVector_append(self, x)

    def empty(self):
        r"""empty(StringVector self) -> bool"""
        return _target_calib.StringVector_empty(self)

    def size(self):
        r"""size(StringVector self) -> std::vector< std::string >::size_type"""
        return _target_calib.StringVector_size(self)

    def swap(self, v):
        r"""swap(StringVector self, StringVector v)"""
        return _target_calib.StringVector_swap(self, v)

    def begin(self):
        r"""begin(StringVector self) -> std::vector< std::string >::iterator"""
        return _target_calib.StringVector_begin(self)

    def end(self):
        r"""end(StringVector self) -> std::vector< std::string >::iterator"""
        return _target_calib.StringVector_end(self)

    def rbegin(self):
        r"""rbegin(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _target_calib.StringVector_rbegin(self)

    def rend(self):
        r"""rend(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _target_calib.StringVector_rend(self)

    def clear(self):
        r"""clear(StringVector self)"""
        return _target_calib.StringVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(StringVector self) -> std::vector< std::string >::allocator_type"""
        return _target_calib.StringVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StringVector self)"""
        return _target_calib.StringVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(StringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _target_calib.StringVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StringVector self) -> StringVector
        __init__(StringVector self, StringVector other) -> StringVector
        __init__(StringVector self, std::vector< std::string >::size_type size) -> StringVector
        __init__(StringVector self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringVector
        """
        _target_calib.StringVector_swiginit(self, _target_calib.new_StringVector(*args))

    def push_back(self, x):
        r"""push_back(StringVector self, std::vector< std::string >::value_type const & x)"""
        return _target_calib.StringVector_push_back(self, x)

    def front(self):
        r"""front(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _target_calib.StringVector_front(self)

    def back(self):
        r"""back(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _target_calib.StringVector_back(self)

    def assign(self, n, x):
        r"""assign(StringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _target_calib.StringVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StringVector self, std::vector< std::string >::size_type new_size)
        resize(StringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _target_calib.StringVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _target_calib.StringVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(StringVector self, std::vector< std::string >::size_type n)"""
        return _target_calib.StringVector_reserve(self, n)

    def capacity(self):
        r"""capacity(StringVector self) -> std::vector< std::string >::size_type"""
        return _target_calib.StringVector_capacity(self)
    __swig_destroy__ = _target_calib.delete_StringVector

# Register StringVector in _target_calib:
_target_calib.StringVector_swigregister(StringVector)

class UInt16Set(object):
    r"""Proxy of C++ std::set< uint16_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(UInt16Set self) -> SwigPyIterator"""
        return _target_calib.UInt16Set_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(UInt16Set self) -> bool"""
        return _target_calib.UInt16Set___nonzero__(self)

    def __bool__(self):
        r"""__bool__(UInt16Set self) -> bool"""
        return _target_calib.UInt16Set___bool__(self)

    def __len__(self):
        r"""__len__(UInt16Set self) -> std::set< unsigned short >::size_type"""
        return _target_calib.UInt16Set___len__(self)

    def append(self, x):
        r"""append(UInt16Set self, std::set< unsigned short >::value_type x)"""
        return _target_calib.UInt16Set_append(self, x)

    def __contains__(self, x):
        r"""__contains__(UInt16Set self, std::set< unsigned short >::value_type x) -> bool"""
        return _target_calib.UInt16Set___contains__(self, x)

    def __getitem__(self, i):
        r"""__getitem__(UInt16Set self, std::set< unsigned short >::difference_type i) -> std::set< unsigned short >::value_type"""
        return _target_calib.UInt16Set___getitem__(self, i)

    def add(self, x):
        r"""add(UInt16Set self, std::set< unsigned short >::value_type x)"""
        return _target_calib.UInt16Set_add(self, x)

    def discard(self, x):
        r"""discard(UInt16Set self, std::set< unsigned short >::value_type x)"""
        return _target_calib.UInt16Set_discard(self, x)

    def __init__(self, *args):
        r"""
        __init__(UInt16Set self, std::less< unsigned short > const & other) -> UInt16Set
        __init__(UInt16Set self) -> UInt16Set
        __init__(UInt16Set self, UInt16Set other) -> UInt16Set
        """
        _target_calib.UInt16Set_swiginit(self, _target_calib.new_UInt16Set(*args))

    def empty(self):
        r"""empty(UInt16Set self) -> bool"""
        return _target_calib.UInt16Set_empty(self)

    def size(self):
        r"""size(UInt16Set self) -> std::set< unsigned short >::size_type"""
        return _target_calib.UInt16Set_size(self)

    def clear(self):
        r"""clear(UInt16Set self)"""
        return _target_calib.UInt16Set_clear(self)

    def swap(self, v):
        r"""swap(UInt16Set self, UInt16Set v)"""
        return _target_calib.UInt16Set_swap(self, v)

    def count(self, x):
        r"""count(UInt16Set self, std::set< unsigned short >::key_type const & x) -> std::set< unsigned short >::size_type"""
        return _target_calib.UInt16Set_count(self, x)

    def begin(self):
        r"""begin(UInt16Set self) -> std::set< unsigned short >::iterator"""
        return _target_calib.UInt16Set_begin(self)

    def end(self):
        r"""end(UInt16Set self) -> std::set< unsigned short >::iterator"""
        return _target_calib.UInt16Set_end(self)

    def rbegin(self):
        r"""rbegin(UInt16Set self) -> std::set< unsigned short >::reverse_iterator"""
        return _target_calib.UInt16Set_rbegin(self)

    def rend(self):
        r"""rend(UInt16Set self) -> std::set< unsigned short >::reverse_iterator"""
        return _target_calib.UInt16Set_rend(self)

    def erase(self, *args):
        r"""
        erase(UInt16Set self, std::set< unsigned short >::key_type const & x) -> std::set< unsigned short >::size_type
        erase(UInt16Set self, std::set< unsigned short >::iterator pos)
        erase(UInt16Set self, std::set< unsigned short >::iterator first, std::set< unsigned short >::iterator last)
        """
        return _target_calib.UInt16Set_erase(self, *args)

    def find(self, x):
        r"""find(UInt16Set self, std::set< unsigned short >::key_type const & x) -> std::set< unsigned short >::iterator"""
        return _target_calib.UInt16Set_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(UInt16Set self, std::set< unsigned short >::key_type const & x) -> std::set< unsigned short >::iterator"""
        return _target_calib.UInt16Set_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(UInt16Set self, std::set< unsigned short >::key_type const & x) -> std::set< unsigned short >::iterator"""
        return _target_calib.UInt16Set_upper_bound(self, x)

    def equal_range(self, x):
        r"""equal_range(UInt16Set self, std::set< unsigned short >::key_type const & x) -> std::pair< std::set< unsigned short >::iterator,std::set< unsigned short >::iterator >"""
        return _target_calib.UInt16Set_equal_range(self, x)

    def insert(self, __x):
        r"""insert(UInt16Set self, std::set< unsigned short >::value_type const & __x) -> std::pair< std::set< unsigned short >::iterator,bool >"""
        return _target_calib.UInt16Set_insert(self, __x)
    __swig_destroy__ = _target_calib.delete_UInt16Set

# Register UInt16Set in _target_calib:
_target_calib.UInt16Set_swigregister(UInt16Set)

N_TM_MAX = _target_calib.N_TM_MAX

N_TMPIX = _target_calib.N_TMPIX

N_SAMPLINGCELL = _target_calib.N_SAMPLINGCELL

N_STORAGECELL = _target_calib.N_STORAGECELL

N_BLOCKPHASE = _target_calib.N_BLOCKPHASE

MIN_N_HITS = _target_calib.MIN_N_HITS

T_SAMPLES_PER_WAVEFORM_BLOCK = _target_calib.T_SAMPLES_PER_WAVEFORM_BLOCK

N_ROWS = _target_calib.N_ROWS

class Ped(object):
    r"""Proxy of C++ CTA::TargetCalib::Ped class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nTM = property(_target_calib.Ped_nTM_get, _target_calib.Ped_nTM_set, doc=r"""nTM : uint16_t""")
    nTMPix = property(_target_calib.Ped_nTMPix_get, _target_calib.Ped_nTMPix_set, doc=r"""nTMPix : uint16_t""")
    nBlocks = property(_target_calib.Ped_nBlocks_get, _target_calib.Ped_nBlocks_set, doc=r"""nBlocks : uint16_t""")
    nSamplesBP = property(_target_calib.Ped_nSamplesBP_get, _target_calib.Ped_nSamplesBP_set, doc=r"""nSamplesBP : uint16_t""")
    loadedLookup = property(_target_calib.Ped_loadedLookup_get, _target_calib.Ped_loadedLookup_set, doc=r"""loadedLookup : bool""")
    lookup = property(_target_calib.Ped_lookup_get, _target_calib.Ped_lookup_set, doc=r"""lookup : p.float""")
    lookupCurrent = property(_target_calib.Ped_lookupCurrent_get, _target_calib.Ped_lookupCurrent_set, doc=r"""lookupCurrent : p.float""")
    __swig_destroy__ = _target_calib.delete_Ped

    def __init__(self):
        r"""__init__(Ped self) -> Ped"""
        _target_calib.Ped_swiginit(self, _target_calib.new_Ped())

# Register Ped in _target_calib:
_target_calib.Ped_swigregister(Ped)

class TFCF(object):
    r"""Proxy of C++ CTA::TargetCalib::TFCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nTM = property(_target_calib.TFCF_nTM_get, _target_calib.TFCF_nTM_set, doc=r"""nTM : uint16_t""")
    nTMPix = property(_target_calib.TFCF_nTMPix_get, _target_calib.TFCF_nTMPix_set, doc=r"""nTMPix : uint16_t""")
    nCells = property(_target_calib.TFCF_nCells_get, _target_calib.TFCF_nCells_set, doc=r"""nCells : uint16_t""")
    nPnts = property(_target_calib.TFCF_nPnts_get, _target_calib.TFCF_nPnts_set, doc=r"""nPnts : uint16_t""")
    adcStep = property(_target_calib.TFCF_adcStep_get, _target_calib.TFCF_adcStep_set, doc=r"""adcStep : uint16_t""")
    adcMin = property(_target_calib.TFCF_adcMin_get, _target_calib.TFCF_adcMin_set, doc=r"""adcMin : int32_t""")
    adcMax = property(_target_calib.TFCF_adcMax_get, _target_calib.TFCF_adcMax_set, doc=r"""adcMax : int32_t""")
    adcStepsV = property(_target_calib.TFCF_adcStepsV_get, _target_calib.TFCF_adcStepsV_set, doc=r"""adcStepsV : std::vector<(int32_t,std::allocator<(int32_t)>)>""")
    adcStepsSepInvV = property(_target_calib.TFCF_adcStepsSepInvV_get, _target_calib.TFCF_adcStepsSepInvV_set, doc=r"""adcStepsSepInvV : std::vector<(float,std::allocator<(float)>)>""")
    adcStepIndex = property(_target_calib.TFCF_adcStepIndex_get, _target_calib.TFCF_adcStepIndex_set, doc=r"""adcStepIndex : std::vector<(uint32_t,std::allocator<(uint32_t)>)>""")
    loadedLookup = property(_target_calib.TFCF_loadedLookup_get, _target_calib.TFCF_loadedLookup_set, doc=r"""loadedLookup : bool""")
    lookup = property(_target_calib.TFCF_lookup_get, _target_calib.TFCF_lookup_set, doc=r"""lookup : p.float""")
    lookupCurrent = property(_target_calib.TFCF_lookupCurrent_get, _target_calib.TFCF_lookupCurrent_set, doc=r"""lookupCurrent : p.float""")
    GetCell = property(_target_calib.TFCF_GetCell_get, _target_calib.TFCF_GetCell_set, doc=r"""GetCell : m(Calibrator).f(uint16_t).uint16_t""")
    __swig_destroy__ = _target_calib.delete_TFCF

    def __init__(self):
        r"""__init__(TFCF self) -> TFCF"""
        _target_calib.TFCF_swiginit(self, _target_calib.new_TFCF())

# Register TFCF in _target_calib:
_target_calib.TFCF_swigregister(TFCF)

class Calibrator(object):
    r"""Proxy of C++ CTA::TargetCalib::Calibrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Calibrator self, std::string pedFileName, std::string tfFileName="", StringVector cfFileNames={}) -> Calibrator
        __init__(Calibrator self, std::string const & pedPath, int16_t const SN) -> Calibrator
        """
        _target_calib.Calibrator_swiginit(self, _target_calib.new_Calibrator(*args))

    def ApplyEvent(self, wfs, fci, wfsC):
        r"""ApplyEvent(Calibrator self, uint16_t const * wfs, uint16_t const * fci, float * wfsC)"""
        return _target_calib.Calibrator_ApplyEvent(self, wfs, fci, wfsC)

    def ApplyWaveform(self, wf, wfCal, nSamples, tm, tmpix, row, column, blockphase):
        r"""ApplyWaveform(Calibrator self, uint16_t const * wf, float * wfCal, size_t nSamples, uint16_t tm, uint16_t tmpix, uint16_t row, uint16_t column, uint16_t blockphase)"""
        return _target_calib.Calibrator_ApplyWaveform(self, wf, wfCal, nSamples, tm, tmpix, row, column, blockphase)

    def SetPacketInfo(self, tm, row, column, blockphase):
        r"""SetPacketInfo(Calibrator self, uint16_t tm, uint16_t row, uint16_t column, uint16_t blockphase)"""
        return _target_calib.Calibrator_SetPacketInfo(self, tm, row, column, blockphase)

    def SetLookupPosition(self, tm, tmpix):
        r"""SetLookupPosition(Calibrator self, uint16_t tm, uint16_t tmpix)"""
        return _target_calib.Calibrator_SetLookupPosition(self, tm, tmpix)

    def ApplySample(self, val, sample):
        r"""ApplySample(Calibrator self, float val, uint16_t sample) -> float"""
        return _target_calib.Calibrator_ApplySample(self, val, sample)

    def ApplyArray(self, wf, nSamples_i, wfCal, nSamples_o, tm, tmpix, row, column, blockphase):
        r"""ApplyArray(Calibrator self, float const * wf, size_t nSamples_i, float * wfCal, size_t nSamples_o, uint16_t tm, uint16_t tmpix, uint16_t row, uint16_t column, uint16_t blockphase)"""
        return _target_calib.Calibrator_ApplyArray(self, wf, nSamples_i, wfCal, nSamples_o, tm, tmpix, row, column, blockphase)

    def GetPedLookup(self):
        r"""GetPedLookup(Calibrator self) -> FloatVector4D"""
        return _target_calib.Calibrator_GetPedLookup(self)

    def GetTfCfLookup(self):
        r"""GetTfCfLookup(Calibrator self) -> FloatVector4D"""
        return _target_calib.Calibrator_GetTfCfLookup(self)

    def GetAdcMin(self):
        r"""GetAdcMin(Calibrator self) -> float"""
        return _target_calib.Calibrator_GetAdcMin(self)

    def GetAdcStep(self):
        r"""GetAdcStep(Calibrator self) -> float"""
        return _target_calib.Calibrator_GetAdcStep(self)
    __swig_destroy__ = _target_calib.delete_Calibrator

# Register Calibrator in _target_calib:
_target_calib.Calibrator_swigregister(Calibrator)

class CalibratorMultiFile(Calibrator):
    r"""Proxy of C++ CTA::TargetCalib::CalibratorMultiFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CalibratorMultiFile self, std::string & pedFileName, StringVector tfFileNames, StringVector cfFileNames={}) -> CalibratorMultiFile
        __init__(CalibratorMultiFile self, std::string const & pedFileName, Int16Vector SNs) -> CalibratorMultiFile
        """
        _target_calib.CalibratorMultiFile_swiginit(self, _target_calib.new_CalibratorMultiFile(*args))

    def Init(self, *args):
        r"""Init(CalibratorMultiFile self, StringVector tfFileNames, StringVector cfFileNames={})"""
        return _target_calib.CalibratorMultiFile_Init(self, *args)

    def MakeLookupMultiTF(self, tf, cf, tm):
        r"""MakeLookupMultiTF(CalibratorMultiFile self, vector4_float & tf, vector3_float & cf, size_t tm) -> bool"""
        return _target_calib.CalibratorMultiFile_MakeLookupMultiTF(self, tf, cf, tm)

    def SetPacketInfo(self, tm, row, column, blockphase):
        r"""SetPacketInfo(CalibratorMultiFile self, uint16_t tm, uint16_t row, uint16_t column, uint16_t blockphase)"""
        return _target_calib.CalibratorMultiFile_SetPacketInfo(self, tm, row, column, blockphase)

    def SetLookupPosition(self, tm, tmpix):
        r"""SetLookupPosition(CalibratorMultiFile self, uint16_t tm, uint16_t tmpix)"""
        return _target_calib.CalibratorMultiFile_SetLookupPosition(self, tm, tmpix)
    __swig_destroy__ = _target_calib.delete_CalibratorMultiFile

# Register CalibratorMultiFile in _target_calib:
_target_calib.CalibratorMultiFile_swigregister(CalibratorMultiFile)

FILE_TYPE_PED = _target_calib.FILE_TYPE_PED

FILE_TYPE_TF = _target_calib.FILE_TYPE_TF

FILE_TYPE_CF = _target_calib.FILE_TYPE_CF

FILE_TYPE_TFINPUT = _target_calib.FILE_TYPE_TFINPUT

HDU_CAL = _target_calib.HDU_CAL

MAX_PIXELS = _target_calib.MAX_PIXELS

TCAL_FILE_ERR_INPUT = _target_calib.TCAL_FILE_ERR_INPUT

TCAL_FILE_ERR_NROWS = _target_calib.TCAL_FILE_ERR_NROWS

TCAL_FILE_ERR_COL = _target_calib.TCAL_FILE_ERR_COL

TCAL_FILE_ERR_FORMAT = _target_calib.TCAL_FILE_ERR_FORMAT

TCAL_FILE_ERR_KEYWORD = _target_calib.TCAL_FILE_ERR_KEYWORD

TCAL_FILE_ERR_KEYWORD_TYPE = _target_calib.TCAL_FILE_ERR_KEYWORD_TYPE

TCAL_FILE_ERR_ACCESS = _target_calib.TCAL_FILE_ERR_ACCESS

TCAL_FILE_OK = _target_calib.TCAL_FILE_OK

class CalibReadWriter(object):
    r"""Proxy of C++ CTA::TargetCalib::CalibReadWriter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CalibReadWriter self) -> CalibReadWriter"""
        _target_calib.CalibReadWriter_swiginit(self, _target_calib.new_CalibReadWriter())
    __swig_destroy__ = _target_calib.delete_CalibReadWriter

    def CreateFitsFile(self, fileName):
        r"""CreateFitsFile(CalibReadWriter self, std::string const & fileName) -> int"""
        return _target_calib.CalibReadWriter_CreateFitsFile(self, fileName)

    def WriteHeader(self, header):
        r"""WriteHeader(CalibReadWriter self, std::map< std::string,float > header) -> int"""
        return _target_calib.CalibReadWriter_WriteHeader(self, header)

    @staticmethod
    def CalculateScaleOffset(vector, scale, offset):
        r"""CalculateScaleOffset(FloatVector4D vector, uint16_t & scale, int32_t & offset)"""
        return _target_calib.CalibReadWriter_CalculateScaleOffset(vector, scale, offset)

    def WriteVector(self, *args):
        r"""
        WriteVector(CalibReadWriter self, FloatVector4D vector, std::string const & key, bool compress, uint16_t scale, int32_t offset) -> int
        WriteVector(CalibReadWriter self, FloatVector vector, std::string const & key) -> int
        WriteVector(CalibReadWriter self, IntVector vector, std::string const & key) -> int
        """
        return _target_calib.CalibReadWriter_WriteVector(self, *args)

    def WritePedestalData(self, *args):
        r"""
        WritePedestalData(CalibReadWriter self, std::string const & fileName, FloatVector4D ped, FloatVector4D hits, FloatVector4D std, bool compress) -> int
        WritePedestalData(CalibReadWriter self, std::string const & fileName, FloatVector4D ped, bool compress=False) -> int
        """
        return _target_calib.CalibReadWriter_WritePedestalData(self, *args)

    def WriteTfInput(self, fileName, amplitudes, tf, hits):
        r"""WriteTfInput(CalibReadWriter self, std::string const & fileName, FloatVector amplitudes, FloatVector4D tf, FloatVector4D hits) -> int"""
        return _target_calib.CalibReadWriter_WriteTfInput(self, fileName, amplitudes, tf, hits)

    def WriteTfData(self, fileName, adcSteps, tf, compress=True):
        r"""WriteTfData(CalibReadWriter self, std::string const & fileName, IntVector adcSteps, FloatVector4D tf, bool compress=True) -> int"""
        return _target_calib.CalibReadWriter_WriteTfData(self, fileName, adcSteps, tf, compress)

    def WriteCfData(self, fileName, cf, compress=True):
        r"""WriteCfData(CalibReadWriter self, std::string fileName, FloatVector2D cf, bool compress=True) -> int"""
        return _target_calib.CalibReadWriter_WriteCfData(self, fileName, cf, compress)

    def ReadPedestalData(self, *args):
        r"""
        ReadPedestalData(CalibReadWriter self, std::string const & fileName, FloatVector4D ped, FloatVector4D hits, FloatVector4D std) -> int
        ReadPedestalData(CalibReadWriter self, std::string const & fileName, FloatVector4D ped) -> int
        """
        return _target_calib.CalibReadWriter_ReadPedestalData(self, *args)

    def ReadCfData(self, fileName, cf):
        r"""ReadCfData(CalibReadWriter self, std::string fileName, FloatVector2D cf) -> int"""
        return _target_calib.CalibReadWriter_ReadCfData(self, fileName, cf)

    def ReadTfInput(self, fileName, amplitude, tf, hits):
        r"""ReadTfInput(CalibReadWriter self, std::string const & fileName, FloatVector amplitude, FloatVector4D tf, FloatVector4D hits) -> int"""
        return _target_calib.CalibReadWriter_ReadTfInput(self, fileName, amplitude, tf, hits)

    def ReadTfData(self, fileName, adcSteps, tf):
        r"""ReadTfData(CalibReadWriter self, std::string const & fileName, IntVector adcSteps, FloatVector4D tf) -> int"""
        return _target_calib.CalibReadWriter_ReadTfData(self, fileName, adcSteps, tf)

# Register CalibReadWriter in _target_calib:
_target_calib.CalibReadWriter_swigregister(CalibReadWriter)

def CalibReadWriter_CalculateScaleOffset(vector, scale, offset):
    r"""CalibReadWriter_CalculateScaleOffset(FloatVector4D vector, uint16_t & scale, int32_t & offset)"""
    return _target_calib.CalibReadWriter_CalculateScaleOffset(vector, scale, offset)

class PedestalArrayReader(object):
    r"""Proxy of C++ CTA::TargetCalib::PedestalArrayReader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filePath):
        r"""__init__(PedestalArrayReader self, std::string const & filePath) -> PedestalArrayReader"""
        _target_calib.PedestalArrayReader_swiginit(self, _target_calib.new_PedestalArrayReader(filePath))

    def GetPedestal(self):
        r"""GetPedestal(PedestalArrayReader self) -> FloatVector4D"""
        return _target_calib.PedestalArrayReader_GetPedestal(self)

    def GetHits(self):
        r"""GetHits(PedestalArrayReader self) -> FloatVector4D"""
        return _target_calib.PedestalArrayReader_GetHits(self)

    def GetStdDev(self):
        r"""GetStdDev(PedestalArrayReader self) -> FloatVector4D"""
        return _target_calib.PedestalArrayReader_GetStdDev(self)
    __swig_destroy__ = _target_calib.delete_PedestalArrayReader

# Register PedestalArrayReader in _target_calib:
_target_calib.PedestalArrayReader_swigregister(PedestalArrayReader)

class TFArrayReader(object):
    r"""Proxy of C++ CTA::TargetCalib::TFArrayReader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filePath):
        r"""__init__(TFArrayReader self, std::string const & filePath) -> TFArrayReader"""
        _target_calib.TFArrayReader_swiginit(self, _target_calib.new_TFArrayReader(filePath))

    def GetTF(self):
        r"""GetTF(TFArrayReader self) -> FloatVector4D"""
        return _target_calib.TFArrayReader_GetTF(self)

    def GetAdcSteps(self):
        r"""GetAdcSteps(TFArrayReader self) -> IntVector"""
        return _target_calib.TFArrayReader_GetAdcSteps(self)
    __swig_destroy__ = _target_calib.delete_TFArrayReader

# Register TFArrayReader in _target_calib:
_target_calib.TFArrayReader_swigregister(TFArrayReader)

class TFInputArrayReader(object):
    r"""Proxy of C++ CTA::TargetCalib::TFInputArrayReader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filePath):
        r"""__init__(TFInputArrayReader self, std::string const & filePath) -> TFInputArrayReader"""
        _target_calib.TFInputArrayReader_swiginit(self, _target_calib.new_TFInputArrayReader(filePath))

    def GetTFInput(self):
        r"""GetTFInput(TFInputArrayReader self) -> FloatVector4D"""
        return _target_calib.TFInputArrayReader_GetTFInput(self)

    def GetHits(self):
        r"""GetHits(TFInputArrayReader self) -> FloatVector4D"""
        return _target_calib.TFInputArrayReader_GetHits(self)

    def GetAmplitude(self):
        r"""GetAmplitude(TFInputArrayReader self) -> FloatVector"""
        return _target_calib.TFInputArrayReader_GetAmplitude(self)

    def FreeMemory(self):
        r"""FreeMemory(TFInputArrayReader self)"""
        return _target_calib.TFInputArrayReader_FreeMemory(self)
    __swig_destroy__ = _target_calib.delete_TFInputArrayReader

# Register TFInputArrayReader in _target_calib:
_target_calib.TFInputArrayReader_swigregister(TFInputArrayReader)

class CFArrayReader(object):
    r"""Proxy of C++ CTA::TargetCalib::CFArrayReader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filePath):
        r"""__init__(CFArrayReader self, std::string const & filePath) -> CFArrayReader"""
        _target_calib.CFArrayReader_swiginit(self, _target_calib.new_CFArrayReader(filePath))

    def GetCF(self):
        r"""GetCF(CFArrayReader self) -> FloatVector2D"""
        return _target_calib.CFArrayReader_GetCF(self)
    __swig_destroy__ = _target_calib.delete_CFArrayReader

# Register CFArrayReader in _target_calib:
_target_calib.CFArrayReader_swigregister(CFArrayReader)

class CfMaker(object):
    r"""Proxy of C++ CTA::TargetCalib::CfMaker class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nTm=32):
        r"""__init__(CfMaker self, uint16_t const nTm=32) -> CfMaker"""
        _target_calib.CfMaker_swiginit(self, _target_calib.new_CfMaker(nTm))

    def Clear(self):
        r"""Clear(CfMaker self)"""
        return _target_calib.CfMaker_Clear(self)

    def Set(self, tm, tmpix, cf):
        r"""Set(CfMaker self, uint16_t const tm, uint16_t const tmpix, float cf) -> bool"""
        return _target_calib.CfMaker_Set(self, tm, tmpix, cf)

    def SetAll(self, *args):
        r"""
        SetAll(CfMaker self, float const * cf) -> bool
        SetAll(CfMaker self, uint16_t const * tm, size_t const tmSize, uint16_t const * tmpix, size_t const tmpixSize, float const * cf) -> bool
        """
        return _target_calib.CfMaker_SetAll(self, *args)

    def Save(self, fileName, compress):
        r"""Save(CfMaker self, std::string const fileName, bool const compress) -> bool"""
        return _target_calib.CfMaker_Save(self, fileName, compress)

    def GetCf(self):
        r"""GetCf(CfMaker self) -> FloatVector2D"""
        return _target_calib.CfMaker_GetCf(self)
    __swig_destroy__ = _target_calib.delete_CfMaker

# Register CfMaker in _target_calib:
_target_calib.CfMaker_swigregister(CfMaker)

sFatal = _target_calib.sFatal

sError = _target_calib.sError

sWarning = _target_calib.sWarning

sInfo = _target_calib.sInfo

sDebug = _target_calib.sDebug

sDebugVerbose = _target_calib.sDebugVerbose

class FileLog(object):
    r"""Proxy of C++ CTA::TargetCalib::FileLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Stream():
        r"""Stream() -> FILE *&"""
        return _target_calib.FileLog_Stream()

    @staticmethod
    def Output(msg):
        r"""Output(std::string const & msg)"""
        return _target_calib.FileLog_Output(msg)

    def __init__(self):
        r"""__init__(FileLog self) -> FileLog"""
        _target_calib.FileLog_swiginit(self, _target_calib.new_FileLog())
    __swig_destroy__ = _target_calib.delete_FileLog

# Register FileLog in _target_calib:
_target_calib.FileLog_swigregister(FileLog)

def FileLog_Stream():
    r"""FileLog_Stream() -> FILE *&"""
    return _target_calib.FileLog_Stream()

def FileLog_Output(msg):
    r"""FileLog_Output(std::string const & msg)"""
    return _target_calib.FileLog_Output(msg)

class FLog(object):
    r"""Proxy of C++ CTA::TargetCalib::FLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(FLog self) -> FLog"""
        _target_calib.FLog_swiginit(self, _target_calib.new_FLog())
    __swig_destroy__ = _target_calib.delete_FLog

# Register FLog in _target_calib:
_target_calib.FLog_swigregister(FLog)

class PedestalMaker(object):
    r"""Proxy of C++ CTA::TargetCalib::PedestalMaker class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nTm=32, nBlocks=512, nSamples=96, diagnostic=False):
        r"""__init__(PedestalMaker self, uint16_t nTm=32, uint16_t nBlocks=512, uint16_t nSamples=96, bool diagnostic=False) -> PedestalMaker"""
        _target_calib.PedestalMaker_swiginit(self, _target_calib.new_PedestalMaker(nTm, nBlocks, nSamples, diagnostic))

    def Clear(self):
        r"""Clear(PedestalMaker self)"""
        return _target_calib.PedestalMaker_Clear(self)

    def AddEvent(self, wfs, fci):
        r"""AddEvent(PedestalMaker self, uint16_t const * wfs, uint16_t const * fci) -> bool"""
        return _target_calib.PedestalMaker_AddEvent(self, wfs, fci)

    def AddWaveform(self, wf, nSamples, tm, tmpix, blk, blkPhase):
        r"""AddWaveform(PedestalMaker self, uint16_t const * wf, size_t nSamples, uint16_t tm, uint16_t tmpix, uint16_t blk, uint16_t blkPhase) -> bool"""
        return _target_calib.PedestalMaker_AddWaveform(self, wf, nSamples, tm, tmpix, blk, blkPhase)

    def AddSample(self, adc, sample, tm, tmpix, blk, blkPhase):
        r"""AddSample(PedestalMaker self, uint16_t adc, uint16_t sample, uint16_t tm, uint16_t tmpix, uint16_t blk, uint16_t blkPhase) -> bool"""
        return _target_calib.PedestalMaker_AddSample(self, adc, sample, tm, tmpix, blk, blkPhase)

    def Save(self, fileName, compress):
        r"""Save(PedestalMaker self, std::string const & fileName, bool compress) -> bool"""
        return _target_calib.PedestalMaker_Save(self, fileName, compress)

    def CheckHits(self, thresh):
        r"""CheckHits(PedestalMaker self, uint16_t thresh) -> bool"""
        return _target_calib.PedestalMaker_CheckHits(self, thresh)

    def GetPed(self):
        r"""GetPed(PedestalMaker self) -> FloatVector4D"""
        return _target_calib.PedestalMaker_GetPed(self)

    def GetHits(self):
        r"""GetHits(PedestalMaker self) -> FloatVector4D"""
        return _target_calib.PedestalMaker_GetHits(self)

    def GetMinMaxHits(self, min, max):
        r"""GetMinMaxHits(PedestalMaker self, float & min, float & max)"""
        return _target_calib.PedestalMaker_GetMinMaxHits(self, min, max)

    def GetStd(self):
        r"""GetStd(PedestalMaker self) -> FloatVector4D"""
        return _target_calib.PedestalMaker_GetStd(self)
    __swig_destroy__ = _target_calib.delete_PedestalMaker

# Register PedestalMaker in _target_calib:
_target_calib.PedestalMaker_swigregister(PedestalMaker)

class TfMaker(object):
    r"""Proxy of C++ CTA::TargetCalib::TfMaker class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TfMaker self, FloatVector amplitudeV, size_t nTm=32, size_t nCells=64) -> TfMaker
        __init__(TfMaker self, std::string fileName) -> TfMaker
        __init__(TfMaker self, FloatVector amplitude, FloatVector4D tfinput, FloatVector4D hits) -> TfMaker
        """
        _target_calib.TfMaker_swiginit(self, _target_calib.new_TfMaker(*args))

    def Clear(self):
        r"""Clear(TfMaker self)"""
        return _target_calib.TfMaker_Clear(self)

    def SetAmplitudeIndex(self, amplitude):
        r"""SetAmplitudeIndex(TfMaker self, float amplitude) -> bool"""
        return _target_calib.TfMaker_SetAmplitudeIndex(self, amplitude)

    @staticmethod
    def CreateADCStepVector(adcMin, adcMax, adcMinSecondary, adcMaxSecondary, stepSize, stepSizeSecondary):
        r"""CreateADCStepVector(int32_t & adcMin, int32_t & adcMax, int32_t & adcMinSecondary, int32_t & adcMaxSecondary, uint16_t stepSize, uint16_t stepSizeSecondary) -> IntVector"""
        return _target_calib.TfMaker_CreateADCStepVector(adcMin, adcMax, adcMinSecondary, adcMaxSecondary, stepSize, stepSizeSecondary)

    def AddEvent(self, wfs, nPix, nSamples, fci):
        r"""AddEvent(TfMaker self, float const * wfs, size_t nPix, size_t nSamples, uint16_t const * fci) -> bool"""
        return _target_calib.TfMaker_AddEvent(self, wfs, nPix, nSamples, fci)

    def AddWaveform(self, wf, nSamples, tm, tmpix, fci):
        r"""AddWaveform(TfMaker self, float const * wf, size_t nSamples, uint16_t tm, uint16_t tmpix, uint16_t fci) -> bool"""
        return _target_calib.TfMaker_AddWaveform(self, wf, nSamples, tm, tmpix, fci)

    def AddSample(self, adc, sample, tm, tmpix, fci):
        r"""AddSample(TfMaker self, float adc, uint16_t sample, uint16_t tm, uint16_t tmpix, uint16_t fci) -> bool"""
        return _target_calib.TfMaker_AddSample(self, adc, sample, tm, tmpix, fci)

    def SaveTfInput(self, fileName):
        r"""SaveTfInput(TfMaker self, std::string fileName) -> bool"""
        return _target_calib.TfMaker_SaveTfInput(self, fileName)

    def Save(self, fileName, adcStep, adcStepSecondary, amplitudeZero, compress):
        r"""Save(TfMaker self, std::string fileName, uint16_t adcStep, uint16_t adcStepSecondary, uint16_t amplitudeZero, bool compress) -> bool"""
        return _target_calib.TfMaker_Save(self, fileName, adcStep, adcStepSecondary, amplitudeZero, compress)

    def CheckHits(self, thresh):
        r"""CheckHits(TfMaker self, uint16_t thresh) -> bool"""
        return _target_calib.TfMaker_CheckHits(self, thresh)

    def GetTfInput(self):
        r"""GetTfInput(TfMaker self) -> FloatVector4D"""
        return _target_calib.TfMaker_GetTfInput(self)

    def GetHits(self):
        r"""GetHits(TfMaker self) -> FloatVector4D"""
        return _target_calib.TfMaker_GetHits(self)

    def GetAmplitudeVector(self):
        r"""GetAmplitudeVector(TfMaker self) -> FloatVector"""
        return _target_calib.TfMaker_GetAmplitudeVector(self)
    __swig_destroy__ = _target_calib.delete_TfMaker

# Register TfMaker in _target_calib:
_target_calib.TfMaker_swigregister(TfMaker)

def TfMaker_CreateADCStepVector(adcMin, adcMax, adcMinSecondary, adcMaxSecondary, stepSize, stepSizeSecondary):
    r"""TfMaker_CreateADCStepVector(int32_t & adcMin, int32_t & adcMax, int32_t & adcMinSecondary, int32_t & adcMaxSecondary, uint16_t stepSize, uint16_t stepSizeSecondary) -> IntVector"""
    return _target_calib.TfMaker_CreateADCStepVector(adcMin, adcMax, adcMinSecondary, adcMaxSecondary, stepSize, stepSizeSecondary)


def GetEnv(envvar):
    r"""GetEnv(char const * envvar) -> std::string"""
    return _target_calib.GetEnv(envvar)

def PrintProgress(progress=0.0):
    r"""PrintProgress(float progress=0.0)"""
    return _target_calib.PrintProgress(progress)

def CalculateRowColumnBlockPhase(*args):
    r"""
    CalculateRowColumnBlockPhase(uint16_t pCellId)
    CalculateRowColumnBlockPhase(uint16_t const * pCellId)
    """
    return _target_calib.CalculateRowColumnBlockPhase(*args)

def GetCellIDTC(*args):
    r"""
    GetCellIDTC(uint16_t block, uint16_t blockphase, uint16_t sample) -> uint16_t
    GetCellIDTC(uint16_t row, uint16_t column, uint16_t blockphase, uint16_t sample) -> uint16_t
    GetCellIDTC(uint16_t firstCellID, uint16_t sample) -> uint16_t
    """
    return _target_calib.GetCellIDTC(*args)

def GetCellIDTCArray(*args):
    r"""
    GetCellIDTCArray(uint16_t const * firstCellID, uint16_t const * sample)
    GetCellIDTCArray(uint16_t const firstCellID, uint16_t const * sample)
    """
    return _target_calib.GetCellIDTCArray(*args)

def GetTFPath(sn):
    r"""GetTFPath(int16_t sn) -> std::string"""
    return _target_calib.GetTFPath(sn)
class MappingSP(object):
    r"""Proxy of C++ CTA::TargetCalib::MappingSP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mapping):
        r"""__init__(MappingSP self, Mapping mapping) -> MappingSP"""
        _target_calib.MappingSP_swiginit(self, _target_calib.new_MappingSP(mapping))

    def Recreate(self, mapping):
        r"""Recreate(MappingSP self, Mapping mapping)"""
        return _target_calib.MappingSP_Recreate(self, mapping)

    def GetNeighbours(self, superpixel, diagonals=False):
        r"""GetNeighbours(MappingSP self, uint16_t superpixel, bool diagonals=False) -> UInt16Set"""
        return _target_calib.MappingSP_GetNeighbours(self, superpixel, diagonals)

    def GetSize(self):
        r"""GetSize(MappingSP self) -> double"""
        return _target_calib.MappingSP_GetSize(self)

    def GetNSuperPixels(self):
        r"""GetNSuperPixels(MappingSP self) -> uint16_t"""
        return _target_calib.MappingSP_GetNSuperPixels(self)

    def GetNModules(self):
        r"""GetNModules(MappingSP self) -> uint16_t"""
        return _target_calib.MappingSP_GetNModules(self)

    def GetNTMSP(self):
        r"""GetNTMSP(MappingSP self) -> uint16_t"""
        return _target_calib.MappingSP_GetNTMSP(self)

    def GetNRows(self):
        r"""GetNRows(MappingSP self) -> uint16_t"""
        return _target_calib.MappingSP_GetNRows(self)

    def GetNColumns(self):
        r"""GetNColumns(MappingSP self) -> uint16_t"""
        return _target_calib.MappingSP_GetNColumns(self)

    def GetSuperPixel(self, superpixel):
        r"""GetSuperPixel(MappingSP self, uint16_t superpixel) -> uint16_t"""
        return _target_calib.MappingSP_GetSuperPixel(self, superpixel)

    def GetSuperPixelVector(self):
        r"""GetSuperPixelVector(MappingSP self) -> UInt16Vector"""
        return _target_calib.MappingSP_GetSuperPixelVector(self)

    def GetSlot(self, superpixel):
        r"""GetSlot(MappingSP self, uint16_t superpixel) -> uint16_t"""
        return _target_calib.MappingSP_GetSlot(self, superpixel)

    def GetSlotVector(self):
        r"""GetSlotVector(MappingSP self) -> UInt16Vector"""
        return _target_calib.MappingSP_GetSlotVector(self)

    def GetASIC(self, superpixel):
        r"""GetASIC(MappingSP self, uint16_t superpixel) -> uint16_t"""
        return _target_calib.MappingSP_GetASIC(self, superpixel)

    def GetASICVector(self):
        r"""GetASICVector(MappingSP self) -> UInt16Vector"""
        return _target_calib.MappingSP_GetASICVector(self)

    def GetTMSP(self, superpixel):
        r"""GetTMSP(MappingSP self, uint16_t superpixel) -> uint16_t"""
        return _target_calib.MappingSP_GetTMSP(self, superpixel)

    def GetTMSPVector(self):
        r"""GetTMSPVector(MappingSP self) -> UInt16Vector"""
        return _target_calib.MappingSP_GetTMSPVector(self)

    def GetRow(self, superpixel):
        r"""GetRow(MappingSP self, uint16_t superpixel) -> uint16_t"""
        return _target_calib.MappingSP_GetRow(self, superpixel)

    def GetRowVector(self):
        r"""GetRowVector(MappingSP self) -> UInt16Vector"""
        return _target_calib.MappingSP_GetRowVector(self)

    def GetColumn(self, superpixel):
        r"""GetColumn(MappingSP self, uint16_t superpixel) -> uint16_t"""
        return _target_calib.MappingSP_GetColumn(self, superpixel)

    def GetColumnVector(self):
        r"""GetColumnVector(MappingSP self) -> UInt16Vector"""
        return _target_calib.MappingSP_GetColumnVector(self)

    def GetXPix(self, superpixel):
        r"""GetXPix(MappingSP self, uint16_t superpixel) -> double"""
        return _target_calib.MappingSP_GetXPix(self, superpixel)

    def GetXPixVector(self):
        r"""GetXPixVector(MappingSP self) -> DoubleVector"""
        return _target_calib.MappingSP_GetXPixVector(self)

    def GetYPix(self, superpixel):
        r"""GetYPix(MappingSP self, uint16_t superpixel) -> double"""
        return _target_calib.MappingSP_GetYPix(self, superpixel)

    def GetYPixVector(self):
        r"""GetYPixVector(MappingSP self) -> DoubleVector"""
        return _target_calib.MappingSP_GetYPixVector(self)

    def GetContainedPixels(self, superpixel):
        r"""GetContainedPixels(MappingSP self, uint16_t superpixel) -> UInt16Vector"""
        return _target_calib.MappingSP_GetContainedPixels(self, superpixel)

    def GetContainedPixelsVector(self):
        r"""GetContainedPixelsVector(MappingSP self) -> std::vector< std::vector< uint16_t,std::allocator< uint16_t > >,std::allocator< std::vector< uint16_t,std::allocator< uint16_t > > > >"""
        return _target_calib.MappingSP_GetContainedPixelsVector(self)
    __swig_destroy__ = _target_calib.delete_MappingSP

# Register MappingSP in _target_calib:
_target_calib.MappingSP_swigregister(MappingSP)

class MappingTM(object):
    r"""Proxy of C++ CTA::TargetCalib::MappingTM class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mapping):
        r"""__init__(MappingTM self, Mapping mapping) -> MappingTM"""
        _target_calib.MappingTM_swiginit(self, _target_calib.new_MappingTM(mapping))

    def Recreate(self, mapping):
        r"""Recreate(MappingTM self, Mapping mapping)"""
        return _target_calib.MappingTM_Recreate(self, mapping)

    def GetNeighbours(self, superpixel, diagonals=False):
        r"""GetNeighbours(MappingTM self, uint16_t superpixel, bool diagonals=False) -> UInt16Set"""
        return _target_calib.MappingTM_GetNeighbours(self, superpixel, diagonals)

    def GetSize(self):
        r"""GetSize(MappingTM self) -> double"""
        return _target_calib.MappingTM_GetSize(self)

    def GetNModules(self):
        r"""GetNModules(MappingTM self) -> uint16_t"""
        return _target_calib.MappingTM_GetNModules(self)

    def GetNRows(self):
        r"""GetNRows(MappingTM self) -> uint16_t"""
        return _target_calib.MappingTM_GetNRows(self)

    def GetNColumns(self):
        r"""GetNColumns(MappingTM self) -> uint16_t"""
        return _target_calib.MappingTM_GetNColumns(self)

    def GetSlot(self, slot):
        r"""GetSlot(MappingTM self, uint16_t slot) -> uint16_t"""
        return _target_calib.MappingTM_GetSlot(self, slot)

    def GetSlotVector(self):
        r"""GetSlotVector(MappingTM self) -> UInt16Vector"""
        return _target_calib.MappingTM_GetSlotVector(self)

    def GetRow(self, slot):
        r"""GetRow(MappingTM self, uint16_t slot) -> uint16_t"""
        return _target_calib.MappingTM_GetRow(self, slot)

    def GetRowVector(self):
        r"""GetRowVector(MappingTM self) -> UInt16Vector"""
        return _target_calib.MappingTM_GetRowVector(self)

    def GetColumn(self, slot):
        r"""GetColumn(MappingTM self, uint16_t slot) -> uint16_t"""
        return _target_calib.MappingTM_GetColumn(self, slot)

    def GetColumnVector(self):
        r"""GetColumnVector(MappingTM self) -> UInt16Vector"""
        return _target_calib.MappingTM_GetColumnVector(self)

    def GetXPix(self, slot):
        r"""GetXPix(MappingTM self, uint16_t slot) -> double"""
        return _target_calib.MappingTM_GetXPix(self, slot)

    def GetXPixVector(self):
        r"""GetXPixVector(MappingTM self) -> DoubleVector"""
        return _target_calib.MappingTM_GetXPixVector(self)

    def GetYPix(self, slot):
        r"""GetYPix(MappingTM self, uint16_t slot) -> double"""
        return _target_calib.MappingTM_GetYPix(self, slot)

    def GetYPixVector(self):
        r"""GetYPixVector(MappingTM self) -> DoubleVector"""
        return _target_calib.MappingTM_GetYPixVector(self)

    def GetContainedPixels(self, slot):
        r"""GetContainedPixels(MappingTM self, uint16_t slot) -> UInt16Vector"""
        return _target_calib.MappingTM_GetContainedPixels(self, slot)

    def GetContainedPixelsVector(self):
        r"""GetContainedPixelsVector(MappingTM self) -> std::vector< std::vector< uint16_t,std::allocator< uint16_t > >,std::allocator< std::vector< uint16_t,std::allocator< uint16_t > > > >"""
        return _target_calib.MappingTM_GetContainedPixelsVector(self)
    __swig_destroy__ = _target_calib.delete_MappingTM

# Register MappingTM in _target_calib:
_target_calib.MappingTM_swigregister(MappingTM)

class Mapping(object):
    r"""Proxy of C++ CTA::TargetCalib::Mapping class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cfgPath, singleModule=False):
        r"""__init__(Mapping self, std::string cfgPath, bool singleModule=False) -> Mapping"""
        _target_calib.Mapping_swiginit(self, _target_calib.new_Mapping(cfgPath, singleModule))
    __swig_destroy__ = _target_calib.delete_Mapping

    def Rotate(self, rotation):
        r"""Rotate(Mapping self, uint16_t rotation)"""
        return _target_calib.Mapping_Rotate(self, rotation)

    def CreateASCII(self, filepath):
        r"""CreateASCII(Mapping self, std::string filepath)"""
        return _target_calib.Mapping_CreateASCII(self, filepath)

    def GetNeighbours(self, pixel, diagonals=False):
        r"""GetNeighbours(Mapping self, uint16_t pixel, bool diagonals=False) -> UInt16Set"""
        return _target_calib.Mapping_GetNeighbours(self, pixel, diagonals)

    def GetSize(self):
        r"""GetSize(Mapping self) -> double"""
        return _target_calib.Mapping_GetSize(self)

    def GetCfgPath(self):
        r"""GetCfgPath(Mapping self) -> std::string"""
        return _target_calib.Mapping_GetCfgPath(self)

    def IsSingleModule(self):
        r"""IsSingleModule(Mapping self) -> bool"""
        return _target_calib.Mapping_IsSingleModule(self)

    def GetNPixels(self):
        r"""GetNPixels(Mapping self) -> uint16_t"""
        return _target_calib.Mapping_GetNPixels(self)

    def GetNModules(self):
        r"""GetNModules(Mapping self) -> uint16_t"""
        return _target_calib.Mapping_GetNModules(self)

    def GetNTMPix(self):
        r"""GetNTMPix(Mapping self) -> uint16_t"""
        return _target_calib.Mapping_GetNTMPix(self)

    def GetNRows(self):
        r"""GetNRows(Mapping self) -> uint16_t"""
        return _target_calib.Mapping_GetNRows(self)

    def GetNColumns(self):
        r"""GetNColumns(Mapping self) -> uint16_t"""
        return _target_calib.Mapping_GetNColumns(self)

    def GetNSuperPixels(self):
        r"""GetNSuperPixels(Mapping self) -> uint16_t"""
        return _target_calib.Mapping_GetNSuperPixels(self)

    def GetMappingSP(self):
        r"""GetMappingSP(Mapping self) -> MappingSP"""
        return _target_calib.Mapping_GetMappingSP(self)

    def GetMappingTM(self):
        r"""GetMappingTM(Mapping self) -> MappingTM"""
        return _target_calib.Mapping_GetMappingTM(self)

    def GetPixel(self, pixel):
        r"""GetPixel(Mapping self, uint16_t pixel) -> uint16_t"""
        return _target_calib.Mapping_GetPixel(self, pixel)

    def GetPixelVector(self):
        r"""GetPixelVector(Mapping self) -> UInt16Vector"""
        return _target_calib.Mapping_GetPixelVector(self)

    def GetSlot(self, pixel):
        r"""GetSlot(Mapping self, uint16_t pixel) -> uint16_t"""
        return _target_calib.Mapping_GetSlot(self, pixel)

    def GetSlotVector(self):
        r"""GetSlotVector(Mapping self) -> UInt16Vector"""
        return _target_calib.Mapping_GetSlotVector(self)

    def GetASIC(self, pixel):
        r"""GetASIC(Mapping self, uint16_t pixel) -> uint16_t"""
        return _target_calib.Mapping_GetASIC(self, pixel)

    def GetASICVector(self):
        r"""GetASICVector(Mapping self) -> UInt16Vector"""
        return _target_calib.Mapping_GetASICVector(self)

    def GetChannel(self, pixel):
        r"""GetChannel(Mapping self, uint16_t pixel) -> uint16_t"""
        return _target_calib.Mapping_GetChannel(self, pixel)

    def GetChannelVector(self):
        r"""GetChannelVector(Mapping self) -> UInt16Vector"""
        return _target_calib.Mapping_GetChannelVector(self)

    def GetTMPixel(self, pixel):
        r"""GetTMPixel(Mapping self, uint16_t pixel) -> uint16_t"""
        return _target_calib.Mapping_GetTMPixel(self, pixel)

    def GetTMPixelVector(self):
        r"""GetTMPixelVector(Mapping self) -> UInt16Vector"""
        return _target_calib.Mapping_GetTMPixelVector(self)

    def GetRow(self, pixel):
        r"""GetRow(Mapping self, uint16_t pixel) -> uint16_t"""
        return _target_calib.Mapping_GetRow(self, pixel)

    def GetRowVector(self):
        r"""GetRowVector(Mapping self) -> UInt16Vector"""
        return _target_calib.Mapping_GetRowVector(self)

    def GetColumn(self, pixel):
        r"""GetColumn(Mapping self, uint16_t pixel) -> uint16_t"""
        return _target_calib.Mapping_GetColumn(self, pixel)

    def GetColumnVector(self):
        r"""GetColumnVector(Mapping self) -> UInt16Vector"""
        return _target_calib.Mapping_GetColumnVector(self)

    def GetSipmPix(self, pixel):
        r"""GetSipmPix(Mapping self, uint16_t pixel) -> uint16_t"""
        return _target_calib.Mapping_GetSipmPix(self, pixel)

    def GetSipmPixVector(self):
        r"""GetSipmPixVector(Mapping self) -> UInt16Vector"""
        return _target_calib.Mapping_GetSipmPixVector(self)

    def GetSuperPixel(self, pixel):
        r"""GetSuperPixel(Mapping self, uint16_t pixel) -> uint16_t"""
        return _target_calib.Mapping_GetSuperPixel(self, pixel)

    def GetSuperPixelVector(self):
        r"""GetSuperPixelVector(Mapping self) -> UInt16Vector"""
        return _target_calib.Mapping_GetSuperPixelVector(self)

    def GetXPix(self, pixel):
        r"""GetXPix(Mapping self, uint16_t pixel) -> double"""
        return _target_calib.Mapping_GetXPix(self, pixel)

    def GetXPixVector(self):
        r"""GetXPixVector(Mapping self) -> DoubleVector"""
        return _target_calib.Mapping_GetXPixVector(self)

    def GetYPix(self, pixel):
        r"""GetYPix(Mapping self, uint16_t pixel) -> double"""
        return _target_calib.Mapping_GetYPix(self, pixel)

    def GetYPixVector(self):
        r"""GetYPixVector(Mapping self) -> DoubleVector"""
        return _target_calib.Mapping_GetYPixVector(self)

    def GetTriggerPatch(self, pixel):
        r"""GetTriggerPatch(Mapping self, uint16_t pixel) -> uint16_t"""
        return _target_calib.Mapping_GetTriggerPatch(self, pixel)

    def GetTriggerPatchVector(self):
        r"""GetTriggerPatchVector(Mapping self) -> UInt16Vector"""
        return _target_calib.Mapping_GetTriggerPatchVector(self)

    def GetHVPatch(self, pixel):
        r"""GetHVPatch(Mapping self, uint16_t pixel) -> uint16_t"""
        return _target_calib.Mapping_GetHVPatch(self, pixel)

    def GetHVPatchVector(self):
        r"""GetHVPatchVector(Mapping self) -> UInt16Vector"""
        return _target_calib.Mapping_GetHVPatchVector(self)
    fOTUpRow_l = property(_target_calib.Mapping_fOTUpRow_l_get, _target_calib.Mapping_fOTUpRow_l_set, doc=r"""fOTUpRow_l : uint16_t""")
    fOTUpRow_u = property(_target_calib.Mapping_fOTUpRow_u_get, _target_calib.Mapping_fOTUpRow_u_set, doc=r"""fOTUpRow_u : uint16_t""")
    fOTUpCol_l = property(_target_calib.Mapping_fOTUpCol_l_get, _target_calib.Mapping_fOTUpCol_l_set, doc=r"""fOTUpCol_l : uint16_t""")
    fOTUpCol_u = property(_target_calib.Mapping_fOTUpCol_u_get, _target_calib.Mapping_fOTUpCol_u_set, doc=r"""fOTUpCol_u : uint16_t""")
    fOTUpX_l = property(_target_calib.Mapping_fOTUpX_l_get, _target_calib.Mapping_fOTUpX_l_set, doc=r"""fOTUpX_l : double""")
    fOTUpX_u = property(_target_calib.Mapping_fOTUpX_u_get, _target_calib.Mapping_fOTUpX_u_set, doc=r"""fOTUpX_u : double""")
    fOTUpY_l = property(_target_calib.Mapping_fOTUpY_l_get, _target_calib.Mapping_fOTUpY_l_set, doc=r"""fOTUpY_l : double""")
    fOTUpY_u = property(_target_calib.Mapping_fOTUpY_u_get, _target_calib.Mapping_fOTUpY_u_set, doc=r"""fOTUpY_u : double""")

    def as_dataframe(self):
        r"""as_dataframe(Mapping self)"""
        return _target_calib.Mapping_as_dataframe(self)

    def as_dataframe(self):
    	import numpy as np
    	import pandas as pd
    	df = pd.DataFrame(dict(
    		pixel=np.array(self.GetPixelVector(), dtype=np.uint16),
    		slot=np.array(self.GetSlotVector(), dtype=np.uint16),
    		asic=np.array(self.GetASICVector(), dtype=np.uint16),
    		channel=np.array(self.GetChannelVector(), dtype=np.uint16),
    		tmpix=np.array(self.GetTMPixelVector(), dtype=np.uint16),
    		row=np.array(self.GetRowVector(), dtype=np.uint16),
    		col=np.array(self.GetColumnVector(), dtype=np.uint16),
    		sipmpix=np.array(self.GetSipmPixVector(), dtype=np.uint16),
    		superpixel=np.array(self.GetSuperPixelVector(), dtype=np.uint16),
    		xpix=np.array(self.GetXPixVector(), dtype=np.double),
    		ypix=np.array(self.GetYPixVector(), dtype=np.double)
    	))
    	return df


# Register Mapping in _target_calib:
_target_calib.Mapping_swigregister(Mapping)

class RunningStats(object):
    r"""Proxy of C++ RunningStats class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RunningStats self) -> RunningStats"""
        _target_calib.RunningStats_swiginit(self, _target_calib.new_RunningStats())

    def Clear(self):
        r"""Clear(RunningStats self)"""
        return _target_calib.RunningStats_Clear(self)

    def Push(self, x):
        r"""Push(RunningStats self, double x)"""
        return _target_calib.RunningStats_Push(self, x)

    def PushArray(self, array):
        r"""PushArray(RunningStats self, double * array)"""
        return _target_calib.RunningStats_PushArray(self, array)

    def NumDataValues(self):
        r"""NumDataValues(RunningStats self) -> int"""
        return _target_calib.RunningStats_NumDataValues(self)

    def Mean(self):
        r"""Mean(RunningStats self) -> double"""
        return _target_calib.RunningStats_Mean(self)

    def Variance(self):
        r"""Variance(RunningStats self) -> double"""
        return _target_calib.RunningStats_Variance(self)

    def StandardDeviation(self):
        r"""StandardDeviation(RunningStats self) -> double"""
        return _target_calib.RunningStats_StandardDeviation(self)
    __swig_destroy__ = _target_calib.delete_RunningStats

# Register RunningStats in _target_calib:
_target_calib.RunningStats_swigregister(RunningStats)

class Version(object):
    r"""Proxy of C++ CTA::TargetCalib::Version class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    major = property(_target_calib.Version_major_get, _target_calib.Version_major_set, doc=r"""major : int""")
    minor = property(_target_calib.Version_minor_get, _target_calib.Version_minor_set, doc=r"""minor : int""")
    revision = property(_target_calib.Version_revision_get, _target_calib.Version_revision_set, doc=r"""revision : int""")

    def __init__(self, *args):
        r"""
        __init__(Version self, char const * version) -> Version
        __init__(Version self, std::string const & version) -> Version
        """
        _target_calib.Version_swiginit(self, _target_calib.new_Version(*args))

    def __str__(self):
        r"""__str__(Version self) -> std::string"""
        return _target_calib.Version___str__(self)
    __swig_destroy__ = _target_calib.delete_Version

# Register Version in _target_calib:
_target_calib.Version_swigregister(Version)


def __lshift__(os, version):
    r"""__lshift__(std::ostream & os, Version version) -> std::ostream &"""
    return _target_calib.__lshift__(os, version)

def __eq__(lhs, rhs):
    r"""__eq__(Version lhs, Version rhs) -> bool"""
    return _target_calib.__eq__(lhs, rhs)

def __lt__(lhs, rhs):
    r"""__lt__(Version lhs, Version rhs) -> bool"""
    return _target_calib.__lt__(lhs, rhs)

def __gt__(lhs, rhs):
    r"""__gt__(Version lhs, Version rhs) -> bool"""
    return _target_calib.__gt__(lhs, rhs)

def __le__(lhs, rhs):
    r"""__le__(Version lhs, Version rhs) -> bool"""
    return _target_calib.__le__(lhs, rhs)

def __ge__(lhs, rhs):
    r"""__ge__(Version lhs, Version rhs) -> bool"""
    return _target_calib.__ge__(lhs, rhs)
class CameraConfiguration(object):
    r"""Proxy of C++ CTA::TargetCalib::CameraConfiguration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CameraConfiguration self, std::string version="1.1.0") -> CameraConfiguration"""
        _target_calib.CameraConfiguration_swiginit(self, _target_calib.new_CameraConfiguration(*args))

    def GetVersion(self):
        r"""GetVersion(CameraConfiguration self) -> std::string"""
        return _target_calib.CameraConfiguration_GetVersion(self)

    def GetDescription(self):
        r"""GetDescription(CameraConfiguration self) -> std::string"""
        return _target_calib.CameraConfiguration_GetDescription(self)

    def GetNCells(self):
        r"""GetNCells(CameraConfiguration self) -> uint16_t"""
        return _target_calib.CameraConfiguration_GetNCells(self)

    def GetMappingPath(self):
        r"""GetMappingPath(CameraConfiguration self) -> std::string"""
        return _target_calib.CameraConfiguration_GetMappingPath(self)

    def GetMapping(self, singleModule=False):
        r"""GetMapping(CameraConfiguration self, bool singleModule=False) -> Mapping"""
        return _target_calib.CameraConfiguration_GetMapping(self, singleModule)

    def GetReferencePulsePath(self):
        r"""GetReferencePulsePath(CameraConfiguration self) -> std::string"""
        return _target_calib.CameraConfiguration_GetReferencePulsePath(self)

    def GetReferencePulse(self):
        r"""GetReferencePulse(CameraConfiguration self) -> FloatVector2D"""
        return _target_calib.CameraConfiguration_GetReferencePulse(self)
    __swig_destroy__ = _target_calib.delete_CameraConfiguration

# Register CameraConfiguration in _target_calib:
_target_calib.CameraConfiguration_swigregister(CameraConfiguration)



