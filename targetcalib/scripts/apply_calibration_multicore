#!/usr/bin/env python
import argparse
from argparse import ArgumentDefaultsHelpFormatter as Formatter
from subprocess import call, PIPE
from multiprocessing import Pool, cpu_count
from tqdm import tqdm


def process(cmd):
    call(cmd, shell=True, stdout=PIPE)
    return 0


def main():
    description = "Execute TargetCalib's apply_calibration on multiple cores"
    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=Formatter)
    parser.add_argument('-i', dest='input_paths', nargs='+',
                        required=True,
                        help='Raw data input file name(s)')
    parser.add_argument('-p', dest='pedestal_path', action='store',
                        required=True,
                        help='Pedestal file name (required)')
    parser.add_argument('-t', dest='tf_path', action='store',
                        help='Transfer function file name (optional)')
    parser.add_argument('-x', dest='auto_tf', action='store_true',
                        help='Automatically get transfer function file from '
                             'header (flag)')
    parser.add_argument('-n', dest='max_events', action='store',
                        help='Number of events to process', type=int)
    parser.add_argument('--ncores', dest='n_cores', action='store',
                        default=cpu_count() - 3,
                        help='Number of cpu cores to use', type=int)
    parser.add_argument('--split', dest='split', action='store_true',
                        help='Split the file list between cores '
                             '(faster, but loses progress information)')
    args = parser.parse_args()

    argstring = " -p {}".format(args.pedestal_path)
    if args.tf_path:
        argstring += " -t {}".format(args.tf_path)
    if args.auto_tf:
        argstring += " -x"
    if args.max_events:
        argstring += " -n {}".format(args.max_events)

    if args.split:
        n_cores = args.n_cores
        split = [args.input_paths[i::n_cores] for i in range(n_cores)]
        cmds = []
        for ilist, paths in enumerate(split):
            cmd = "apply_calibration -i {}".format(" ".join(paths))
            cmd += argstring
            cmds.append(cmd)
        with Pool(args.n_cores) as pool:
            pool.map(process, cmds)
    else:
        cmds = []
        for ilist, path in enumerate(args.input_paths):
            cmd = "apply_calibration -i {}".format(path)
            cmd += argstring
            cmds.append(cmd)
        desc = "Calibrating files"
        with Pool(args.n_cores) as pool:
            list(tqdm(pool.imap(process, cmds), total=len(cmds), desc=desc))


if __name__ == '__main__':
    main()
