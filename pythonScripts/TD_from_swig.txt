Help on module target_driver:

NAME
    target_driver

DESCRIPTION
    # This file was automatically generated by SWIG (http://www.swig.org).
    # Version 4.0.2
    #
    # Do not make changes to this file unless you know what you are doing--modify
    # the SWIG interface file instead.

CLASSES
    builtins.object
        DataPacket
        EventBuffer
        EventHeader
        RawEvent
        RegisterASIC
        RegisterFPGA
        RegisterSettings
        Setting
        SettingASIC
        SwigPyIterator
        UDPBase
            UDPClient
                DataListener
                TargetModule
                    TesterBoard
            UDPServer
                ModuleSimulator
        Waveform
    
    class DataListener(UDPClient)
     |  DataListener(pBufferDepth, pNPacketsPerEvent, pPacketSize, pBuildTimeout=0.2, pCheckFreq=0)
     |  
     |  Proxy of C++ CTA::TargetDriver::DataListener class.
     |  
     |  Method resolution order:
     |      DataListener
     |      UDPClient
     |      UDPBase
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  AddDAQListener(self, pMyIP)
     |      AddDAQListener(DataListener self, std::string const & pMyIP) -> int
     |  
     |  DropPackets(self, drop=True)
     |      DropPackets(DataListener self, bool drop=True)
     |  
     |  GetEventBuffer(self)
     |      GetEventBuffer(DataListener self) -> std::shared_ptr< CTA::TargetDriver::EventBuffer >
     |  
     |  GetNPacketProblems(self)
     |      GetNPacketProblems(DataListener self) -> uint64_t
     |  
     |  GetNPacketsReceived(self)
     |      GetNPacketsReceived(DataListener self) -> uint64_t
     |  
     |  IsRunning(self)
     |      IsRunning(DataListener self) -> bool
     |  
     |  StartListening(self)
     |      StartListening(DataListener self)
     |  
     |  StopListening(self)
     |      StopListening(DataListener self)
     |  
     |  __init__(self, pBufferDepth, pNPacketsPerEvent, pPacketSize, pBuildTimeout=0.2, pCheckFreq=0)
     |      __init__(DataListener self, uint32_t pBufferDepth, uint16_t pNPacketsPerEvent, uint16_t pPacketSize, float pBuildTimeout=0.2, uint32_t pCheckFreq=0) -> DataListener
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_DataListener(...)
     |      delete_DataListener(DataListener self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UDPClient:
     |  
     |  AddDataListener(self, pMyIP, pMyDataReceivePort, pSocketBufferSize=-1)
     |      AddDataListener(UDPClient self, std::string const & pMyIP, uint16_t pMyDataReceivePort, int32_t pSocketBufferSize=-1) -> int
     |  
     |  CloseDataListenerSockets(self)
     |      CloseDataListenerSockets(UDPClient self)
     |  
     |  CloseSockets(self)
     |      CloseSockets(UDPClient self)
     |  
     |  ConnectToServer(self, pMyIP, pMySourcePort, pServerIP, pServerPort, pSocketBufferSize=-1)
     |      ConnectToServer(UDPClient self, std::string const & pMyIP, uint16_t pMySourcePort, std::string const & pServerIP, uint16_t pServerPort, int32_t pSocketBufferSize=-1) -> int
     |  
     |  GetDataPacket(self, tobefilled, bytes, maxbytes)
     |      GetDataPacket(UDPClient self, void * tobefilled, uint32_t & bytes, size_t maxbytes) -> int
     |  
     |  SendAndReceive(self, message, length, maxlength)
     |      SendAndReceive(UDPClient self, void const * message, uint32_t length, uint32_t maxlength) -> int
     |  
     |  SetMaxAttempts(self, max_attempts)
     |      SetMaxAttempts(UDPClient self, uint8_t max_attempts)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UDPBase:
     |  
     |  CloseSocket(self)
     |      CloseSocket(UDPBase self)
     |  
     |  Receive(self, message, length, max_length)
     |      Receive(UDPBase self, void * message, ssize_t & length, uint32_t max_length) -> int
     |  
     |  ReturnCodeToString(self, code)
     |      ReturnCodeToString(UDPBase self, int code) -> std::string
     |  
     |  SetVerbose(self, verbose=True)
     |      SetVerbose(UDPBase self, bool verbose=True)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from UDPBase:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class DataPacket(builtins.object)
     |  DataPacket(*args)
     |  
     |  Proxy of C++ CTA::TargetDriver::DataPacket class.
     |  
     |  Methods defined here:
     |  
     |  Allocate(self, packetsize)
     |      Allocate(DataPacket self, uint16_t packetsize)
     |  
     |  Assign(self, data, packetsize)
     |      Assign(DataPacket self, uint8_t * data, uint16_t packetsize)
     |  
     |  AssociateWaveform(self, n, pWaveform)
     |      AssociateWaveform(DataPacket self, uint16_t n, Waveform pWaveform)
     |  
     |  ClearFilledFlag(self)
     |      ClearFilledFlag(DataPacket self)
     |  
     |  Deallocate(self)
     |      Deallocate(DataPacket self)
     |  
     |  Fill(self, data, packetsize)
     |      Fill(DataPacket self, uint8_t const * data, uint16_t packetsize) -> bool
     |  
     |  FillFooter(self)
     |      FillFooter(DataPacket self)
     |  
     |  FillHeader(self, waves_per_packet, waveform_samples, camera_slot_id, module_index, event_sequence_number, tack, quad, row, col)
     |      FillHeader(DataPacket self, uint16_t waves_per_packet, uint16_t waveform_samples, uint8_t camera_slot_id, uint8_t module_index, uint8_t event_sequence_number, uint64_t tack, uint8_t quad, uint8_t row, uint8_t col)
     |  
     |  FillZero(self)
     |      FillZero(DataPacket self)
     |  
     |  GetASICID(self)
     |      GetASICID(DataPacket self) -> uint8_t
     |  
     |  GetBlockPhase(self)
     |      GetBlockPhase(DataPacket self) -> uint8_t
     |  
     |  GetBuffers(self)
     |      GetBuffers(DataPacket self) -> uint16_t
     |  
     |  GetChannelID(self)
     |      GetChannelID(DataPacket self) -> uint8_t
     |  
     |  GetColumn(self)
     |      GetColumn(DataPacket self) -> uint8_t
     |  
     |  GetData(self)
     |      GetData(DataPacket self) -> uint8_t *
     |  
     |  GetDetectorID(self)
     |      GetDetectorID(DataPacket self) -> uint8_t
     |  
     |  GetDetectorUniqueTag(self)
     |      GetDetectorUniqueTag(DataPacket self) -> uint8_t
     |  
     |  GetEventNumber(self)
     |      GetEventNumber(DataPacket self) -> uint16_t
     |  
     |  GetEventSequenceNumber(self)
     |      GetEventSequenceNumber(DataPacket self) -> uint8_t
     |  
     |  GetFirstCellId(self)
     |      GetFirstCellId(DataPacket self) -> uint16_t
     |  
     |  GetNumberOfWaveforms(self)
     |      GetNumberOfWaveforms(DataPacket self) -> uint16_t
     |  
     |  GetPacketID(self)
     |      GetPacketID(DataPacket self) -> bool
     |  
     |  GetPacketSize(self)
     |      GetPacketSize(DataPacket self) -> uint16_t
     |  
     |  GetRow(self)
     |      GetRow(DataPacket self) -> uint8_t
     |  
     |  GetSlotID(self)
     |      GetSlotID(DataPacket self) -> uint8_t
     |  
     |  GetStaleBit(self)
     |      GetStaleBit(DataPacket self) -> uint8_t
     |  
     |  GetStatus(self)
     |      GetStatus(DataPacket self) -> int
     |  
     |  GetStatusString(self)
     |      GetStatusString(DataPacket self) -> std::string
     |  
     |  GetTACKMode(self)
     |      GetTACKMode(DataPacket self) -> uint8_t
     |  
     |  GetTACKTime(self)
     |      GetTACKTime(DataPacket self) -> uint64_t
     |  
     |  GetTotalSizeInBytes(self)
     |      GetTotalSizeInBytes(DataPacket self) -> uint16_t
     |  
     |  GetWaveform(self, waveformindex)
     |      GetWaveform(DataPacket self, uint16_t waveformindex) -> Waveform
     |  
     |  GetWaveformBytes(self)
     |      GetWaveformBytes(DataPacket self) -> uint16_t
     |  
     |  GetWaveformLength(self)
     |      GetWaveformLength(DataPacket self) -> uint16_t
     |  
     |  GetWaveformSamples(self)
     |      GetWaveformSamples(DataPacket self) -> uint16_t
     |  
     |  IsEmpty(self)
     |      IsEmpty(DataPacket self) -> bool
     |  
     |  IsFilled(self)
     |      IsFilled(DataPacket self) -> bool
     |  
     |  IsFirstSubPacket(self)
     |      IsFirstSubPacket(DataPacket self) -> bool
     |  
     |  IsLastSubPacket(self)
     |      IsLastSubPacket(DataPacket self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(DataPacket self) -> bool
     |  
     |  IsZeroSupressionEnabled(self)
     |      IsZeroSupressionEnabled(DataPacket self) -> bool
     |  
     |  Print(self)
     |      Print(DataPacket self)
     |  
     |  SummarisePacket(self, *args)
     |      SummarisePacket(DataPacket self, std::ostream & os=std::cout)
     |  
     |  __init__(self, *args)
     |      __init__(DataPacket self, uint16_t waveforms_per_packet, uint16_t samples_per_waveform) -> DataPacket
     |      __init__(DataPacket self, uint16_t packetsize=0) -> DataPacket
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  CalculateFirstCellId(pRow, pColumn, pBlockPhase)
     |      CalculateFirstCellId(uint16_t pRow, uint16_t pColumn, uint16_t pBlockPhase) -> uint16_t
     |  
     |  CalculatePacketSizeInBytes(pWaveformsPerPacket, pSamplesPerWaveform)
     |      CalculatePacketSizeInBytes(uint16_t pWaveformsPerPacket, uint16_t pSamplesPerWaveform) -> uint16_t
     |  
     |  CalculateRowColumnBlockPhase(pCellId, pRow, pColumn, pBlockPhase)
     |      CalculateRowColumnBlockPhase(uint16_t pCellId, uint16_t & pRow, uint16_t & pColumn, uint16_t & pBlockPhase)
     |  
     |  GetNCells()
     |      GetNCells() -> uint16_t
     |  
     |  __swig_destroy__ = delete_DataPacket(...)
     |      delete_DataPacket(DataPacket self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class EventBuffer(builtins.object)
     |  EventBuffer(pBufferDepth, pNPacketsPerEvent, pPacketSize, pBuildTimeout=0.2, pCheckFreq=0)
     |  
     |  Proxy of C++ CTA::TargetDriver::EventBuffer class.
     |  
     |  Methods defined here:
     |  
     |  AddNewPacket(self, pData, pEventID, pPacketID, pPacketSize)
     |      AddNewPacket(EventBuffer self, uint8_t const * pData, uint32_t pEventID, uint16_t pPacketID, uint16_t pPacketSize) -> bool
     |  
     |  Clear(self)
     |      Clear(EventBuffer self)
     |  
     |  ClearEvents(self)
     |      ClearEvents(EventBuffer self)
     |  
     |  DiagnosticReport(self, stream)
     |      DiagnosticReport(EventBuffer self, std::ostream & stream)
     |  
     |  Flush(self)
     |      Flush(EventBuffer self)
     |  
     |  GetEventRate(self)
     |      GetEventRate(EventBuffer self) -> float
     |  
     |  GetFinishedIndex(self)
     |      GetFinishedIndex(EventBuffer self) -> int64_t
     |  
     |  GetNPacketsPerEvent(self)
     |      GetNPacketsPerEvent(EventBuffer self) -> uint16_t
     |  
     |  GetNumberIncomplete(self)
     |      GetNumberIncomplete(EventBuffer self) -> int64_t
     |  
     |  GetNumberToBeRead(self)
     |      GetNumberToBeRead(EventBuffer self) -> int64_t
     |  
     |  GetPacketSize(self)
     |      GetPacketSize(EventBuffer self) -> uint16_t
     |  
     |  GetReadIndex(self)
     |      GetReadIndex(EventBuffer self) -> int64_t
     |  
     |  GetWriteIndex(self)
     |      GetWriteIndex(EventBuffer self) -> int64_t
     |  
     |  ReadEvent(self)
     |      ReadEvent(EventBuffer self) -> RawEvent
     |  
     |  Report(self, stream)
     |      Report(EventBuffer self, std::ostream & stream)
     |  
     |  StatusOK(self)
     |      StatusOK(EventBuffer self) -> bool
     |  
     |  __init__(self, pBufferDepth, pNPacketsPerEvent, pPacketSize, pBuildTimeout=0.2, pCheckFreq=0)
     |      __init__(EventBuffer self, uint32_t pBufferDepth, uint16_t pNPacketsPerEvent, uint16_t pPacketSize, float pBuildTimeout=0.2, uint32_t pCheckFreq=0) -> EventBuffer
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_EventBuffer(...)
     |      delete_EventBuffer(EventBuffer self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class EventHeader(builtins.object)
     |  Proxy of C++ CTA::TargetDriver::EventHeader class.
     |  
     |  Methods defined here:
     |  
     |  CalcDeltaTSinceTimeStamp(self)
     |      CalcDeltaTSinceTimeStamp(EventHeader self) -> double
     |  
     |  GetEventID(self)
     |      GetEventID(EventHeader self) -> uint32_t
     |  
     |  GetNPacketsFilled(self)
     |      GetNPacketsFilled(EventHeader self) -> uint16_t
     |  
     |  GetTACK(self)
     |      GetTACK(EventHeader self) -> uint64_t
     |  
     |  GetTimeStamp(self, pSec, pNanosec)
     |      GetTimeStamp(EventHeader self, int64_t & pSec, int64_t & pNanosec)
     |  
     |  IfTimeStampIsZero(self)
     |      IfTimeStampIsZero(EventHeader self) -> bool
     |  
     |  IncrementNPacketsFilled(self)
     |      IncrementNPacketsFilled(EventHeader self)
     |  
     |  Init(self)
     |      Init(EventHeader self)
     |  
     |  SetEventID(self, pEventID)
     |      SetEventID(EventHeader self, uint32_t pEventID)
     |  
     |  SetNPacketsFilled(self, pNPacketsFilled)
     |      SetNPacketsFilled(EventHeader self, uint16_t pNPacketsFilled)
     |  
     |  SetTACK(self, pTACK)
     |      SetTACK(EventHeader self, uint64_t pTACK)
     |  
     |  SetTimeStamp(self, pSec, pNanosec)
     |      SetTimeStamp(EventHeader self, int64_t pSec, int64_t pNanosec)
     |  
     |  SetTimeStampNow(self)
     |      SetTimeStampNow(EventHeader self)
     |  
     |  __init__(self)
     |      __init__(EventHeader self) -> EventHeader
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_EventHeader(...)
     |      delete_EventHeader(EventHeader self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  kColumnForm = <Swig Object of type 'std::vector< std::string > *'>
     |  
     |  kColumnType = <Swig Object of type 'std::vector< std::string > *'>
     |  
     |  kColumnUnit = <Swig Object of type 'std::vector< std::string > *'>
    
    class ModuleSimulator(UDPServer)
     |  ModuleSimulator(*args)
     |  
     |  Proxy of C++ CTA::TargetDriver::ModuleSimulator class.
     |  
     |  Method resolution order:
     |      ModuleSimulator
     |      UDPServer
     |      UDPBase
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  CheckTimeDifference(self)
     |      CheckTimeDifference(ModuleSimulator self) -> bool
     |  
     |  CloseSockets(self)
     |      CloseSockets(ModuleSimulator self)
     |  
     |  IsRunning(self)
     |      IsRunning(ModuleSimulator self) -> bool
     |  
     |  ListenAndRespond(self)
     |      ListenAndRespond(ModuleSimulator self)
     |  
     |  RunTrigger(self)
     |      RunTrigger(ModuleSimulator self)
     |  
     |  SendEventData(self)
     |      SendEventData(ModuleSimulator self)
     |  
     |  SetRefWaveform(self)
     |      SetRefWaveform(ModuleSimulator self)
     |  
     |  SetTriggerRate(self, pRate)
     |      SetTriggerRate(ModuleSimulator self, double pRate)
     |  
     |  SetVerbose(self, verbose)
     |      SetVerbose(ModuleSimulator self, bool verbose)
     |  
     |  Start(self)
     |      Start(ModuleSimulator self)
     |  
     |  StartTriggering(self)
     |      StartTriggering(ModuleSimulator self)
     |  
     |  Stop(self)
     |      Stop(ModuleSimulator self)
     |  
     |  StopTriggering(self)
     |      StopTriggering(ModuleSimulator self)
     |  
     |  __init__(self, *args)
     |      __init__(ModuleSimulator self, std::string const & pModuleIP, std::string const & pFPGADef="", std::string const & pASICDef="", std::string const & pTriggerASICDef="", double rate=10) -> ModuleSimulator
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_ModuleSimulator(...)
     |      delete_ModuleSimulator(ModuleSimulator self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UDPServer:
     |  
     |  SendDataPacket(self, data, length)
     |      SendDataPacket(UDPServer self, void const * data, uint32_t length) -> int
     |  
     |  SendResponse(self, data, length)
     |      SendResponse(UDPServer self, void const * data, uint32_t length) -> int
     |  
     |  Setup(self, pMyIP, pSlowControlListeningPort, pDataDestPort, receive_timout_ms)
     |      Setup(UDPServer self, std::string const & pMyIP, uint16_t pSlowControlListeningPort, uint16_t pDataDestPort, uint32_t receive_timout_ms) -> int
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UDPBase:
     |  
     |  CloseSocket(self)
     |      CloseSocket(UDPBase self)
     |  
     |  Receive(self, message, length, max_length)
     |      Receive(UDPBase self, void * message, ssize_t & length, uint32_t max_length) -> int
     |  
     |  ReturnCodeToString(self, code)
     |      ReturnCodeToString(UDPBase self, int code) -> std::string
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from UDPBase:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class RawEvent(builtins.object)
     |  RawEvent(pNPacketsPerEvent, pPacketSize)
     |  
     |  Proxy of C++ CTA::TargetDriver::RawEvent class.
     |  
     |  Methods defined here:
     |  
     |  AddNewPacket(self, pData, pPacketID, pPacketSize, checkflag=False)
     |      AddNewPacket(RawEvent self, uint8_t const * pData, uint16_t pPacketID, uint16_t pPacketSize, bool checkflag=False) -> bool
     |  
     |  Clear(self)
     |      Clear(RawEvent self)
     |  
     |  GetDataPackets(self)
     |      GetDataPackets(RawEvent self) -> std::vector< CTA::TargetDriver::DataPacket * > const &
     |  
     |  GetEventHeader(self)
     |      GetEventHeader(RawEvent self) -> EventHeader
     |  
     |  GetNPacketsPerEvent(self)
     |      GetNPacketsPerEvent(RawEvent self) -> std::size_t
     |  
     |  GetPacketSize(self)
     |      GetPacketSize(RawEvent self) -> uint16_t
     |  
     |  GetTimeoutSec(self)
     |      GetTimeoutSec(RawEvent self) -> double
     |  
     |  IsBeingBuilt(self)
     |      IsBeingBuilt(RawEvent self) -> bool
     |  
     |  IsComplete(self)
     |      IsComplete(RawEvent self) -> bool
     |  
     |  IsEmpty(self)
     |      IsEmpty(RawEvent self) -> bool
     |  
     |  IsTimedOut(self)
     |      IsTimedOut(RawEvent self) -> bool
     |  
     |  SetToFlushed(self)
     |      SetToFlushed(RawEvent self)
     |  
     |  SetToRead(self)
     |      SetToRead(RawEvent self)
     |  
     |  WasFlushed(self)
     |      WasFlushed(RawEvent self) -> bool
     |  
     |  WasRead(self)
     |      WasRead(RawEvent self) -> bool
     |  
     |  WaveformCheckStatus(self)
     |      WaveformCheckStatus(RawEvent self) -> bool
     |  
     |  __init__(self, pNPacketsPerEvent, pPacketSize)
     |      __init__(RawEvent self, uint16_t pNPacketsPerEvent, uint16_t pPacketSize) -> RawEvent
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  SetTimeoutSec(pTimeoutSec)
     |      SetTimeoutSec(double pTimeoutSec)
     |  
     |  __swig_destroy__ = delete_RawEvent(...)
     |      delete_RawEvent(RawEvent self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class RegisterASIC(builtins.object)
     |  Proxy of C++ CTA::TargetDriver::RegisterASIC class.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      __init__(RegisterASIC self) -> RegisterASIC
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_RegisterASIC(...)
     |      delete_RegisterASIC(RegisterASIC self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
     |  
     |  val
     |      val : a(4).uint16_t
    
    class RegisterFPGA(builtins.object)
     |  Proxy of C++ CTA::TargetDriver::RegisterFPGA class.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      __init__(RegisterFPGA self) -> RegisterFPGA
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_RegisterFPGA(...)
     |      delete_RegisterFPGA(RegisterFPGA self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  access
     |      access : CTA::TargetDriver::Access
     |  
     |  thisown
     |      The membership flag
     |  
     |  val
     |      val : uint32_t
    
    class RegisterSettings(builtins.object)
     |  RegisterSettings(*args)
     |  
     |  Proxy of C++ CTA::TargetDriver::RegisterSettings class.
     |  
     |  Methods defined here:
     |  
     |  AddASICSetting(self, name, setting, isTriggerASIC=False)
     |      AddASICSetting(RegisterSettings self, std::string const & name, SettingASIC setting, bool isTriggerASIC=False) -> int
     |  
     |  AddFPGASetting(self, name, setting)
     |      AddFPGASetting(RegisterSettings self, std::string const & name, Setting setting) -> int
     |  
     |  AddTriggerASICSetting(self, name, setting)
     |      AddTriggerASICSetting(RegisterSettings self, std::string const & name, SettingASIC setting) -> int
     |  
     |  CheckASICRegisterConsistency(self, isTriggerASIC=False)
     |      CheckASICRegisterConsistency(RegisterSettings self, bool isTriggerASIC=False) -> int
     |  
     |  CheckFPGARegisterConsistency(self)
     |      CheckFPGARegisterConsistency(RegisterSettings self) -> int
     |  
     |  CheckRegisterPartially(self, reg, set)
     |      CheckRegisterPartially(RegisterSettings self, uint32_t reg, Setting set) -> bool
     |  
     |  CheckTriggerASICRegisterConsistency(self)
     |      CheckTriggerASICRegisterConsistency(RegisterSettings self) -> int
     |  
     |  GenerateASICMarkdown(self, fname, isTriggerASIC=False)
     |      GenerateASICMarkdown(RegisterSettings self, std::string const & fname, bool isTriggerASIC=False)
     |  
     |  GenerateFPGAMarkdown(self, fname)
     |      GenerateFPGAMarkdown(RegisterSettings self, std::string const & fname)
     |  
     |  GenerateTriggerASICMarkdown(self, fname)
     |      GenerateTriggerASICMarkdown(RegisterSettings self, std::string const & fname)
     |  
     |  GetASICRegisterValue(self, name, asic, val, isTriggerASIC=False)
     |      GetASICRegisterValue(RegisterSettings self, std::string const & name, uint8_t asic, uint16_t & val, bool isTriggerASIC=False) -> int
     |  
     |  GetASICSettingRegisterAddress(self, name, addr, isTriggerASIC=False)
     |      GetASICSettingRegisterAddress(RegisterSettings self, std::string const & name, uint8_t & addr, bool isTriggerASIC=False) -> int
     |  
     |  GetFPGARegisterValue(self, addr)
     |      GetFPGARegisterValue(RegisterSettings self, uint32_t addr) -> int
     |  
     |  GetFPGASettingRegisterAddress(self, name, addr)
     |      GetFPGASettingRegisterAddress(RegisterSettings self, std::string const & name, uint32_t & addr) -> int
     |  
     |  GetRegisterPartially(self, reg, set, reg_par)
     |      GetRegisterPartially(RegisterSettings self, uint32_t reg, Setting set, uint32_t & reg_par)
     |  
     |  GetTriggerASICRegisterValue(self, name, asic, val)
     |      GetTriggerASICRegisterValue(RegisterSettings self, std::string const & name, uint8_t asic, uint16_t & val) -> int
     |  
     |  GetTriggerASICSettingRegisterAddress(self, name, addr)
     |      GetTriggerASICSettingRegisterAddress(RegisterSettings self, std::string const & name, uint8_t & addr) -> int
     |  
     |  ModifyASICSetting(self, name, asic, val, isTriggerASIC=False)
     |      ModifyASICSetting(RegisterSettings self, std::string const & name, uint8_t asic, uint16_t val, bool isTriggerASIC=False) -> int
     |  
     |  ModifyFPGASetting(self, name, newVal)
     |      ModifyFPGASetting(RegisterSettings self, std::string const & name, uint32_t newVal) -> int
     |  
     |  ModifyRegisterPartially(self, reg, set)
     |      ModifyRegisterPartially(RegisterSettings self, uint32_t & reg, Setting set)
     |  
     |  ModifyTriggerASICSetting(self, name, asic, val)
     |      ModifyTriggerASICSetting(RegisterSettings self, std::string const & name, uint8_t asic, uint16_t val) -> int
     |  
     |  PrintASICSetting(self, settingName, isTriggerASIC=False)
     |      PrintASICSetting(RegisterSettings self, std::string const & settingName, bool isTriggerASIC=False)
     |  
     |  PrintAllRegisters(self)
     |      PrintAllRegisters(RegisterSettings self)
     |  
     |  PrintAllSettings(self)
     |      PrintAllSettings(RegisterSettings self)
     |  
     |  PrintFPGASetting(self, settingName)
     |      PrintFPGASetting(RegisterSettings self, std::string const & settingName)
     |  
     |  PrintHeaderASIC(self, isTriggerASIC=False)
     |      PrintHeaderASIC(RegisterSettings self, bool isTriggerASIC=False)
     |  
     |  PrintHeaderFPGA(self)
     |      PrintHeaderFPGA(RegisterSettings self)
     |  
     |  PrintHeaderTriggerASIC(self)
     |      PrintHeaderTriggerASIC(RegisterSettings self)
     |  
     |  PrintSetting(self, set)
     |      PrintSetting(RegisterSettings self, Setting set)
     |  
     |  PrintTriggerASICSetting(self, settingName)
     |      PrintTriggerASICSetting(RegisterSettings self, std::string const & settingName)
     |  
     |  ReadDefinitionFileASIC(self, isTriggerASIC=False)
     |      ReadDefinitionFileASIC(RegisterSettings self, bool isTriggerASIC=False) -> int
     |  
     |  ReadDefinitionFileFPGA(self)
     |      ReadDefinitionFileFPGA(RegisterSettings self) -> int
     |  
     |  ReadDefinitionFileTriggerASIC(self)
     |      ReadDefinitionFileTriggerASIC(RegisterSettings self) -> int
     |  
     |  ReadUserASICConfigFile(self, configFile, isTriggerASIC=False)
     |      ReadUserASICConfigFile(RegisterSettings self, std::string const & configFile, bool isTriggerASIC=False) -> int
     |  
     |  ReadUserFPGAConfigFile(self, configFile)
     |      ReadUserFPGAConfigFile(RegisterSettings self, std::string const & configFile) -> int
     |  
     |  ReadUserTriggerASICConfigFile(self, configFile)
     |      ReadUserTriggerASICConfigFile(RegisterSettings self, std::string const & configFile) -> int
     |  
     |  UpdateFPGASettingMapFromRegisterMap(self)
     |      UpdateFPGASettingMapFromRegisterMap(RegisterSettings self) -> int
     |  
     |  __init__(self, *args)
     |      __init__(RegisterSettings self, std::string const & targetFPGADefinitionFile, std::string const & targetASICDefinitionFile) -> RegisterSettings
     |      __init__(RegisterSettings self, std::string const & targetFPGADefinitionFile, std::string const & targetASICDefinitionFile, std::string const & targetTriggerASICDefinitionFile) -> RegisterSettings
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_RegisterSettings(...)
     |      delete_RegisterSettings(RegisterSettings self)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  fDefintionFileASIC
     |      fDefintionFileASIC : q(const).std::string
     |  
     |  fDefintionFileFPGA
     |      fDefintionFileFPGA : q(const).std::string
     |  
     |  fDefintionFileTriggerASIC
     |      fDefintionFileTriggerASIC : q(const).std::string
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  fASICAuthor
     |      fASICAuthor : std::string
     |  
     |  fASICDescription
     |      fASICDescription : std::string
     |  
     |  fASICNumberOfRegisters
     |      fASICNumberOfRegisters : uint32_t
     |  
     |  fFPGAAuthor
     |      fFPGAAuthor : std::string
     |  
     |  fFPGADescription
     |      fFPGADescription : std::string
     |  
     |  fFPGAFirmwareVersion
     |      fFPGAFirmwareVersion : uint32_t
     |  
     |  fFPGANumberOfRegisters
     |      fFPGANumberOfRegisters : uint32_t
     |  
     |  fRegisterMapASIC
     |      fRegisterMapASIC : std::map<(uint8_t,CTA::TargetDriver::RegisterASIC)>
     |  
     |  fRegisterMapFPGA
     |      fRegisterMapFPGA : std::map<(uint32_t,CTA::TargetDriver::RegisterFPGA)>
     |  
     |  fRegisterMapTriggerASIC
     |      fRegisterMapTriggerASIC : std::map<(uint8_t,CTA::TargetDriver::RegisterASIC)>
     |  
     |  fSettingMapASIC
     |      fSettingMapASIC : std::map<(std::string,CTA::TargetDriver::SettingASIC)>
     |  
     |  fSettingMapFPGA
     |      fSettingMapFPGA : std::map<(std::string,CTA::TargetDriver::Setting)>
     |  
     |  fSettingMapTriggerASIC
     |      fSettingMapTriggerASIC : std::map<(std::string,CTA::TargetDriver::SettingASIC)>
     |  
     |  fTriggerASICAuthor
     |      fTriggerASICAuthor : std::string
     |  
     |  fTriggerASICDescription
     |      fTriggerASICDescription : std::string
     |  
     |  fTriggerASICNumberOfRegisters
     |      fTriggerASICNumberOfRegisters : uint32_t
     |  
     |  fType
     |      fType : std::string
     |  
     |  thisown
     |      The membership flag
    
    class Setting(builtins.object)
     |  Proxy of C++ CTA::TargetDriver::Setting class.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      __init__(Setting self) -> Setting
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_Setting(...)
     |      delete_Setting(Setting self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  access
     |      access : CTA::TargetDriver::Access
     |  
     |  description
     |      description : std::string
     |  
     |  lowerBound
     |      lowerBound : uint32_t
     |  
     |  multiplier
     |      multiplier : float
     |  
     |  nBits
     |      nBits : uint16_t
     |  
     |  offset
     |      offset : float
     |  
     |  regAddr
     |      regAddr : uint32_t
     |  
     |  startBit
     |      startBit : uint16_t
     |  
     |  thisown
     |      The membership flag
     |  
     |  upperBound
     |      upperBound : uint32_t
     |  
     |  value
     |      value : uint32_t
    
    class SettingASIC(builtins.object)
     |  Proxy of C++ CTA::TargetDriver::SettingASIC class.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      __init__(SettingASIC self) -> SettingASIC
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_SettingASIC(...)
     |      delete_SettingASIC(SettingASIC self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  settingASIC
     |      settingASIC : a(4).CTA::TargetDriver::Setting
     |  
     |  thisown
     |      The membership flag
    
    class SwigPyIterator(builtins.object)
     |  SwigPyIterator(*args, **kwargs)
     |  
     |  Proxy of C++ swig::SwigPyIterator class.
     |  
     |  Methods defined here:
     |  
     |  __add__(self, n)
     |      __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
     |  
     |  __eq__(self, x)
     |      __eq__(SwigPyIterator self, SwigPyIterator x) -> bool
     |  
     |  __iadd__(self, n)
     |      __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __isub__(self, n)
     |      __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
     |  
     |  __iter__(self)
     |  
     |  __ne__(self, x)
     |      __ne__(SwigPyIterator self, SwigPyIterator x) -> bool
     |  
     |  __next__(self)
     |      __next__(SwigPyIterator self) -> PyObject *
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __sub__(self, *args)
     |      __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
     |      __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
     |  
     |  advance(self, n)
     |      advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
     |  
     |  copy(self)
     |      copy(SwigPyIterator self) -> SwigPyIterator
     |  
     |  decr(self, n=1)
     |      decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
     |  
     |  distance(self, x)
     |      distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
     |  
     |  equal(self, x)
     |      equal(SwigPyIterator self, SwigPyIterator x) -> bool
     |  
     |  incr(self, n=1)
     |      incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
     |  
     |  next(self)
     |      next(SwigPyIterator self) -> PyObject *
     |  
     |  previous(self)
     |      previous(SwigPyIterator self) -> PyObject *
     |  
     |  value(self)
     |      value(SwigPyIterator self) -> PyObject *
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_SwigPyIterator(...)
     |      delete_SwigPyIterator(SwigPyIterator self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __hash__ = None
    
    class TargetModule(UDPClient)
     |  TargetModule(*args)
     |  
     |  Proxy of C++ CTA::TargetDriver::TargetModule class.
     |  
     |  Method resolution order:
     |      TargetModule
     |      UDPClient
     |      UDPBase
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  AddDAQListener(self, pClientIP)
     |      AddDAQListener(TargetModule self, std::string const & pClientIP) -> int
     |  
     |  CheckRegisters(self)
     |      CheckRegisters(TargetModule self) -> int
     |  
     |  Connect(self)
     |      Connect(TargetModule self) -> int
     |  
     |  DataPortPing(self, *args)
     |      DataPortPing(TargetModule self, std::string const & pClientIP, std::string const & pModuelIP)
     |      DataPortPing(TargetModule self)
     |  
     |  DeleteDAQListeners(self)
     |      DeleteDAQListeners(TargetModule self)
     |  
     |  DisableDLLFeedBack(self)
     |      DisableDLLFeedBack(TargetModule self) -> int
     |  
     |  DisableHVAll(self)
     |      DisableHVAll(TargetModule self) -> int
     |  
     |  DisableHVSuperPixel(self, superPixel)
     |      DisableHVSuperPixel(TargetModule self, uint8_t superPixel) -> int
     |  
     |  EnableDLLFeedback(self)
     |      EnableDLLFeedback(TargetModule self) -> int
     |  
     |  EnableHVAll(self)
     |      EnableHVAll(TargetModule self) -> int
     |  
     |  EnableHVSuperPixel(self, superPixel)
     |      EnableHVSuperPixel(TargetModule self, uint8_t superPixel) -> int
     |  
     |  EstablishSlowControlLink(self, pClientIP, pModuelIP)
     |      EstablishSlowControlLink(TargetModule self, std::string const & pClientIP, std::string const & pModuelIP) -> int
     |  
     |  Exists(self, ipaddress, myip)
     |      Exists(TargetModule self, std::string ipaddress, std::string myip) -> bool
     |  
     |  FillRegisterMapFromFPGA(self)
     |      FillRegisterMapFromFPGA(TargetModule self) -> int
     |  
     |  GetClockPhase(self)
     |      GetClockPhase(TargetModule self) -> int
     |  
     |  GetFirmwareVersion(self)
     |      GetFirmwareVersion(TargetModule self) -> int
     |  
     |  GetHVSuperPixel(self, superPixel)
     |      GetHVSuperPixel(TargetModule self, uint8_t superPixel) -> int
     |  
     |  GetPrimaryBoardID(self)
     |      GetPrimaryBoardID(TargetModule self) -> int
     |  
     |  GetState(self)
     |      GetState(TargetModule self) -> int
     |  
     |  GetStateString(self)
     |      GetStateString(TargetModule self) -> std::string
     |  
     |  GetTempI2CAux(self)
     |      GetTempI2CAux(TargetModule self) -> int
     |  
     |  GetTempI2CPower(self)
     |      GetTempI2CPower(TargetModule self) -> int
     |  
     |  GetTempI2CPrimary(self)
     |      GetTempI2CPrimary(TargetModule self) -> int
     |  
     |  GetTempSIPM(self)
     |      GetTempSIPM(TargetModule self) -> int
     |  
     |  GoToPreSync(self)
     |      GoToPreSync(TargetModule self) -> int
     |  
     |  GoToReady(self)
     |      GoToReady(TargetModule self) -> int
     |  
     |  GoToSafe(self)
     |      GoToSafe(TargetModule self) -> int
     |  
     |  Initialise(self)
     |      Initialise(TargetModule self) -> int
     |  
     |  IsContactable(self)
     |      IsContactable(TargetModule self) -> bool
     |  
     |  IsHVEnabled(self, superPixel)
     |      IsHVEnabled(TargetModule self, uint8_t superPixel) -> int
     |  
     |  IsPreSync(self)
     |      IsPreSync(TargetModule self) -> bool
     |  
     |  IsReady(self)
     |      IsReady(TargetModule self) -> bool
     |  
     |  IsSafe(self)
     |      IsSafe(TargetModule self) -> bool
     |  
     |  IsUndefined(self)
     |      IsUndefined(TargetModule self) -> bool
     |  
     |  IsUnresponsive(self)
     |      IsUnresponsive(TargetModule self) -> bool
     |  
     |  ModifyModuleIP(self, value)
     |      ModifyModuleIP(TargetModule self, uint8_t value) -> int
     |  
     |  ModifyModuleIdentifier(self, value)
     |      ModifyModuleIdentifier(TargetModule self, uint16_t value) -> int
     |  
     |  PowerUpASIC(self, asic=0, individialASIC=False)
     |      PowerUpASIC(TargetModule self, uint8_t asic=0, bool individialASIC=False) -> int
     |  
     |  PrintAllRegisterSettings(self)
     |      PrintAllRegisterSettings(TargetModule self)
     |  
     |  PrintAllRegisterValues(self)
     |      PrintAllRegisterValues(TargetModule self)
     |  
     |  QueryAndPrintAllRegisters(self, stream)
     |      QueryAndPrintAllRegisters(TargetModule self, std::ostream & stream)
     |  
     |  ReadHVCurrentInput(self)
     |      ReadHVCurrentInput(TargetModule self) -> int
     |  
     |  ReadHVDAC(self, superPixel)
     |      ReadHVDAC(TargetModule self, uint8_t superPixel) -> int
     |  
     |  ReadHVEnableBytes(self, byte0, byte1)
     |      ReadHVEnableBytes(TargetModule self, uint8_t & byte0, uint8_t & byte1) -> int
     |  
     |  ReadHVVoltageInput(self)
     |      ReadHVVoltageInput(TargetModule self) -> int
     |  
     |  ReadModuleIP(self)
     |      ReadModuleIP(TargetModule self) -> int
     |  
     |  ReadModuleIdentifier(self, val)
     |      ReadModuleIdentifier(TargetModule self, uint16_t & val) -> int
     |  
     |  ReadPowerBoardID(self)
     |      ReadPowerBoardID(TargetModule self) -> int
     |  
     |  ReadRegister(self, address)
     |      ReadRegister(TargetModule self, uint32_t address) -> int
     |  
     |  ReadSetting(self, name)
     |      ReadSetting(TargetModule self, std::string const & name) -> int
     |  
     |  ReadSettingCalibrated(self, name)
     |      ReadSettingCalibrated(TargetModule self, std::string const & name) -> int
     |  
     |  ReconnectToServer(self, pMyIP, pMySourcePort, pServerIP, pServerPort, pSocketBufferSize=-1)
     |      ReconnectToServer(TargetModule self, std::string const & pMyIP, uint16_t pMySourcePort, std::string const & pServerIP, uint16_t pServerPort, int32_t pSocketBufferSize=-1) -> int
     |  
     |  SetClientIP(self, pClientIP)
     |      SetClientIP(TargetModule self, std::string const & pClientIP)
     |  
     |  SetHVDAC(self, superPixel, val)
     |      SetHVDAC(TargetModule self, uint8_t superPixel, uint8_t val) -> int
     |  
     |  SetHVDACAll(self, dacVal)
     |      SetHVDACAll(TargetModule self, uint8_t dacVal) -> int
     |  
     |  SetIPAddresses(self, pClientIP, pModuleIP)
     |      SetIPAddresses(TargetModule self, std::string const & pClientIP, std::string const & pModuleIP)
     |  
     |  SetModuleIP(self, pModuleIP)
     |      SetModuleIP(TargetModule self, std::string const & pModuleIP)
     |  
     |  StopSampling(self)
     |      StopSampling(TargetModule self)
     |  
     |  SuperPixelIdToHVEneableBit(self, spId)
     |      SuperPixelIdToHVEneableBit(TargetModule self, uint8_t spId) -> int
     |  
     |  SuperPixelIdToI2CAddr(self, spId)
     |      SuperPixelIdToI2CAddr(TargetModule self, uint8_t spId) -> int
     |  
     |  SuperPixelIdToI2CRegAddr(self, spId)
     |      SuperPixelIdToI2CRegAddr(TargetModule self, uint8_t spId) -> int
     |  
     |  WhichHVEnabled(self, enabled)
     |      WhichHVEnabled(TargetModule self, std::vector< bool > & enabled) -> int
     |  
     |  WriteASICRegisterFromConfig(self, address, asic=0, individualASIC=False, isTriggerASIC=False)
     |      WriteASICRegisterFromConfig(TargetModule self, uint8_t address, uint8_t asic=0, bool individualASIC=False, bool isTriggerASIC=False) -> int
     |  
     |  WriteASICSetting(self, name, asic, val, individualASIC=False, isTriggerASIC=False)
     |      WriteASICSetting(TargetModule self, std::string const & name, uint8_t asic, uint16_t val, bool individualASIC=False, bool isTriggerASIC=False) -> int
     |  
     |  WriteASICSettingFromConfig(self, name, asic=0, individualASIC=False, isTriggerASIC=False)
     |      WriteASICSettingFromConfig(TargetModule self, std::string const & name, uint8_t asic=0, bool individualASIC=False, bool isTriggerASIC=False) -> int
     |  
     |  WriteRegister(self, address, data)
     |      WriteRegister(TargetModule self, uint32_t address, uint32_t data) -> int
     |  
     |  WriteRegisterAndCheck(self, address, data)
     |      WriteRegisterAndCheck(TargetModule self, uint32_t address, uint32_t data) -> int
     |  
     |  WriteRegisterFromConfig(self, address)
     |      WriteRegisterFromConfig(TargetModule self, uint32_t address) -> int
     |  
     |  WriteSetting(self, name, val)
     |      WriteSetting(TargetModule self, std::string const & name, uint32_t val) -> int
     |  
     |  WriteSettingASICCalibrated(self, name, asic, val, individualASIC=False, isTriggerASIC=False)
     |      WriteSettingASICCalibrated(TargetModule self, std::string const & name, uint8_t asic, float val, bool individualASIC=False, bool isTriggerASIC=False) -> int
     |  
     |  WriteSettingCalibrated(self, name, val)
     |      WriteSettingCalibrated(TargetModule self, std::string const & name, float val) -> int
     |  
     |  WriteSettingFromConfig(self, name)
     |      WriteSettingFromConfig(TargetModule self, std::string const & name) -> int
     |  
     |  WriteSettingTriggerASICCalibrated(self, name, asic, val, individualASIC=False)
     |      WriteSettingTriggerASICCalibrated(TargetModule self, std::string const & name, uint8_t asic, float val, bool individualASIC=False) -> int
     |  
     |  WriteTARGETRegister(self, *args)
     |      WriteTARGETRegister(TargetModule self, bool enableAsic0, bool enableAsic1, bool enableAsic2, bool enableAsic3, bool readback, bool latchIsRequired, uint8_t address, uint16_t value, bool isTriggerASIC=False) -> int
     |      WriteTARGETRegister(TargetModule self, bool readback, bool latchIsRequired, uint8_t address, uint16_t value, bool isTriggerASIC=False) -> int
     |  
     |  WriteTriggerASICRegisterFromConfig(self, address, asic=0, individualASIC=False)
     |      WriteTriggerASICRegisterFromConfig(TargetModule self, uint8_t address, uint8_t asic=0, bool individualASIC=False) -> int
     |  
     |  WriteTriggerASICSetting(self, name, asic, val, individualASIC=False)
     |      WriteTriggerASICSetting(TargetModule self, std::string const & name, uint8_t asic, uint16_t val, bool individualASIC=False) -> int
     |  
     |  WriteTriggerASICSettingFromConfig(self, name, asic=0, individualASIC=False)
     |      WriteTriggerASICSettingFromConfig(TargetModule self, std::string const & name, uint8_t asic=0, bool individualASIC=False) -> int
     |  
     |  __init__(self, *args)
     |      __init__(TargetModule self, uint16_t pModuleId=1) -> TargetModule
     |      __init__(TargetModule self, std::string const & pFPGADef, std::string const & pASICDef, uint16_t pModuleId=1) -> TargetModule
     |      __init__(TargetModule self, std::string const & pFPGADef, std::string const & pASICDef, std::string const & pTriggerASICDef, uint16_t pModuleId=1) -> TargetModule
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  CheckResponse(packet)
     |      CheckResponse(uint8_t const * packet) -> int
     |  
     |  PackControlPacket(packet, addr, data, iswrite)
     |      PackControlPacket(uint8_t * packet, uint32_t addr, uint32_t data, bool iswrite)
     |  
     |  UnpackControlPacket(packet, addr, iswrite)
     |      UnpackControlPacket(uint8_t const * packet, uint32_t & addr, bool & iswrite) -> int
     |  
     |  __swig_destroy__ = delete_TargetModule(...)
     |      delete_TargetModule(TargetModule self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  eHVEnable = 33
     |  
     |  eHVInput = 111
     |  
     |  eHVSetDAC0 = 32
     |  
     |  eHVSetDAC1 = 47
     |  
     |  eHVSetDAC2 = 44
     |  
     |  eHVSetDAC3 = 35
     |  
     |  eID = 80
     |  
     |  eTemperature = 72
     |  
     |  eUnkown = 0
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UDPClient:
     |  
     |  AddDataListener(self, pMyIP, pMyDataReceivePort, pSocketBufferSize=-1)
     |      AddDataListener(UDPClient self, std::string const & pMyIP, uint16_t pMyDataReceivePort, int32_t pSocketBufferSize=-1) -> int
     |  
     |  CloseDataListenerSockets(self)
     |      CloseDataListenerSockets(UDPClient self)
     |  
     |  CloseSockets(self)
     |      CloseSockets(UDPClient self)
     |  
     |  ConnectToServer(self, pMyIP, pMySourcePort, pServerIP, pServerPort, pSocketBufferSize=-1)
     |      ConnectToServer(UDPClient self, std::string const & pMyIP, uint16_t pMySourcePort, std::string const & pServerIP, uint16_t pServerPort, int32_t pSocketBufferSize=-1) -> int
     |  
     |  GetDataPacket(self, tobefilled, bytes, maxbytes)
     |      GetDataPacket(UDPClient self, void * tobefilled, uint32_t & bytes, size_t maxbytes) -> int
     |  
     |  SendAndReceive(self, message, length, maxlength)
     |      SendAndReceive(UDPClient self, void const * message, uint32_t length, uint32_t maxlength) -> int
     |  
     |  SetMaxAttempts(self, max_attempts)
     |      SetMaxAttempts(UDPClient self, uint8_t max_attempts)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UDPBase:
     |  
     |  CloseSocket(self)
     |      CloseSocket(UDPBase self)
     |  
     |  Receive(self, message, length, max_length)
     |      Receive(UDPBase self, void * message, ssize_t & length, uint32_t max_length) -> int
     |  
     |  ReturnCodeToString(self, code)
     |      ReturnCodeToString(UDPBase self, int code) -> std::string
     |  
     |  SetVerbose(self, verbose=True)
     |      SetVerbose(UDPBase self, bool verbose=True)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from UDPBase:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class TesterBoard(TargetModule)
     |  Proxy of C++ CTA::TargetDriver::TesterBoard class.
     |  
     |  Method resolution order:
     |      TesterBoard
     |      TargetModule
     |      UDPClient
     |      UDPBase
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  EnableExternalTrigger(self, enable)
     |      EnableExternalTrigger(TesterBoard self, bool enable)
     |  
     |  EnableReset(self, enable)
     |      EnableReset(TesterBoard self, bool enable)
     |  
     |  EnableSoftwareTrigger(self, enable)
     |      EnableSoftwareTrigger(TesterBoard self, bool enable)
     |  
     |  EnableTrigger(self, *args)
     |      EnableTrigger(TesterBoard self, uint8_t asic, bool b0, bool b1, bool b2, bool b3)
     |      EnableTrigger(TesterBoard self, uint8_t asic, uint8_t group, bool enable)
     |  
     |  EnableTriggerCounterContribution(self, asic, group, enable)
     |      EnableTriggerCounterContribution(TesterBoard self, uint8_t asic, uint8_t group, bool enable)
     |  
     |  GetFirmwareVersion(self)
     |      GetFirmwareVersion(TesterBoard self) -> uint32_t
     |  
     |  GetSerialNumber(self)
     |      GetSerialNumber(TesterBoard self) -> uint64_t
     |  
     |  GetStatus(self)
     |      GetStatus(TesterBoard self) -> uint32_t
     |  
     |  GetTACKMessage(self)
     |      GetTACKMessage(TesterBoard self) -> uint64_t
     |  
     |  GetTriggerCounter(self)
     |      GetTriggerCounter(TesterBoard self) -> uint32_t
     |  
     |  GetTriggerEfficiencyCounter(self)
     |      GetTriggerEfficiencyCounter(TesterBoard self) -> uint32_t
     |  
     |  GetTriggerEfficiencyCounterOutsideDeadTime(self)
     |      GetTriggerEfficiencyCounterOutsideDeadTime(TesterBoard self) -> uint32_t
     |  
     |  GetTriggerMode(self)
     |      GetTriggerMode(TesterBoard self) -> uint8_t
     |  
     |  Init(self, my_ip, tb_ip)
     |      Init(TesterBoard self, std::string const & my_ip, std::string const & tb_ip) -> int
     |  
     |  IsCameraModuleConnected(self)
     |      IsCameraModuleConnected(TesterBoard self) -> bool
     |  
     |  IsTriggerEfficiencyCounterOutsideDeadTimeCompleted(self)
     |      IsTriggerEfficiencyCounterOutsideDeadTimeCompleted(TesterBoard self) -> bool
     |  
     |  PrintStatus(self)
     |      PrintStatus(TesterBoard self)
     |  
     |  ResyncTrigger(self)
     |      ResyncTrigger(TesterBoard self)
     |  
     |  SendSoftwareTrigger(self)
     |      SendSoftwareTrigger(TesterBoard self) -> int
     |  
     |  SetClockOffset(self, offset)
     |      SetClockOffset(TesterBoard self, uint8_t offset) -> int
     |  
     |  SetStatusOfBPLines(self, bp6, bp4)
     |      SetStatusOfBPLines(TesterBoard self, bool bp6, bool bp4)
     |  
     |  SetTriggerDeadTime(self, deadtime)
     |      SetTriggerDeadTime(TesterBoard self, uint16_t deadtime) -> int
     |  
     |  SetTriggerMode(self, mode)
     |      SetTriggerMode(TesterBoard self, uint8_t mode) -> int
     |  
     |  SetTriggerModeAndType(self, mode, type)
     |      SetTriggerModeAndType(TesterBoard self, uint8_t mode, uint8_t type) -> int
     |  
     |  StartTimeBaseCounting(self, start)
     |      StartTimeBaseCounting(TesterBoard self, uint64_t start)
     |  
     |  StartTriggerEfficiencyCounter(self, duration)
     |      StartTriggerEfficiencyCounter(TesterBoard self, uint32_t duration)
     |  
     |  TurnOffAnalogInput(self)
     |      TurnOffAnalogInput(TesterBoard self)
     |  
     |  __init__(self)
     |      __init__(TesterBoard self) -> TesterBoard
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_TesterBoard(...)
     |      delete_TesterBoard(TesterBoard self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TargetModule:
     |  
     |  AddDAQListener(self, pClientIP)
     |      AddDAQListener(TargetModule self, std::string const & pClientIP) -> int
     |  
     |  CheckRegisters(self)
     |      CheckRegisters(TargetModule self) -> int
     |  
     |  Connect(self)
     |      Connect(TargetModule self) -> int
     |  
     |  DataPortPing(self, *args)
     |      DataPortPing(TargetModule self, std::string const & pClientIP, std::string const & pModuelIP)
     |      DataPortPing(TargetModule self)
     |  
     |  DeleteDAQListeners(self)
     |      DeleteDAQListeners(TargetModule self)
     |  
     |  DisableDLLFeedBack(self)
     |      DisableDLLFeedBack(TargetModule self) -> int
     |  
     |  DisableHVAll(self)
     |      DisableHVAll(TargetModule self) -> int
     |  
     |  DisableHVSuperPixel(self, superPixel)
     |      DisableHVSuperPixel(TargetModule self, uint8_t superPixel) -> int
     |  
     |  EnableDLLFeedback(self)
     |      EnableDLLFeedback(TargetModule self) -> int
     |  
     |  EnableHVAll(self)
     |      EnableHVAll(TargetModule self) -> int
     |  
     |  EnableHVSuperPixel(self, superPixel)
     |      EnableHVSuperPixel(TargetModule self, uint8_t superPixel) -> int
     |  
     |  EstablishSlowControlLink(self, pClientIP, pModuelIP)
     |      EstablishSlowControlLink(TargetModule self, std::string const & pClientIP, std::string const & pModuelIP) -> int
     |  
     |  Exists(self, ipaddress, myip)
     |      Exists(TargetModule self, std::string ipaddress, std::string myip) -> bool
     |  
     |  FillRegisterMapFromFPGA(self)
     |      FillRegisterMapFromFPGA(TargetModule self) -> int
     |  
     |  GetClockPhase(self)
     |      GetClockPhase(TargetModule self) -> int
     |  
     |  GetHVSuperPixel(self, superPixel)
     |      GetHVSuperPixel(TargetModule self, uint8_t superPixel) -> int
     |  
     |  GetPrimaryBoardID(self)
     |      GetPrimaryBoardID(TargetModule self) -> int
     |  
     |  GetState(self)
     |      GetState(TargetModule self) -> int
     |  
     |  GetStateString(self)
     |      GetStateString(TargetModule self) -> std::string
     |  
     |  GetTempI2CAux(self)
     |      GetTempI2CAux(TargetModule self) -> int
     |  
     |  GetTempI2CPower(self)
     |      GetTempI2CPower(TargetModule self) -> int
     |  
     |  GetTempI2CPrimary(self)
     |      GetTempI2CPrimary(TargetModule self) -> int
     |  
     |  GetTempSIPM(self)
     |      GetTempSIPM(TargetModule self) -> int
     |  
     |  GoToPreSync(self)
     |      GoToPreSync(TargetModule self) -> int
     |  
     |  GoToReady(self)
     |      GoToReady(TargetModule self) -> int
     |  
     |  GoToSafe(self)
     |      GoToSafe(TargetModule self) -> int
     |  
     |  Initialise(self)
     |      Initialise(TargetModule self) -> int
     |  
     |  IsContactable(self)
     |      IsContactable(TargetModule self) -> bool
     |  
     |  IsHVEnabled(self, superPixel)
     |      IsHVEnabled(TargetModule self, uint8_t superPixel) -> int
     |  
     |  IsPreSync(self)
     |      IsPreSync(TargetModule self) -> bool
     |  
     |  IsReady(self)
     |      IsReady(TargetModule self) -> bool
     |  
     |  IsSafe(self)
     |      IsSafe(TargetModule self) -> bool
     |  
     |  IsUndefined(self)
     |      IsUndefined(TargetModule self) -> bool
     |  
     |  IsUnresponsive(self)
     |      IsUnresponsive(TargetModule self) -> bool
     |  
     |  ModifyModuleIP(self, value)
     |      ModifyModuleIP(TargetModule self, uint8_t value) -> int
     |  
     |  ModifyModuleIdentifier(self, value)
     |      ModifyModuleIdentifier(TargetModule self, uint16_t value) -> int
     |  
     |  PowerUpASIC(self, asic=0, individialASIC=False)
     |      PowerUpASIC(TargetModule self, uint8_t asic=0, bool individialASIC=False) -> int
     |  
     |  PrintAllRegisterSettings(self)
     |      PrintAllRegisterSettings(TargetModule self)
     |  
     |  PrintAllRegisterValues(self)
     |      PrintAllRegisterValues(TargetModule self)
     |  
     |  QueryAndPrintAllRegisters(self, stream)
     |      QueryAndPrintAllRegisters(TargetModule self, std::ostream & stream)
     |  
     |  ReadHVCurrentInput(self)
     |      ReadHVCurrentInput(TargetModule self) -> int
     |  
     |  ReadHVDAC(self, superPixel)
     |      ReadHVDAC(TargetModule self, uint8_t superPixel) -> int
     |  
     |  ReadHVEnableBytes(self, byte0, byte1)
     |      ReadHVEnableBytes(TargetModule self, uint8_t & byte0, uint8_t & byte1) -> int
     |  
     |  ReadHVVoltageInput(self)
     |      ReadHVVoltageInput(TargetModule self) -> int
     |  
     |  ReadModuleIP(self)
     |      ReadModuleIP(TargetModule self) -> int
     |  
     |  ReadModuleIdentifier(self, val)
     |      ReadModuleIdentifier(TargetModule self, uint16_t & val) -> int
     |  
     |  ReadPowerBoardID(self)
     |      ReadPowerBoardID(TargetModule self) -> int
     |  
     |  ReadRegister(self, address)
     |      ReadRegister(TargetModule self, uint32_t address) -> int
     |  
     |  ReadSetting(self, name)
     |      ReadSetting(TargetModule self, std::string const & name) -> int
     |  
     |  ReadSettingCalibrated(self, name)
     |      ReadSettingCalibrated(TargetModule self, std::string const & name) -> int
     |  
     |  ReconnectToServer(self, pMyIP, pMySourcePort, pServerIP, pServerPort, pSocketBufferSize=-1)
     |      ReconnectToServer(TargetModule self, std::string const & pMyIP, uint16_t pMySourcePort, std::string const & pServerIP, uint16_t pServerPort, int32_t pSocketBufferSize=-1) -> int
     |  
     |  SetClientIP(self, pClientIP)
     |      SetClientIP(TargetModule self, std::string const & pClientIP)
     |  
     |  SetHVDAC(self, superPixel, val)
     |      SetHVDAC(TargetModule self, uint8_t superPixel, uint8_t val) -> int
     |  
     |  SetHVDACAll(self, dacVal)
     |      SetHVDACAll(TargetModule self, uint8_t dacVal) -> int
     |  
     |  SetIPAddresses(self, pClientIP, pModuleIP)
     |      SetIPAddresses(TargetModule self, std::string const & pClientIP, std::string const & pModuleIP)
     |  
     |  SetModuleIP(self, pModuleIP)
     |      SetModuleIP(TargetModule self, std::string const & pModuleIP)
     |  
     |  StopSampling(self)
     |      StopSampling(TargetModule self)
     |  
     |  SuperPixelIdToHVEneableBit(self, spId)
     |      SuperPixelIdToHVEneableBit(TargetModule self, uint8_t spId) -> int
     |  
     |  SuperPixelIdToI2CAddr(self, spId)
     |      SuperPixelIdToI2CAddr(TargetModule self, uint8_t spId) -> int
     |  
     |  SuperPixelIdToI2CRegAddr(self, spId)
     |      SuperPixelIdToI2CRegAddr(TargetModule self, uint8_t spId) -> int
     |  
     |  WhichHVEnabled(self, enabled)
     |      WhichHVEnabled(TargetModule self, std::vector< bool > & enabled) -> int
     |  
     |  WriteASICRegisterFromConfig(self, address, asic=0, individualASIC=False, isTriggerASIC=False)
     |      WriteASICRegisterFromConfig(TargetModule self, uint8_t address, uint8_t asic=0, bool individualASIC=False, bool isTriggerASIC=False) -> int
     |  
     |  WriteASICSetting(self, name, asic, val, individualASIC=False, isTriggerASIC=False)
     |      WriteASICSetting(TargetModule self, std::string const & name, uint8_t asic, uint16_t val, bool individualASIC=False, bool isTriggerASIC=False) -> int
     |  
     |  WriteASICSettingFromConfig(self, name, asic=0, individualASIC=False, isTriggerASIC=False)
     |      WriteASICSettingFromConfig(TargetModule self, std::string const & name, uint8_t asic=0, bool individualASIC=False, bool isTriggerASIC=False) -> int
     |  
     |  WriteRegister(self, address, data)
     |      WriteRegister(TargetModule self, uint32_t address, uint32_t data) -> int
     |  
     |  WriteRegisterAndCheck(self, address, data)
     |      WriteRegisterAndCheck(TargetModule self, uint32_t address, uint32_t data) -> int
     |  
     |  WriteRegisterFromConfig(self, address)
     |      WriteRegisterFromConfig(TargetModule self, uint32_t address) -> int
     |  
     |  WriteSetting(self, name, val)
     |      WriteSetting(TargetModule self, std::string const & name, uint32_t val) -> int
     |  
     |  WriteSettingASICCalibrated(self, name, asic, val, individualASIC=False, isTriggerASIC=False)
     |      WriteSettingASICCalibrated(TargetModule self, std::string const & name, uint8_t asic, float val, bool individualASIC=False, bool isTriggerASIC=False) -> int
     |  
     |  WriteSettingCalibrated(self, name, val)
     |      WriteSettingCalibrated(TargetModule self, std::string const & name, float val) -> int
     |  
     |  WriteSettingFromConfig(self, name)
     |      WriteSettingFromConfig(TargetModule self, std::string const & name) -> int
     |  
     |  WriteSettingTriggerASICCalibrated(self, name, asic, val, individualASIC=False)
     |      WriteSettingTriggerASICCalibrated(TargetModule self, std::string const & name, uint8_t asic, float val, bool individualASIC=False) -> int
     |  
     |  WriteTARGETRegister(self, *args)
     |      WriteTARGETRegister(TargetModule self, bool enableAsic0, bool enableAsic1, bool enableAsic2, bool enableAsic3, bool readback, bool latchIsRequired, uint8_t address, uint16_t value, bool isTriggerASIC=False) -> int
     |      WriteTARGETRegister(TargetModule self, bool readback, bool latchIsRequired, uint8_t address, uint16_t value, bool isTriggerASIC=False) -> int
     |  
     |  WriteTriggerASICRegisterFromConfig(self, address, asic=0, individualASIC=False)
     |      WriteTriggerASICRegisterFromConfig(TargetModule self, uint8_t address, uint8_t asic=0, bool individualASIC=False) -> int
     |  
     |  WriteTriggerASICSetting(self, name, asic, val, individualASIC=False)
     |      WriteTriggerASICSetting(TargetModule self, std::string const & name, uint8_t asic, uint16_t val, bool individualASIC=False) -> int
     |  
     |  WriteTriggerASICSettingFromConfig(self, name, asic=0, individualASIC=False)
     |      WriteTriggerASICSettingFromConfig(TargetModule self, std::string const & name, uint8_t asic=0, bool individualASIC=False) -> int
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from TargetModule:
     |  
     |  CheckResponse(packet)
     |      CheckResponse(uint8_t const * packet) -> int
     |  
     |  PackControlPacket(packet, addr, data, iswrite)
     |      PackControlPacket(uint8_t * packet, uint32_t addr, uint32_t data, bool iswrite)
     |  
     |  UnpackControlPacket(packet, addr, iswrite)
     |      UnpackControlPacket(uint8_t const * packet, uint32_t & addr, bool & iswrite) -> int
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from TargetModule:
     |  
     |  eHVEnable = 33
     |  
     |  eHVInput = 111
     |  
     |  eHVSetDAC0 = 32
     |  
     |  eHVSetDAC1 = 47
     |  
     |  eHVSetDAC2 = 44
     |  
     |  eHVSetDAC3 = 35
     |  
     |  eID = 80
     |  
     |  eTemperature = 72
     |  
     |  eUnkown = 0
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UDPClient:
     |  
     |  AddDataListener(self, pMyIP, pMyDataReceivePort, pSocketBufferSize=-1)
     |      AddDataListener(UDPClient self, std::string const & pMyIP, uint16_t pMyDataReceivePort, int32_t pSocketBufferSize=-1) -> int
     |  
     |  CloseDataListenerSockets(self)
     |      CloseDataListenerSockets(UDPClient self)
     |  
     |  CloseSockets(self)
     |      CloseSockets(UDPClient self)
     |  
     |  ConnectToServer(self, pMyIP, pMySourcePort, pServerIP, pServerPort, pSocketBufferSize=-1)
     |      ConnectToServer(UDPClient self, std::string const & pMyIP, uint16_t pMySourcePort, std::string const & pServerIP, uint16_t pServerPort, int32_t pSocketBufferSize=-1) -> int
     |  
     |  GetDataPacket(self, tobefilled, bytes, maxbytes)
     |      GetDataPacket(UDPClient self, void * tobefilled, uint32_t & bytes, size_t maxbytes) -> int
     |  
     |  SendAndReceive(self, message, length, maxlength)
     |      SendAndReceive(UDPClient self, void const * message, uint32_t length, uint32_t maxlength) -> int
     |  
     |  SetMaxAttempts(self, max_attempts)
     |      SetMaxAttempts(UDPClient self, uint8_t max_attempts)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UDPBase:
     |  
     |  CloseSocket(self)
     |      CloseSocket(UDPBase self)
     |  
     |  Receive(self, message, length, max_length)
     |      Receive(UDPBase self, void * message, ssize_t & length, uint32_t max_length) -> int
     |  
     |  ReturnCodeToString(self, code)
     |      ReturnCodeToString(UDPBase self, int code) -> std::string
     |  
     |  SetVerbose(self, verbose=True)
     |      SetVerbose(UDPBase self, bool verbose=True)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from UDPBase:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class UDPBase(builtins.object)
     |  Proxy of C++ CTA::TargetDriver::UDPBase class.
     |  
     |  Methods defined here:
     |  
     |  CloseSocket(self)
     |      CloseSocket(UDPBase self)
     |  
     |  Receive(self, message, length, max_length)
     |      Receive(UDPBase self, void * message, ssize_t & length, uint32_t max_length) -> int
     |  
     |  ReturnCodeToString(self, code)
     |      ReturnCodeToString(UDPBase self, int code) -> std::string
     |  
     |  SetVerbose(self, verbose=True)
     |      SetVerbose(UDPBase self, bool verbose=True)
     |  
     |  __init__(self)
     |      __init__(UDPBase self) -> UDPBase
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_UDPBase(...)
     |      delete_UDPBase(UDPBase self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class UDPClient(UDPBase)
     |  UDPClient(maxattempts=5, sctimeout_ms=200, datatimeout_ms=20)
     |  
     |  Proxy of C++ CTA::TargetDriver::UDPClient class.
     |  
     |  Method resolution order:
     |      UDPClient
     |      UDPBase
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  AddDataListener(self, pMyIP, pMyDataReceivePort, pSocketBufferSize=-1)
     |      AddDataListener(UDPClient self, std::string const & pMyIP, uint16_t pMyDataReceivePort, int32_t pSocketBufferSize=-1) -> int
     |  
     |  CloseDataListenerSockets(self)
     |      CloseDataListenerSockets(UDPClient self)
     |  
     |  CloseSockets(self)
     |      CloseSockets(UDPClient self)
     |  
     |  ConnectToServer(self, pMyIP, pMySourcePort, pServerIP, pServerPort, pSocketBufferSize=-1)
     |      ConnectToServer(UDPClient self, std::string const & pMyIP, uint16_t pMySourcePort, std::string const & pServerIP, uint16_t pServerPort, int32_t pSocketBufferSize=-1) -> int
     |  
     |  GetDataPacket(self, tobefilled, bytes, maxbytes)
     |      GetDataPacket(UDPClient self, void * tobefilled, uint32_t & bytes, size_t maxbytes) -> int
     |  
     |  SendAndReceive(self, message, length, maxlength)
     |      SendAndReceive(UDPClient self, void const * message, uint32_t length, uint32_t maxlength) -> int
     |  
     |  SetMaxAttempts(self, max_attempts)
     |      SetMaxAttempts(UDPClient self, uint8_t max_attempts)
     |  
     |  __init__(self, maxattempts=5, sctimeout_ms=200, datatimeout_ms=20)
     |      __init__(UDPClient self, uint8_t maxattempts=5, uint32_t sctimeout_ms=200, uint32_t datatimeout_ms=20) -> UDPClient
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_UDPClient(...)
     |      delete_UDPClient(UDPClient self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UDPBase:
     |  
     |  CloseSocket(self)
     |      CloseSocket(UDPBase self)
     |  
     |  Receive(self, message, length, max_length)
     |      Receive(UDPBase self, void * message, ssize_t & length, uint32_t max_length) -> int
     |  
     |  ReturnCodeToString(self, code)
     |      ReturnCodeToString(UDPBase self, int code) -> std::string
     |  
     |  SetVerbose(self, verbose=True)
     |      SetVerbose(UDPBase self, bool verbose=True)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from UDPBase:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class UDPServer(UDPBase)
     |  UDPServer(pMyIP, pSlowControlListeningPort, pDataDestPort, receive_timout_ms=100)
     |  
     |  Proxy of C++ CTA::TargetDriver::UDPServer class.
     |  
     |  Method resolution order:
     |      UDPServer
     |      UDPBase
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  SendDataPacket(self, data, length)
     |      SendDataPacket(UDPServer self, void const * data, uint32_t length) -> int
     |  
     |  SendResponse(self, data, length)
     |      SendResponse(UDPServer self, void const * data, uint32_t length) -> int
     |  
     |  Setup(self, pMyIP, pSlowControlListeningPort, pDataDestPort, receive_timout_ms)
     |      Setup(UDPServer self, std::string const & pMyIP, uint16_t pSlowControlListeningPort, uint16_t pDataDestPort, uint32_t receive_timout_ms) -> int
     |  
     |  __init__(self, pMyIP, pSlowControlListeningPort, pDataDestPort, receive_timout_ms=100)
     |      __init__(UDPServer self, std::string const & pMyIP, uint16_t pSlowControlListeningPort, uint16_t pDataDestPort, uint32_t receive_timout_ms=100) -> UDPServer
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_UDPServer(...)
     |      delete_UDPServer(UDPServer self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UDPBase:
     |  
     |  CloseSocket(self)
     |      CloseSocket(UDPBase self)
     |  
     |  Receive(self, message, length, max_length)
     |      Receive(UDPBase self, void * message, ssize_t & length, uint32_t max_length) -> int
     |  
     |  ReturnCodeToString(self, code)
     |      ReturnCodeToString(UDPBase self, int code) -> std::string
     |  
     |  SetVerbose(self, verbose=True)
     |      SetVerbose(UDPBase self, bool verbose=True)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from UDPBase:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Waveform(builtins.object)
     |  Waveform(data=None)
     |  
     |  Proxy of C++ CTA::TargetDriver::Waveform class.
     |  
     |  Methods defined here:
     |  
     |  AssociateData(self, data)
     |      AssociateData(Waveform self, uint8_t * data)
     |  
     |  GetADC(self, n)
     |      GetADC(Waveform self, uint16_t n) -> uint16_t
     |  
     |  GetADC16bit(self, n)
     |      GetADC16bit(Waveform self, uint16_t n) -> uint16_t
     |  
     |  GetADC16bitArray(self, adcarray)
     |      GetADC16bitArray(Waveform self, uint16_t * adcarray)
     |  
     |  GetADCArray(self, adcarray)
     |      GetADCArray(Waveform self, uint16_t * adcarray)
     |  
     |  GetASIC(self)
     |      GetASIC(Waveform self) -> uint8_t
     |  
     |  GetChannel(self)
     |      GetChannel(Waveform self) -> uint8_t
     |  
     |  GetMeanAndRMS(self, mean, rms, maxsamples=0)
     |      GetMeanAndRMS(Waveform self, float & mean, float & rms, uint16_t maxsamples=0)
     |  
     |  GetMeanAndStdDev(self, mean, stddev, maxsamples=0)
     |      GetMeanAndStdDev(Waveform self, float & mean, float & stddev, uint16_t maxsamples=0)
     |  
     |  GetPixelID(self)
     |      GetPixelID(Waveform self) -> uint16_t
     |  
     |  GetSamples(self)
     |      GetSamples(Waveform self) -> uint16_t
     |  
     |  IsErrorFlagOn(self)
     |      IsErrorFlagOn(Waveform self) -> bool
     |  
     |  PackWaveform(self, asic, chan, samples, errflag, data=None)
     |      PackWaveform(Waveform self, uint8_t asic, uint8_t chan, uint16_t samples, bool errflag, uint16_t * data=None)
     |  
     |  SetADC(self, n, val)
     |      SetADC(Waveform self, uint16_t n, uint16_t val)
     |  
     |  SetADC16bit(self, n, val)
     |      SetADC16bit(Waveform self, uint16_t n, uint16_t val)
     |  
     |  SetHeader(self, asic, chan, samples, errflag)
     |      SetHeader(Waveform self, uint8_t asic, uint8_t chan, uint16_t samples, bool errflag)
     |  
     |  __init__(self, data=None)
     |      __init__(Waveform self, uint8_t * data=None) -> Waveform
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  brycesGetADC16bitArray(self, adcarray)
     |      brycesGetADC16bitArray(Waveform self, uint16_t * adcarray)
     |  
     |  brycesGetADCArray(self, adcarray)
     |      brycesGetADCArray(Waveform self, uint16_t * adcarray)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_Waveform(...)
     |      delete_Waveform(Waveform self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag

FUNCTIONS
    DataPacket_CalculateFirstCellId(pRow, pColumn, pBlockPhase)
        DataPacket_CalculateFirstCellId(uint16_t pRow, uint16_t pColumn, uint16_t pBlockPhase) -> uint16_t
    
    DataPacket_CalculatePacketSizeInBytes(pWaveformsPerPacket, pSamplesPerWaveform)
        DataPacket_CalculatePacketSizeInBytes(uint16_t pWaveformsPerPacket, uint16_t pSamplesPerWaveform) -> uint16_t
    
    DataPacket_CalculateRowColumnBlockPhase(pCellId, pRow, pColumn, pBlockPhase)
        DataPacket_CalculateRowColumnBlockPhase(uint16_t pCellId, uint16_t & pRow, uint16_t & pColumn, uint16_t & pBlockPhase)
    
    DataPacket_GetNCells()
        DataPacket_GetNCells() -> uint16_t
    
    RawEvent_SetTimeoutSec(pTimeoutSec)
        RawEvent_SetTimeoutSec(double pTimeoutSec)
    
    TargetModule_CheckResponse(packet)
        TargetModule_CheckResponse(uint8_t const * packet) -> int
    
    TargetModule_PackControlPacket(packet, addr, data, iswrite)
        TargetModule_PackControlPacket(uint8_t * packet, uint32_t addr, uint32_t data, bool iswrite)
    
    TargetModule_UnpackControlPacket(packet, addr, iswrite)
        TargetModule_UnpackControlPacket(uint8_t const * packet, uint32_t & addr, bool & iswrite) -> int
    
    get_default_config_dir()
        get_default_config_dir() -> std::string
    
    send_waveform_packet(p, sim, waves, samples)
        send_waveform_packet(DataPacket p, ModuleSimulator sim, uint16_t waves, uint16_t samples) -> int

DATA
    TC_ERR_BAD_PACKET = 2
    TC_ERR_COMM_FAILURE = -1
    TC_ERR_CONF_FAILURE = -2
    TC_ERR_NO_RESPONSE = 1
    TC_ERR_USER_ERROR = -3
    TC_OK = 0
    TC_TIME_OUT = 4
    TC_UNEXPECTED_RESPONSE = 3
    TESTER_BOARD_PORT = 8104
    TESTER_COMMAND_PORT = 8103
    TM_ASICS = 4
    TM_BUFFER_SIZE = 4095
    TM_CONTROLPACKET_SIZE = 16
    TM_DAQ_PORT = 8107
    TM_DAQ_TIME_OUT = 100
    TM_DATASEND_PORT = 8106
    TM_DEST_PORT = 8105
    TM_MAX_ATTEMPTS = 4
    TM_PIXELS_PER_ASIC = 16
    TM_PIXELS_PER_MODULE = 64
    TM_RESPONSE_TIME_OUT = 20
    TM_SOCK_BUF_SIZE_DAQ = 999424
    TM_SOCK_BUF_SIZE_SC = 10000
    TM_SOURCE_PORT = 8200
    TM_SPECIAL_PORT = 8300
    TM_STATE_NOTPOWERED = -2
    TM_STATE_NOTPRESENT = -3
    TM_STATE_PRESYNC = 2
    TM_STATE_READY = 3
    TM_STATE_SAFE = 1
    TM_STATE_UNDEFINED = 0
    TM_STATE_UNRESPONSIVE = -1
    TM_TRIGGERPIXELS_PER_ASIC = 4
    TM_TRIGGERPIXELS_PER_MODULE = 16
    T_PACKET_ERROR_BADCRC = 3
    T_PACKET_ERROR_BADLENGTH = 2
    T_PACKET_ERROR_LASTBYTES = 4
    T_PACKET_ERROR_NODATA = 1
    T_PACKET_ERROR_NOWAVEFORMS = 5
    T_PACKET_FOOTER_WORDS = 2
    T_PACKET_HEADER_WORDS = 8
    T_PACKET_OK = 0
    T_SAMPLES_PER_WAVEFORM_BLOCK = 32
    T_WAVEFORM_HEADER_WORDS = 1
    cvar = <Swig global variables>
    eR = 1
    eRW = 0
    eRW_NS = 3
    eW = 2

FILE
    /usr/lib/python3.9/site-packages/target_driver.py


Target Driver Functions None
