# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _target_driver
else:
    import _target_driver

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _target_driver.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _target_driver.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _target_driver.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _target_driver.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _target_driver.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _target_driver.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _target_driver.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _target_driver.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _target_driver.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _target_driver.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _target_driver.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _target_driver.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _target_driver.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _target_driver.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _target_driver.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _target_driver.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _target_driver.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _target_driver:
_target_driver.SwigPyIterator_swigregister(SwigPyIterator)

TC_TIME_OUT = _target_driver.TC_TIME_OUT

TC_UNEXPECTED_RESPONSE = _target_driver.TC_UNEXPECTED_RESPONSE

TC_ERR_BAD_PACKET = _target_driver.TC_ERR_BAD_PACKET

TC_ERR_NO_RESPONSE = _target_driver.TC_ERR_NO_RESPONSE

TC_OK = _target_driver.TC_OK

TC_ERR_COMM_FAILURE = _target_driver.TC_ERR_COMM_FAILURE

TC_ERR_CONF_FAILURE = _target_driver.TC_ERR_CONF_FAILURE

TC_ERR_USER_ERROR = _target_driver.TC_ERR_USER_ERROR

class UDPBase(object):
    r"""Proxy of C++ CTA::TargetDriver::UDPBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UDPBase self) -> UDPBase"""
        _target_driver.UDPBase_swiginit(self, _target_driver.new_UDPBase())
    __swig_destroy__ = _target_driver.delete_UDPBase

    def Receive(self, message, length, max_length):
        r"""Receive(UDPBase self, void * message, ssize_t & length, uint32_t max_length) -> int"""
        return _target_driver.UDPBase_Receive(self, message, length, max_length)

    def CloseSocket(self):
        r"""CloseSocket(UDPBase self)"""
        return _target_driver.UDPBase_CloseSocket(self)

    def ReturnCodeToString(self, code):
        r"""ReturnCodeToString(UDPBase self, int code) -> std::string"""
        return _target_driver.UDPBase_ReturnCodeToString(self, code)

    def SetVerbose(self, verbose=True):
        r"""SetVerbose(UDPBase self, bool verbose=True)"""
        return _target_driver.UDPBase_SetVerbose(self, verbose)

# Register UDPBase in _target_driver:
_target_driver.UDPBase_swigregister(UDPBase)

class UDPClient(UDPBase):
    r"""Proxy of C++ CTA::TargetDriver::UDPClient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, maxattempts=5, sctimeout_ms=200, datatimeout_ms=20):
        r"""__init__(UDPClient self, uint8_t maxattempts=5, uint32_t sctimeout_ms=200, uint32_t datatimeout_ms=20) -> UDPClient"""
        _target_driver.UDPClient_swiginit(self, _target_driver.new_UDPClient(maxattempts, sctimeout_ms, datatimeout_ms))
    __swig_destroy__ = _target_driver.delete_UDPClient

    def ConnectToServer(self, pMyIP, pMySourcePort, pServerIP, pServerPort, pSocketBufferSize=-1):
        r"""ConnectToServer(UDPClient self, std::string const & pMyIP, uint16_t pMySourcePort, std::string const & pServerIP, uint16_t pServerPort, int32_t pSocketBufferSize=-1) -> int"""
        return _target_driver.UDPClient_ConnectToServer(self, pMyIP, pMySourcePort, pServerIP, pServerPort, pSocketBufferSize)

    def AddDataListener(self, pMyIP, pMyDataReceivePort, pSocketBufferSize=-1):
        r"""AddDataListener(UDPClient self, std::string const & pMyIP, uint16_t pMyDataReceivePort, int32_t pSocketBufferSize=-1) -> int"""
        return _target_driver.UDPClient_AddDataListener(self, pMyIP, pMyDataReceivePort, pSocketBufferSize)

    def CloseSockets(self):
        r"""CloseSockets(UDPClient self)"""
        return _target_driver.UDPClient_CloseSockets(self)

    def CloseDataListenerSockets(self):
        r"""CloseDataListenerSockets(UDPClient self)"""
        return _target_driver.UDPClient_CloseDataListenerSockets(self)

    def GetDataPacket(self, tobefilled, bytes, maxbytes):
        r"""GetDataPacket(UDPClient self, void * tobefilled, uint32_t & bytes, size_t maxbytes) -> int"""
        return _target_driver.UDPClient_GetDataPacket(self, tobefilled, bytes, maxbytes)

    def SendAndReceive(self, message, length, maxlength):
        r"""SendAndReceive(UDPClient self, void const * message, uint32_t length, uint32_t maxlength) -> int"""
        return _target_driver.UDPClient_SendAndReceive(self, message, length, maxlength)

    def SetMaxAttempts(self, max_attempts):
        r"""SetMaxAttempts(UDPClient self, uint8_t max_attempts)"""
        return _target_driver.UDPClient_SetMaxAttempts(self, max_attempts)

# Register UDPClient in _target_driver:
_target_driver.UDPClient_swigregister(UDPClient)

class UDPServer(UDPBase):
    r"""Proxy of C++ CTA::TargetDriver::UDPServer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pMyIP, pSlowControlListeningPort, pDataDestPort, receive_timout_ms=100):
        r"""__init__(UDPServer self, std::string const & pMyIP, uint16_t pSlowControlListeningPort, uint16_t pDataDestPort, uint32_t receive_timout_ms=100) -> UDPServer"""
        _target_driver.UDPServer_swiginit(self, _target_driver.new_UDPServer(pMyIP, pSlowControlListeningPort, pDataDestPort, receive_timout_ms))
    __swig_destroy__ = _target_driver.delete_UDPServer

    def SendResponse(self, data, length):
        r"""SendResponse(UDPServer self, void const * data, uint32_t length) -> int"""
        return _target_driver.UDPServer_SendResponse(self, data, length)

    def SendDataPacket(self, data, length):
        r"""SendDataPacket(UDPServer self, void const * data, uint32_t length) -> int"""
        return _target_driver.UDPServer_SendDataPacket(self, data, length)

    def Setup(self, pMyIP, pSlowControlListeningPort, pDataDestPort, receive_timout_ms):
        r"""Setup(UDPServer self, std::string const & pMyIP, uint16_t pSlowControlListeningPort, uint16_t pDataDestPort, uint32_t receive_timout_ms) -> int"""
        return _target_driver.UDPServer_Setup(self, pMyIP, pSlowControlListeningPort, pDataDestPort, receive_timout_ms)

# Register UDPServer in _target_driver:
_target_driver.UDPServer_swigregister(UDPServer)

TM_SOURCE_PORT = _target_driver.TM_SOURCE_PORT

TM_DAQ_PORT = _target_driver.TM_DAQ_PORT

TM_SPECIAL_PORT = _target_driver.TM_SPECIAL_PORT

TM_DEST_PORT = _target_driver.TM_DEST_PORT

TM_DATASEND_PORT = _target_driver.TM_DATASEND_PORT

TM_SOCK_BUF_SIZE_SC = _target_driver.TM_SOCK_BUF_SIZE_SC

TM_SOCK_BUF_SIZE_DAQ = _target_driver.TM_SOCK_BUF_SIZE_DAQ

TM_MAX_ATTEMPTS = _target_driver.TM_MAX_ATTEMPTS

TM_RESPONSE_TIME_OUT = _target_driver.TM_RESPONSE_TIME_OUT

TM_DAQ_TIME_OUT = _target_driver.TM_DAQ_TIME_OUT

TM_CONTROLPACKET_SIZE = _target_driver.TM_CONTROLPACKET_SIZE

TM_BUFFER_SIZE = _target_driver.TM_BUFFER_SIZE

TM_ASICS = _target_driver.TM_ASICS

TM_TRIGGERPIXELS_PER_ASIC = _target_driver.TM_TRIGGERPIXELS_PER_ASIC

TM_PIXELS_PER_ASIC = _target_driver.TM_PIXELS_PER_ASIC

TM_TRIGGERPIXELS_PER_MODULE = _target_driver.TM_TRIGGERPIXELS_PER_MODULE

TM_PIXELS_PER_MODULE = _target_driver.TM_PIXELS_PER_MODULE

TM_STATE_NOTPRESENT = _target_driver.TM_STATE_NOTPRESENT

TM_STATE_NOTPOWERED = _target_driver.TM_STATE_NOTPOWERED

TM_STATE_UNRESPONSIVE = _target_driver.TM_STATE_UNRESPONSIVE

TM_STATE_UNDEFINED = _target_driver.TM_STATE_UNDEFINED

TM_STATE_SAFE = _target_driver.TM_STATE_SAFE

TM_STATE_PRESYNC = _target_driver.TM_STATE_PRESYNC

TM_STATE_READY = _target_driver.TM_STATE_READY

class TargetModule(UDPClient):
    r"""Proxy of C++ CTA::TargetDriver::TargetModule class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TargetModule self, uint16_t pModuleId=1) -> TargetModule
        __init__(TargetModule self, std::string const & pFPGADef, std::string const & pASICDef, uint16_t pModuleId=1) -> TargetModule
        __init__(TargetModule self, std::string const & pFPGADef, std::string const & pASICDef, std::string const & pTriggerASICDef, uint16_t pModuleId=1) -> TargetModule
        """
        _target_driver.TargetModule_swiginit(self, _target_driver.new_TargetModule(*args))

    def SetIPAddresses(self, pClientIP, pModuleIP):
        r"""SetIPAddresses(TargetModule self, std::string const & pClientIP, std::string const & pModuleIP)"""
        return _target_driver.TargetModule_SetIPAddresses(self, pClientIP, pModuleIP)

    def SetClientIP(self, pClientIP):
        r"""SetClientIP(TargetModule self, std::string const & pClientIP)"""
        return _target_driver.TargetModule_SetClientIP(self, pClientIP)

    def SetModuleIP(self, pModuleIP):
        r"""SetModuleIP(TargetModule self, std::string const & pModuleIP)"""
        return _target_driver.TargetModule_SetModuleIP(self, pModuleIP)

    def Exists(self, ipaddress, myip):
        r"""Exists(TargetModule self, std::string ipaddress, std::string myip) -> bool"""
        return _target_driver.TargetModule_Exists(self, ipaddress, myip)

    def Connect(self):
        r"""Connect(TargetModule self) -> int"""
        return _target_driver.TargetModule_Connect(self)

    def EstablishSlowControlLink(self, pClientIP, pModuelIP):
        r"""EstablishSlowControlLink(TargetModule self, std::string const & pClientIP, std::string const & pModuelIP) -> int"""
        return _target_driver.TargetModule_EstablishSlowControlLink(self, pClientIP, pModuelIP)

    def AddDAQListener(self, pClientIP):
        r"""AddDAQListener(TargetModule self, std::string const & pClientIP) -> int"""
        return _target_driver.TargetModule_AddDAQListener(self, pClientIP)

    @staticmethod
    def PackControlPacket(packet, addr, data, iswrite):
        r"""PackControlPacket(uint8_t * packet, uint32_t addr, uint32_t data, bool iswrite)"""
        return _target_driver.TargetModule_PackControlPacket(packet, addr, data, iswrite)

    @staticmethod
    def UnpackControlPacket(packet, addr, iswrite):
        r"""UnpackControlPacket(uint8_t const * packet, uint32_t & addr, bool & iswrite) -> int"""
        return _target_driver.TargetModule_UnpackControlPacket(packet, addr, iswrite)

    def GetFirmwareVersion(self):
        r"""GetFirmwareVersion(TargetModule self) -> int"""
        return _target_driver.TargetModule_GetFirmwareVersion(self)

    def GetPrimaryBoardID(self):
        r"""GetPrimaryBoardID(TargetModule self) -> int"""
        return _target_driver.TargetModule_GetPrimaryBoardID(self)

    @staticmethod
    def CheckResponse(packet):
        r"""CheckResponse(uint8_t const * packet) -> int"""
        return _target_driver.TargetModule_CheckResponse(packet)

    def GetClockPhase(self):
        r"""GetClockPhase(TargetModule self) -> int"""
        return _target_driver.TargetModule_GetClockPhase(self)

    def StopSampling(self):
        r"""StopSampling(TargetModule self)"""
        return _target_driver.TargetModule_StopSampling(self)

    def CheckRegisters(self):
        r"""CheckRegisters(TargetModule self) -> int"""
        return _target_driver.TargetModule_CheckRegisters(self)

    def GoToSafe(self):
        r"""GoToSafe(TargetModule self) -> int"""
        return _target_driver.TargetModule_GoToSafe(self)

    def GoToPreSync(self):
        r"""GoToPreSync(TargetModule self) -> int"""
        return _target_driver.TargetModule_GoToPreSync(self)

    def GoToReady(self):
        r"""GoToReady(TargetModule self) -> int"""
        return _target_driver.TargetModule_GoToReady(self)

    def IsReady(self):
        r"""IsReady(TargetModule self) -> bool"""
        return _target_driver.TargetModule_IsReady(self)

    def IsPreSync(self):
        r"""IsPreSync(TargetModule self) -> bool"""
        return _target_driver.TargetModule_IsPreSync(self)

    def IsSafe(self):
        r"""IsSafe(TargetModule self) -> bool"""
        return _target_driver.TargetModule_IsSafe(self)

    def IsUndefined(self):
        r"""IsUndefined(TargetModule self) -> bool"""
        return _target_driver.TargetModule_IsUndefined(self)

    def IsContactable(self):
        r"""IsContactable(TargetModule self) -> bool"""
        return _target_driver.TargetModule_IsContactable(self)

    def IsUnresponsive(self):
        r"""IsUnresponsive(TargetModule self) -> bool"""
        return _target_driver.TargetModule_IsUnresponsive(self)

    def GetState(self):
        r"""GetState(TargetModule self) -> int"""
        return _target_driver.TargetModule_GetState(self)

    def ReconnectToServer(self, pMyIP, pMySourcePort, pServerIP, pServerPort, pSocketBufferSize=-1):
        r"""ReconnectToServer(TargetModule self, std::string const & pMyIP, uint16_t pMySourcePort, std::string const & pServerIP, uint16_t pServerPort, int32_t pSocketBufferSize=-1) -> int"""
        return _target_driver.TargetModule_ReconnectToServer(self, pMyIP, pMySourcePort, pServerIP, pServerPort, pSocketBufferSize)

    def PrintAllRegisterSettings(self):
        r"""PrintAllRegisterSettings(TargetModule self)"""
        return _target_driver.TargetModule_PrintAllRegisterSettings(self)

    def PrintAllRegisterValues(self):
        r"""PrintAllRegisterValues(TargetModule self)"""
        return _target_driver.TargetModule_PrintAllRegisterValues(self)

    def GetStateString(self):
        r"""GetStateString(TargetModule self) -> std::string"""
        return _target_driver.TargetModule_GetStateString(self)

    def WriteRegister(self, address, data):
        r"""WriteRegister(TargetModule self, uint32_t address, uint32_t data) -> int"""
        return _target_driver.TargetModule_WriteRegister(self, address, data)

    def WriteRegisterAndCheck(self, address, data):
        r"""WriteRegisterAndCheck(TargetModule self, uint32_t address, uint32_t data) -> int"""
        return _target_driver.TargetModule_WriteRegisterAndCheck(self, address, data)

    def WriteTARGETRegister(self, *args):
        r"""
        WriteTARGETRegister(TargetModule self, bool enableAsic0, bool enableAsic1, bool enableAsic2, bool enableAsic3, bool readback, bool latchIsRequired, uint8_t address, uint16_t value, bool isTriggerASIC=False) -> int
        WriteTARGETRegister(TargetModule self, bool readback, bool latchIsRequired, uint8_t address, uint16_t value, bool isTriggerASIC=False) -> int
        """
        return _target_driver.TargetModule_WriteTARGETRegister(self, *args)

    def WriteSetting(self, name, val):
        r"""WriteSetting(TargetModule self, std::string const & name, uint32_t val) -> int"""
        return _target_driver.TargetModule_WriteSetting(self, name, val)

    def ReadSetting(self, name):
        r"""ReadSetting(TargetModule self, std::string const & name) -> int"""
        return _target_driver.TargetModule_ReadSetting(self, name)

    def WriteSettingFromConfig(self, name):
        r"""WriteSettingFromConfig(TargetModule self, std::string const & name) -> int"""
        return _target_driver.TargetModule_WriteSettingFromConfig(self, name)

    def WriteRegisterFromConfig(self, address):
        r"""WriteRegisterFromConfig(TargetModule self, uint32_t address) -> int"""
        return _target_driver.TargetModule_WriteRegisterFromConfig(self, address)

    def WriteASICSetting(self, name, asic, val, individualASIC=False, isTriggerASIC=False):
        r"""WriteASICSetting(TargetModule self, std::string const & name, uint8_t asic, uint16_t val, bool individualASIC=False, bool isTriggerASIC=False) -> int"""
        return _target_driver.TargetModule_WriteASICSetting(self, name, asic, val, individualASIC, isTriggerASIC)

    def WriteTriggerASICSetting(self, name, asic, val, individualASIC=False):
        r"""WriteTriggerASICSetting(TargetModule self, std::string const & name, uint8_t asic, uint16_t val, bool individualASIC=False) -> int"""
        return _target_driver.TargetModule_WriteTriggerASICSetting(self, name, asic, val, individualASIC)

    def WriteASICRegisterFromConfig(self, address, asic=0, individualASIC=False, isTriggerASIC=False):
        r"""WriteASICRegisterFromConfig(TargetModule self, uint8_t address, uint8_t asic=0, bool individualASIC=False, bool isTriggerASIC=False) -> int"""
        return _target_driver.TargetModule_WriteASICRegisterFromConfig(self, address, asic, individualASIC, isTriggerASIC)

    def WriteTriggerASICRegisterFromConfig(self, address, asic=0, individualASIC=False):
        r"""WriteTriggerASICRegisterFromConfig(TargetModule self, uint8_t address, uint8_t asic=0, bool individualASIC=False) -> int"""
        return _target_driver.TargetModule_WriteTriggerASICRegisterFromConfig(self, address, asic, individualASIC)

    def WriteASICSettingFromConfig(self, name, asic=0, individualASIC=False, isTriggerASIC=False):
        r"""WriteASICSettingFromConfig(TargetModule self, std::string const & name, uint8_t asic=0, bool individualASIC=False, bool isTriggerASIC=False) -> int"""
        return _target_driver.TargetModule_WriteASICSettingFromConfig(self, name, asic, individualASIC, isTriggerASIC)

    def WriteTriggerASICSettingFromConfig(self, name, asic=0, individualASIC=False):
        r"""WriteTriggerASICSettingFromConfig(TargetModule self, std::string const & name, uint8_t asic=0, bool individualASIC=False) -> int"""
        return _target_driver.TargetModule_WriteTriggerASICSettingFromConfig(self, name, asic, individualASIC)

    def WriteSettingCalibrated(self, name, val):
        r"""WriteSettingCalibrated(TargetModule self, std::string const & name, float val) -> int"""
        return _target_driver.TargetModule_WriteSettingCalibrated(self, name, val)

    def ReadSettingCalibrated(self, name):
        r"""ReadSettingCalibrated(TargetModule self, std::string const & name) -> int"""
        return _target_driver.TargetModule_ReadSettingCalibrated(self, name)

    def WriteSettingASICCalibrated(self, name, asic, val, individualASIC=False, isTriggerASIC=False):
        r"""WriteSettingASICCalibrated(TargetModule self, std::string const & name, uint8_t asic, float val, bool individualASIC=False, bool isTriggerASIC=False) -> int"""
        return _target_driver.TargetModule_WriteSettingASICCalibrated(self, name, asic, val, individualASIC, isTriggerASIC)

    def WriteSettingTriggerASICCalibrated(self, name, asic, val, individualASIC=False):
        r"""WriteSettingTriggerASICCalibrated(TargetModule self, std::string const & name, uint8_t asic, float val, bool individualASIC=False) -> int"""
        return _target_driver.TargetModule_WriteSettingTriggerASICCalibrated(self, name, asic, val, individualASIC)

    def PowerUpASIC(self, asic=0, individialASIC=False):
        r"""PowerUpASIC(TargetModule self, uint8_t asic=0, bool individialASIC=False) -> int"""
        return _target_driver.TargetModule_PowerUpASIC(self, asic, individialASIC)

    def Initialise(self):
        r"""Initialise(TargetModule self) -> int"""
        return _target_driver.TargetModule_Initialise(self)

    def EnableDLLFeedback(self):
        r"""EnableDLLFeedback(TargetModule self) -> int"""
        return _target_driver.TargetModule_EnableDLLFeedback(self)

    def DisableDLLFeedBack(self):
        r"""DisableDLLFeedBack(TargetModule self) -> int"""
        return _target_driver.TargetModule_DisableDLLFeedBack(self)

    def ReadRegister(self, address):
        r"""ReadRegister(TargetModule self, uint32_t address) -> int"""
        return _target_driver.TargetModule_ReadRegister(self, address)

    def FillRegisterMapFromFPGA(self):
        r"""FillRegisterMapFromFPGA(TargetModule self) -> int"""
        return _target_driver.TargetModule_FillRegisterMapFromFPGA(self)

    def DataPortPing(self, *args):
        r"""
        DataPortPing(TargetModule self, std::string const & pClientIP, std::string const & pModuelIP)
        DataPortPing(TargetModule self)
        """
        return _target_driver.TargetModule_DataPortPing(self, *args)

    def DeleteDAQListeners(self):
        r"""DeleteDAQListeners(TargetModule self)"""
        return _target_driver.TargetModule_DeleteDAQListeners(self)

    def QueryAndPrintAllRegisters(self, stream):
        r"""QueryAndPrintAllRegisters(TargetModule self, std::ostream & stream)"""
        return _target_driver.TargetModule_QueryAndPrintAllRegisters(self, stream)
    eHVInput = _target_driver.TargetModule_eHVInput
    
    eTemperature = _target_driver.TargetModule_eTemperature
    
    eID = _target_driver.TargetModule_eID
    
    eHVEnable = _target_driver.TargetModule_eHVEnable
    
    eHVSetDAC0 = _target_driver.TargetModule_eHVSetDAC0
    
    eHVSetDAC1 = _target_driver.TargetModule_eHVSetDAC1
    
    eHVSetDAC2 = _target_driver.TargetModule_eHVSetDAC2
    
    eHVSetDAC3 = _target_driver.TargetModule_eHVSetDAC3
    
    eUnkown = _target_driver.TargetModule_eUnkown
    

    def ReadHVCurrentInput(self):
        r"""ReadHVCurrentInput(TargetModule self) -> int"""
        return _target_driver.TargetModule_ReadHVCurrentInput(self)

    def ReadHVVoltageInput(self):
        r"""ReadHVVoltageInput(TargetModule self) -> int"""
        return _target_driver.TargetModule_ReadHVVoltageInput(self)

    def GetTempI2CPower(self):
        r"""GetTempI2CPower(TargetModule self) -> int"""
        return _target_driver.TargetModule_GetTempI2CPower(self)

    def GetTempI2CAux(self):
        r"""GetTempI2CAux(TargetModule self) -> int"""
        return _target_driver.TargetModule_GetTempI2CAux(self)

    def GetTempI2CPrimary(self):
        r"""GetTempI2CPrimary(TargetModule self) -> int"""
        return _target_driver.TargetModule_GetTempI2CPrimary(self)

    def GetTempSIPM(self):
        r"""GetTempSIPM(TargetModule self) -> int"""
        return _target_driver.TargetModule_GetTempSIPM(self)

    def ReadPowerBoardID(self):
        r"""ReadPowerBoardID(TargetModule self) -> int"""
        return _target_driver.TargetModule_ReadPowerBoardID(self)

    def ReadHVEnableBytes(self, byte0, byte1):
        r"""ReadHVEnableBytes(TargetModule self, uint8_t & byte0, uint8_t & byte1) -> int"""
        return _target_driver.TargetModule_ReadHVEnableBytes(self, byte0, byte1)

    def IsHVEnabled(self, superPixel):
        r"""IsHVEnabled(TargetModule self, uint8_t superPixel) -> int"""
        return _target_driver.TargetModule_IsHVEnabled(self, superPixel)

    def WhichHVEnabled(self, enabled):
        r"""WhichHVEnabled(TargetModule self, std::vector< bool > & enabled) -> int"""
        return _target_driver.TargetModule_WhichHVEnabled(self, enabled)

    def DisableHVSuperPixel(self, superPixel):
        r"""DisableHVSuperPixel(TargetModule self, uint8_t superPixel) -> int"""
        return _target_driver.TargetModule_DisableHVSuperPixel(self, superPixel)

    def EnableHVSuperPixel(self, superPixel):
        r"""EnableHVSuperPixel(TargetModule self, uint8_t superPixel) -> int"""
        return _target_driver.TargetModule_EnableHVSuperPixel(self, superPixel)

    def DisableHVAll(self):
        r"""DisableHVAll(TargetModule self) -> int"""
        return _target_driver.TargetModule_DisableHVAll(self)

    def EnableHVAll(self):
        r"""EnableHVAll(TargetModule self) -> int"""
        return _target_driver.TargetModule_EnableHVAll(self)

    def SetHVDAC(self, superPixel, val):
        r"""SetHVDAC(TargetModule self, uint8_t superPixel, uint8_t val) -> int"""
        return _target_driver.TargetModule_SetHVDAC(self, superPixel, val)

    def ReadHVDAC(self, superPixel):
        r"""ReadHVDAC(TargetModule self, uint8_t superPixel) -> int"""
        return _target_driver.TargetModule_ReadHVDAC(self, superPixel)

    def SetHVDACAll(self, dacVal):
        r"""SetHVDACAll(TargetModule self, uint8_t dacVal) -> int"""
        return _target_driver.TargetModule_SetHVDACAll(self, dacVal)

    def SuperPixelIdToI2CAddr(self, spId):
        r"""SuperPixelIdToI2CAddr(TargetModule self, uint8_t spId) -> int"""
        return _target_driver.TargetModule_SuperPixelIdToI2CAddr(self, spId)

    def SuperPixelIdToI2CRegAddr(self, spId):
        r"""SuperPixelIdToI2CRegAddr(TargetModule self, uint8_t spId) -> int"""
        return _target_driver.TargetModule_SuperPixelIdToI2CRegAddr(self, spId)

    def SuperPixelIdToHVEneableBit(self, spId):
        r"""SuperPixelIdToHVEneableBit(TargetModule self, uint8_t spId) -> int"""
        return _target_driver.TargetModule_SuperPixelIdToHVEneableBit(self, spId)

    def GetHVSuperPixel(self, superPixel):
        r"""GetHVSuperPixel(TargetModule self, uint8_t superPixel) -> int"""
        return _target_driver.TargetModule_GetHVSuperPixel(self, superPixel)

    def ModifyModuleIP(self, value):
        r"""ModifyModuleIP(TargetModule self, uint8_t value) -> int"""
        return _target_driver.TargetModule_ModifyModuleIP(self, value)

    def ReadModuleIP(self):
        r"""ReadModuleIP(TargetModule self) -> int"""
        return _target_driver.TargetModule_ReadModuleIP(self)

    def ModifyModuleIdentifier(self, value):
        r"""ModifyModuleIdentifier(TargetModule self, uint16_t value) -> int"""
        return _target_driver.TargetModule_ModifyModuleIdentifier(self, value)

    def ReadModuleIdentifier(self, val):
        r"""ReadModuleIdentifier(TargetModule self, uint16_t & val) -> int"""
        return _target_driver.TargetModule_ReadModuleIdentifier(self, val)
    __swig_destroy__ = _target_driver.delete_TargetModule

# Register TargetModule in _target_driver:
_target_driver.TargetModule_swigregister(TargetModule)

def TargetModule_PackControlPacket(packet, addr, data, iswrite):
    r"""TargetModule_PackControlPacket(uint8_t * packet, uint32_t addr, uint32_t data, bool iswrite)"""
    return _target_driver.TargetModule_PackControlPacket(packet, addr, data, iswrite)

def TargetModule_UnpackControlPacket(packet, addr, iswrite):
    r"""TargetModule_UnpackControlPacket(uint8_t const * packet, uint32_t & addr, bool & iswrite) -> int"""
    return _target_driver.TargetModule_UnpackControlPacket(packet, addr, iswrite)

def TargetModule_CheckResponse(packet):
    r"""TargetModule_CheckResponse(uint8_t const * packet) -> int"""
    return _target_driver.TargetModule_CheckResponse(packet)

eRW = _target_driver.eRW

eR = _target_driver.eR

eW = _target_driver.eW

eRW_NS = _target_driver.eRW_NS

class Setting(object):
    r"""Proxy of C++ CTA::TargetDriver::Setting class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    regAddr = property(_target_driver.Setting_regAddr_get, _target_driver.Setting_regAddr_set, doc=r"""regAddr : uint32_t""")
    nBits = property(_target_driver.Setting_nBits_get, _target_driver.Setting_nBits_set, doc=r"""nBits : uint16_t""")
    startBit = property(_target_driver.Setting_startBit_get, _target_driver.Setting_startBit_set, doc=r"""startBit : uint16_t""")
    value = property(_target_driver.Setting_value_get, _target_driver.Setting_value_set, doc=r"""value : uint32_t""")
    access = property(_target_driver.Setting_access_get, _target_driver.Setting_access_set, doc=r"""access : CTA::TargetDriver::Access""")
    lowerBound = property(_target_driver.Setting_lowerBound_get, _target_driver.Setting_lowerBound_set, doc=r"""lowerBound : uint32_t""")
    upperBound = property(_target_driver.Setting_upperBound_get, _target_driver.Setting_upperBound_set, doc=r"""upperBound : uint32_t""")
    multiplier = property(_target_driver.Setting_multiplier_get, _target_driver.Setting_multiplier_set, doc=r"""multiplier : float""")
    offset = property(_target_driver.Setting_offset_get, _target_driver.Setting_offset_set, doc=r"""offset : float""")
    description = property(_target_driver.Setting_description_get, _target_driver.Setting_description_set, doc=r"""description : std::string""")

    def __init__(self):
        r"""__init__(Setting self) -> Setting"""
        _target_driver.Setting_swiginit(self, _target_driver.new_Setting())
    __swig_destroy__ = _target_driver.delete_Setting

# Register Setting in _target_driver:
_target_driver.Setting_swigregister(Setting)

class SettingASIC(object):
    r"""Proxy of C++ CTA::TargetDriver::SettingASIC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    settingASIC = property(_target_driver.SettingASIC_settingASIC_get, _target_driver.SettingASIC_settingASIC_set, doc=r"""settingASIC : a(4).CTA::TargetDriver::Setting""")

    def __init__(self):
        r"""__init__(SettingASIC self) -> SettingASIC"""
        _target_driver.SettingASIC_swiginit(self, _target_driver.new_SettingASIC())
    __swig_destroy__ = _target_driver.delete_SettingASIC

# Register SettingASIC in _target_driver:
_target_driver.SettingASIC_swigregister(SettingASIC)

class RegisterFPGA(object):
    r"""Proxy of C++ CTA::TargetDriver::RegisterFPGA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    val = property(_target_driver.RegisterFPGA_val_get, _target_driver.RegisterFPGA_val_set, doc=r"""val : uint32_t""")
    access = property(_target_driver.RegisterFPGA_access_get, _target_driver.RegisterFPGA_access_set, doc=r"""access : CTA::TargetDriver::Access""")

    def __init__(self):
        r"""__init__(RegisterFPGA self) -> RegisterFPGA"""
        _target_driver.RegisterFPGA_swiginit(self, _target_driver.new_RegisterFPGA())
    __swig_destroy__ = _target_driver.delete_RegisterFPGA

# Register RegisterFPGA in _target_driver:
_target_driver.RegisterFPGA_swigregister(RegisterFPGA)

class RegisterASIC(object):
    r"""Proxy of C++ CTA::TargetDriver::RegisterASIC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    val = property(_target_driver.RegisterASIC_val_get, _target_driver.RegisterASIC_val_set, doc=r"""val : a(4).uint16_t""")

    def __init__(self):
        r"""__init__(RegisterASIC self) -> RegisterASIC"""
        _target_driver.RegisterASIC_swiginit(self, _target_driver.new_RegisterASIC())
    __swig_destroy__ = _target_driver.delete_RegisterASIC

# Register RegisterASIC in _target_driver:
_target_driver.RegisterASIC_swigregister(RegisterASIC)

class RegisterSettings(object):
    r"""Proxy of C++ CTA::TargetDriver::RegisterSettings class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RegisterSettings self, std::string const & targetFPGADefinitionFile, std::string const & targetASICDefinitionFile) -> RegisterSettings
        __init__(RegisterSettings self, std::string const & targetFPGADefinitionFile, std::string const & targetASICDefinitionFile, std::string const & targetTriggerASICDefinitionFile) -> RegisterSettings
        """
        _target_driver.RegisterSettings_swiginit(self, _target_driver.new_RegisterSettings(*args))

    def PrintSetting(self, set):
        r"""PrintSetting(RegisterSettings self, Setting set)"""
        return _target_driver.RegisterSettings_PrintSetting(self, set)

    def PrintFPGASetting(self, settingName):
        r"""PrintFPGASetting(RegisterSettings self, std::string const & settingName)"""
        return _target_driver.RegisterSettings_PrintFPGASetting(self, settingName)

    def PrintASICSetting(self, settingName, isTriggerASIC=False):
        r"""PrintASICSetting(RegisterSettings self, std::string const & settingName, bool isTriggerASIC=False)"""
        return _target_driver.RegisterSettings_PrintASICSetting(self, settingName, isTriggerASIC)

    def PrintTriggerASICSetting(self, settingName):
        r"""PrintTriggerASICSetting(RegisterSettings self, std::string const & settingName)"""
        return _target_driver.RegisterSettings_PrintTriggerASICSetting(self, settingName)

    def PrintAllSettings(self):
        r"""PrintAllSettings(RegisterSettings self)"""
        return _target_driver.RegisterSettings_PrintAllSettings(self)

    def PrintHeaderFPGA(self):
        r"""PrintHeaderFPGA(RegisterSettings self)"""
        return _target_driver.RegisterSettings_PrintHeaderFPGA(self)

    def PrintHeaderASIC(self, isTriggerASIC=False):
        r"""PrintHeaderASIC(RegisterSettings self, bool isTriggerASIC=False)"""
        return _target_driver.RegisterSettings_PrintHeaderASIC(self, isTriggerASIC)

    def PrintHeaderTriggerASIC(self):
        r"""PrintHeaderTriggerASIC(RegisterSettings self)"""
        return _target_driver.RegisterSettings_PrintHeaderTriggerASIC(self)

    def PrintAllRegisters(self):
        r"""PrintAllRegisters(RegisterSettings self)"""
        return _target_driver.RegisterSettings_PrintAllRegisters(self)

    def GenerateASICMarkdown(self, fname, isTriggerASIC=False):
        r"""GenerateASICMarkdown(RegisterSettings self, std::string const & fname, bool isTriggerASIC=False)"""
        return _target_driver.RegisterSettings_GenerateASICMarkdown(self, fname, isTriggerASIC)

    def GenerateTriggerASICMarkdown(self, fname):
        r"""GenerateTriggerASICMarkdown(RegisterSettings self, std::string const & fname)"""
        return _target_driver.RegisterSettings_GenerateTriggerASICMarkdown(self, fname)

    def GenerateFPGAMarkdown(self, fname):
        r"""GenerateFPGAMarkdown(RegisterSettings self, std::string const & fname)"""
        return _target_driver.RegisterSettings_GenerateFPGAMarkdown(self, fname)

    def ReadUserFPGAConfigFile(self, configFile):
        r"""ReadUserFPGAConfigFile(RegisterSettings self, std::string const & configFile) -> int"""
        return _target_driver.RegisterSettings_ReadUserFPGAConfigFile(self, configFile)

    def ReadUserTriggerASICConfigFile(self, configFile):
        r"""ReadUserTriggerASICConfigFile(RegisterSettings self, std::string const & configFile) -> int"""
        return _target_driver.RegisterSettings_ReadUserTriggerASICConfigFile(self, configFile)

    def ReadUserASICConfigFile(self, configFile, isTriggerASIC=False):
        r"""ReadUserASICConfigFile(RegisterSettings self, std::string const & configFile, bool isTriggerASIC=False) -> int"""
        return _target_driver.RegisterSettings_ReadUserASICConfigFile(self, configFile, isTriggerASIC)

    def ModifyFPGASetting(self, name, newVal):
        r"""ModifyFPGASetting(RegisterSettings self, std::string const & name, uint32_t newVal) -> int"""
        return _target_driver.RegisterSettings_ModifyFPGASetting(self, name, newVal)

    def GetRegisterPartially(self, reg, set, reg_par):
        r"""GetRegisterPartially(RegisterSettings self, uint32_t reg, Setting set, uint32_t & reg_par)"""
        return _target_driver.RegisterSettings_GetRegisterPartially(self, reg, set, reg_par)

    def ModifyTriggerASICSetting(self, name, asic, val):
        r"""ModifyTriggerASICSetting(RegisterSettings self, std::string const & name, uint8_t asic, uint16_t val) -> int"""
        return _target_driver.RegisterSettings_ModifyTriggerASICSetting(self, name, asic, val)

    def ModifyASICSetting(self, name, asic, val, isTriggerASIC=False):
        r"""ModifyASICSetting(RegisterSettings self, std::string const & name, uint8_t asic, uint16_t val, bool isTriggerASIC=False) -> int"""
        return _target_driver.RegisterSettings_ModifyASICSetting(self, name, asic, val, isTriggerASIC)

    def GetFPGARegisterValue(self, addr):
        r"""GetFPGARegisterValue(RegisterSettings self, uint32_t addr) -> int"""
        return _target_driver.RegisterSettings_GetFPGARegisterValue(self, addr)

    def GetTriggerASICRegisterValue(self, name, asic, val):
        r"""GetTriggerASICRegisterValue(RegisterSettings self, std::string const & name, uint8_t asic, uint16_t & val) -> int"""
        return _target_driver.RegisterSettings_GetTriggerASICRegisterValue(self, name, asic, val)

    def GetASICRegisterValue(self, name, asic, val, isTriggerASIC=False):
        r"""GetASICRegisterValue(RegisterSettings self, std::string const & name, uint8_t asic, uint16_t & val, bool isTriggerASIC=False) -> int"""
        return _target_driver.RegisterSettings_GetASICRegisterValue(self, name, asic, val, isTriggerASIC)

    def GetFPGASettingRegisterAddress(self, name, addr):
        r"""GetFPGASettingRegisterAddress(RegisterSettings self, std::string const & name, uint32_t & addr) -> int"""
        return _target_driver.RegisterSettings_GetFPGASettingRegisterAddress(self, name, addr)

    def GetTriggerASICSettingRegisterAddress(self, name, addr):
        r"""GetTriggerASICSettingRegisterAddress(RegisterSettings self, std::string const & name, uint8_t & addr) -> int"""
        return _target_driver.RegisterSettings_GetTriggerASICSettingRegisterAddress(self, name, addr)

    def GetASICSettingRegisterAddress(self, name, addr, isTriggerASIC=False):
        r"""GetASICSettingRegisterAddress(RegisterSettings self, std::string const & name, uint8_t & addr, bool isTriggerASIC=False) -> int"""
        return _target_driver.RegisterSettings_GetASICSettingRegisterAddress(self, name, addr, isTriggerASIC)
    fType = property(_target_driver.RegisterSettings_fType_get, _target_driver.RegisterSettings_fType_set, doc=r"""fType : std::string""")
    fFPGAFirmwareVersion = property(_target_driver.RegisterSettings_fFPGAFirmwareVersion_get, _target_driver.RegisterSettings_fFPGAFirmwareVersion_set, doc=r"""fFPGAFirmwareVersion : uint32_t""")
    fFPGADescription = property(_target_driver.RegisterSettings_fFPGADescription_get, _target_driver.RegisterSettings_fFPGADescription_set, doc=r"""fFPGADescription : std::string""")
    fFPGAAuthor = property(_target_driver.RegisterSettings_fFPGAAuthor_get, _target_driver.RegisterSettings_fFPGAAuthor_set, doc=r"""fFPGAAuthor : std::string""")
    fFPGANumberOfRegisters = property(_target_driver.RegisterSettings_fFPGANumberOfRegisters_get, _target_driver.RegisterSettings_fFPGANumberOfRegisters_set, doc=r"""fFPGANumberOfRegisters : uint32_t""")
    fASICDescription = property(_target_driver.RegisterSettings_fASICDescription_get, _target_driver.RegisterSettings_fASICDescription_set, doc=r"""fASICDescription : std::string""")
    fASICAuthor = property(_target_driver.RegisterSettings_fASICAuthor_get, _target_driver.RegisterSettings_fASICAuthor_set, doc=r"""fASICAuthor : std::string""")
    fASICNumberOfRegisters = property(_target_driver.RegisterSettings_fASICNumberOfRegisters_get, _target_driver.RegisterSettings_fASICNumberOfRegisters_set, doc=r"""fASICNumberOfRegisters : uint32_t""")
    fTriggerASICDescription = property(_target_driver.RegisterSettings_fTriggerASICDescription_get, _target_driver.RegisterSettings_fTriggerASICDescription_set, doc=r"""fTriggerASICDescription : std::string""")
    fTriggerASICAuthor = property(_target_driver.RegisterSettings_fTriggerASICAuthor_get, _target_driver.RegisterSettings_fTriggerASICAuthor_set, doc=r"""fTriggerASICAuthor : std::string""")
    fTriggerASICNumberOfRegisters = property(_target_driver.RegisterSettings_fTriggerASICNumberOfRegisters_get, _target_driver.RegisterSettings_fTriggerASICNumberOfRegisters_set, doc=r"""fTriggerASICNumberOfRegisters : uint32_t""")

    def CheckFPGARegisterConsistency(self):
        r"""CheckFPGARegisterConsistency(RegisterSettings self) -> int"""
        return _target_driver.RegisterSettings_CheckFPGARegisterConsistency(self)

    def CheckTriggerASICRegisterConsistency(self):
        r"""CheckTriggerASICRegisterConsistency(RegisterSettings self) -> int"""
        return _target_driver.RegisterSettings_CheckTriggerASICRegisterConsistency(self)

    def CheckASICRegisterConsistency(self, isTriggerASIC=False):
        r"""CheckASICRegisterConsistency(RegisterSettings self, bool isTriggerASIC=False) -> int"""
        return _target_driver.RegisterSettings_CheckASICRegisterConsistency(self, isTriggerASIC)

    def ReadDefinitionFileFPGA(self):
        r"""ReadDefinitionFileFPGA(RegisterSettings self) -> int"""
        return _target_driver.RegisterSettings_ReadDefinitionFileFPGA(self)

    def ReadDefinitionFileTriggerASIC(self):
        r"""ReadDefinitionFileTriggerASIC(RegisterSettings self) -> int"""
        return _target_driver.RegisterSettings_ReadDefinitionFileTriggerASIC(self)

    def ReadDefinitionFileASIC(self, isTriggerASIC=False):
        r"""ReadDefinitionFileASIC(RegisterSettings self, bool isTriggerASIC=False) -> int"""
        return _target_driver.RegisterSettings_ReadDefinitionFileASIC(self, isTriggerASIC)

    def ModifyRegisterPartially(self, reg, set):
        r"""ModifyRegisterPartially(RegisterSettings self, uint32_t & reg, Setting set)"""
        return _target_driver.RegisterSettings_ModifyRegisterPartially(self, reg, set)

    def CheckRegisterPartially(self, reg, set):
        r"""CheckRegisterPartially(RegisterSettings self, uint32_t reg, Setting set) -> bool"""
        return _target_driver.RegisterSettings_CheckRegisterPartially(self, reg, set)

    def AddFPGASetting(self, name, setting):
        r"""AddFPGASetting(RegisterSettings self, std::string const & name, Setting setting) -> int"""
        return _target_driver.RegisterSettings_AddFPGASetting(self, name, setting)

    def AddTriggerASICSetting(self, name, setting):
        r"""AddTriggerASICSetting(RegisterSettings self, std::string const & name, SettingASIC setting) -> int"""
        return _target_driver.RegisterSettings_AddTriggerASICSetting(self, name, setting)

    def AddASICSetting(self, name, setting, isTriggerASIC=False):
        r"""AddASICSetting(RegisterSettings self, std::string const & name, SettingASIC setting, bool isTriggerASIC=False) -> int"""
        return _target_driver.RegisterSettings_AddASICSetting(self, name, setting, isTriggerASIC)

    def UpdateFPGASettingMapFromRegisterMap(self):
        r"""UpdateFPGASettingMapFromRegisterMap(RegisterSettings self) -> int"""
        return _target_driver.RegisterSettings_UpdateFPGASettingMapFromRegisterMap(self)
    fDefintionFileFPGA = property(_target_driver.RegisterSettings_fDefintionFileFPGA_get, doc=r"""fDefintionFileFPGA : q(const).std::string""")
    fDefintionFileASIC = property(_target_driver.RegisterSettings_fDefintionFileASIC_get, doc=r"""fDefintionFileASIC : q(const).std::string""")
    fDefintionFileTriggerASIC = property(_target_driver.RegisterSettings_fDefintionFileTriggerASIC_get, doc=r"""fDefintionFileTriggerASIC : q(const).std::string""")
    fSettingMapFPGA = property(_target_driver.RegisterSettings_fSettingMapFPGA_get, _target_driver.RegisterSettings_fSettingMapFPGA_set, doc=r"""fSettingMapFPGA : std::map<(std::string,CTA::TargetDriver::Setting)>""")
    fSettingMapASIC = property(_target_driver.RegisterSettings_fSettingMapASIC_get, _target_driver.RegisterSettings_fSettingMapASIC_set, doc=r"""fSettingMapASIC : std::map<(std::string,CTA::TargetDriver::SettingASIC)>""")
    fSettingMapTriggerASIC = property(_target_driver.RegisterSettings_fSettingMapTriggerASIC_get, _target_driver.RegisterSettings_fSettingMapTriggerASIC_set, doc=r"""fSettingMapTriggerASIC : std::map<(std::string,CTA::TargetDriver::SettingASIC)>""")
    fRegisterMapFPGA = property(_target_driver.RegisterSettings_fRegisterMapFPGA_get, _target_driver.RegisterSettings_fRegisterMapFPGA_set, doc=r"""fRegisterMapFPGA : std::map<(uint32_t,CTA::TargetDriver::RegisterFPGA)>""")
    fRegisterMapASIC = property(_target_driver.RegisterSettings_fRegisterMapASIC_get, _target_driver.RegisterSettings_fRegisterMapASIC_set, doc=r"""fRegisterMapASIC : std::map<(uint8_t,CTA::TargetDriver::RegisterASIC)>""")
    fRegisterMapTriggerASIC = property(_target_driver.RegisterSettings_fRegisterMapTriggerASIC_get, _target_driver.RegisterSettings_fRegisterMapTriggerASIC_set, doc=r"""fRegisterMapTriggerASIC : std::map<(uint8_t,CTA::TargetDriver::RegisterASIC)>""")
    __swig_destroy__ = _target_driver.delete_RegisterSettings

# Register RegisterSettings in _target_driver:
_target_driver.RegisterSettings_swigregister(RegisterSettings)

class ModuleSimulator(UDPServer):
    r"""Proxy of C++ CTA::TargetDriver::ModuleSimulator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ModuleSimulator self, std::string const & pModuleIP, std::string const & pFPGADef="", std::string const & pASICDef="", std::string const & pTriggerASICDef="", double rate=10) -> ModuleSimulator"""
        _target_driver.ModuleSimulator_swiginit(self, _target_driver.new_ModuleSimulator(*args))
    __swig_destroy__ = _target_driver.delete_ModuleSimulator

    def ListenAndRespond(self):
        r"""ListenAndRespond(ModuleSimulator self)"""
        return _target_driver.ModuleSimulator_ListenAndRespond(self)

    def RunTrigger(self):
        r"""RunTrigger(ModuleSimulator self)"""
        return _target_driver.ModuleSimulator_RunTrigger(self)

    def CloseSockets(self):
        r"""CloseSockets(ModuleSimulator self)"""
        return _target_driver.ModuleSimulator_CloseSockets(self)

    def IsRunning(self):
        r"""IsRunning(ModuleSimulator self) -> bool"""
        return _target_driver.ModuleSimulator_IsRunning(self)

    def SetVerbose(self, verbose):
        r"""SetVerbose(ModuleSimulator self, bool verbose)"""
        return _target_driver.ModuleSimulator_SetVerbose(self, verbose)

    def Start(self):
        r"""Start(ModuleSimulator self)"""
        return _target_driver.ModuleSimulator_Start(self)

    def Stop(self):
        r"""Stop(ModuleSimulator self)"""
        return _target_driver.ModuleSimulator_Stop(self)

    def StartTriggering(self):
        r"""StartTriggering(ModuleSimulator self)"""
        return _target_driver.ModuleSimulator_StartTriggering(self)

    def StopTriggering(self):
        r"""StopTriggering(ModuleSimulator self)"""
        return _target_driver.ModuleSimulator_StopTriggering(self)

    def SetTriggerRate(self, pRate):
        r"""SetTriggerRate(ModuleSimulator self, double pRate)"""
        return _target_driver.ModuleSimulator_SetTriggerRate(self, pRate)

    def CheckTimeDifference(self):
        r"""CheckTimeDifference(ModuleSimulator self) -> bool"""
        return _target_driver.ModuleSimulator_CheckTimeDifference(self)

    def SendEventData(self):
        r"""SendEventData(ModuleSimulator self)"""
        return _target_driver.ModuleSimulator_SendEventData(self)

    def SetRefWaveform(self):
        r"""SetRefWaveform(ModuleSimulator self)"""
        return _target_driver.ModuleSimulator_SetRefWaveform(self)

# Register ModuleSimulator in _target_driver:
_target_driver.ModuleSimulator_swigregister(ModuleSimulator)

class Waveform(object):
    r"""Proxy of C++ CTA::TargetDriver::Waveform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, data=None):
        r"""__init__(Waveform self, uint8_t * data=None) -> Waveform"""
        _target_driver.Waveform_swiginit(self, _target_driver.new_Waveform(data))
    __swig_destroy__ = _target_driver.delete_Waveform

    def AssociateData(self, data):
        r"""AssociateData(Waveform self, uint8_t * data)"""
        return _target_driver.Waveform_AssociateData(self, data)

    def IsErrorFlagOn(self):
        r"""IsErrorFlagOn(Waveform self) -> bool"""
        return _target_driver.Waveform_IsErrorFlagOn(self)

    def GetChannel(self):
        r"""GetChannel(Waveform self) -> uint8_t"""
        return _target_driver.Waveform_GetChannel(self)

    def GetASIC(self):
        r"""GetASIC(Waveform self) -> uint8_t"""
        return _target_driver.Waveform_GetASIC(self)

    def GetSamples(self):
        r"""GetSamples(Waveform self) -> uint16_t"""
        return _target_driver.Waveform_GetSamples(self)

    def GetADC(self, n):
        r"""GetADC(Waveform self, uint16_t n) -> uint16_t"""
        return _target_driver.Waveform_GetADC(self, n)

    def GetADC16bit(self, n):
        r"""GetADC16bit(Waveform self, uint16_t n) -> uint16_t"""
        return _target_driver.Waveform_GetADC16bit(self, n)

    def GetPixelID(self):
        r"""GetPixelID(Waveform self) -> uint16_t"""
        return _target_driver.Waveform_GetPixelID(self)

    def GetADCArray(self, adcarray):
        r"""GetADCArray(Waveform self, uint16_t * adcarray)"""
        return _target_driver.Waveform_GetADCArray(self, adcarray)

    def GetADC16bitArray(self, adcarray):
        r"""GetADC16bitArray(Waveform self, uint16_t * adcarray)"""
        return _target_driver.Waveform_GetADC16bitArray(self, adcarray)

    def GetMeanAndStdDev(self, mean, stddev, maxsamples=0):
        r"""GetMeanAndStdDev(Waveform self, float & mean, float & stddev, uint16_t maxsamples=0)"""
        return _target_driver.Waveform_GetMeanAndStdDev(self, mean, stddev, maxsamples)

    def GetMeanAndRMS(self, mean, rms, maxsamples=0):
        r"""GetMeanAndRMS(Waveform self, float & mean, float & rms, uint16_t maxsamples=0)"""
        return _target_driver.Waveform_GetMeanAndRMS(self, mean, rms, maxsamples)

    def SetHeader(self, asic, chan, samples, errflag):
        r"""SetHeader(Waveform self, uint8_t asic, uint8_t chan, uint16_t samples, bool errflag)"""
        return _target_driver.Waveform_SetHeader(self, asic, chan, samples, errflag)

    def SetADC(self, n, val):
        r"""SetADC(Waveform self, uint16_t n, uint16_t val)"""
        return _target_driver.Waveform_SetADC(self, n, val)

    def SetADC16bit(self, n, val):
        r"""SetADC16bit(Waveform self, uint16_t n, uint16_t val)"""
        return _target_driver.Waveform_SetADC16bit(self, n, val)

    def PackWaveform(self, asic, chan, samples, errflag, data=None):
        r"""PackWaveform(Waveform self, uint8_t asic, uint8_t chan, uint16_t samples, bool errflag, uint16_t * data=None)"""
        return _target_driver.Waveform_PackWaveform(self, asic, chan, samples, errflag, data)

# Register Waveform in _target_driver:
_target_driver.Waveform_swigregister(Waveform)

T_PACKET_HEADER_WORDS = _target_driver.T_PACKET_HEADER_WORDS

T_PACKET_FOOTER_WORDS = _target_driver.T_PACKET_FOOTER_WORDS

T_WAVEFORM_HEADER_WORDS = _target_driver.T_WAVEFORM_HEADER_WORDS

T_SAMPLES_PER_WAVEFORM_BLOCK = _target_driver.T_SAMPLES_PER_WAVEFORM_BLOCK

T_PACKET_OK = _target_driver.T_PACKET_OK

T_PACKET_ERROR_NODATA = _target_driver.T_PACKET_ERROR_NODATA

T_PACKET_ERROR_BADLENGTH = _target_driver.T_PACKET_ERROR_BADLENGTH

T_PACKET_ERROR_BADCRC = _target_driver.T_PACKET_ERROR_BADCRC

T_PACKET_ERROR_LASTBYTES = _target_driver.T_PACKET_ERROR_LASTBYTES

T_PACKET_ERROR_NOWAVEFORMS = _target_driver.T_PACKET_ERROR_NOWAVEFORMS

class DataPacket(object):
    r"""Proxy of C++ CTA::TargetDriver::DataPacket class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DataPacket self, uint16_t waveforms_per_packet, uint16_t samples_per_waveform) -> DataPacket
        __init__(DataPacket self, uint16_t packetsize=0) -> DataPacket
        """
        _target_driver.DataPacket_swiginit(self, _target_driver.new_DataPacket(*args))
    __swig_destroy__ = _target_driver.delete_DataPacket

    def IsEmpty(self):
        r"""IsEmpty(DataPacket self) -> bool"""
        return _target_driver.DataPacket_IsEmpty(self)

    def IsValid(self):
        r"""IsValid(DataPacket self) -> bool"""
        return _target_driver.DataPacket_IsValid(self)

    def GetStatus(self):
        r"""GetStatus(DataPacket self) -> int"""
        return _target_driver.DataPacket_GetStatus(self)

    def GetStatusString(self):
        r"""GetStatusString(DataPacket self) -> std::string"""
        return _target_driver.DataPacket_GetStatusString(self)

    def GetASICID(self):
        r"""GetASICID(DataPacket self) -> uint8_t"""
        return _target_driver.DataPacket_GetASICID(self)

    def GetChannelID(self):
        r"""GetChannelID(DataPacket self) -> uint8_t"""
        return _target_driver.DataPacket_GetChannelID(self)

    def GetNumberOfWaveforms(self):
        r"""GetNumberOfWaveforms(DataPacket self) -> uint16_t"""
        return _target_driver.DataPacket_GetNumberOfWaveforms(self)

    def GetBuffers(self):
        r"""GetBuffers(DataPacket self) -> uint16_t"""
        return _target_driver.DataPacket_GetBuffers(self)

    def GetWaveformLength(self):
        r"""GetWaveformLength(DataPacket self) -> uint16_t"""
        return _target_driver.DataPacket_GetWaveformLength(self)

    def GetWaveformSamples(self):
        r"""GetWaveformSamples(DataPacket self) -> uint16_t"""
        return _target_driver.DataPacket_GetWaveformSamples(self)

    def GetWaveformBytes(self):
        r"""GetWaveformBytes(DataPacket self) -> uint16_t"""
        return _target_driver.DataPacket_GetWaveformBytes(self)

    def IsFirstSubPacket(self):
        r"""IsFirstSubPacket(DataPacket self) -> bool"""
        return _target_driver.DataPacket_IsFirstSubPacket(self)

    def IsLastSubPacket(self):
        r"""IsLastSubPacket(DataPacket self) -> bool"""
        return _target_driver.DataPacket_IsLastSubPacket(self)

    def GetTotalSizeInBytes(self):
        r"""GetTotalSizeInBytes(DataPacket self) -> uint16_t"""
        return _target_driver.DataPacket_GetTotalSizeInBytes(self)

    def GetEventNumber(self):
        r"""GetEventNumber(DataPacket self) -> uint16_t"""
        return _target_driver.DataPacket_GetEventNumber(self)

    def GetSlotID(self):
        r"""GetSlotID(DataPacket self) -> uint8_t"""
        return _target_driver.DataPacket_GetSlotID(self)

    def GetDetectorID(self):
        r"""GetDetectorID(DataPacket self) -> uint8_t"""
        return _target_driver.DataPacket_GetDetectorID(self)

    def GetEventSequenceNumber(self):
        r"""GetEventSequenceNumber(DataPacket self) -> uint8_t"""
        return _target_driver.DataPacket_GetEventSequenceNumber(self)

    def GetDetectorUniqueTag(self):
        r"""GetDetectorUniqueTag(DataPacket self) -> uint8_t"""
        return _target_driver.DataPacket_GetDetectorUniqueTag(self)

    def GetTACKTime(self):
        r"""GetTACKTime(DataPacket self) -> uint64_t"""
        return _target_driver.DataPacket_GetTACKTime(self)

    def GetTACKMode(self):
        r"""GetTACKMode(DataPacket self) -> uint8_t"""
        return _target_driver.DataPacket_GetTACKMode(self)

    def IsZeroSupressionEnabled(self):
        r"""IsZeroSupressionEnabled(DataPacket self) -> bool"""
        return _target_driver.DataPacket_IsZeroSupressionEnabled(self)

    def GetStaleBit(self):
        r"""GetStaleBit(DataPacket self) -> uint8_t"""
        return _target_driver.DataPacket_GetStaleBit(self)

    def GetColumn(self):
        r"""GetColumn(DataPacket self) -> uint8_t"""
        return _target_driver.DataPacket_GetColumn(self)

    def GetRow(self):
        r"""GetRow(DataPacket self) -> uint8_t"""
        return _target_driver.DataPacket_GetRow(self)

    def GetBlockPhase(self):
        r"""GetBlockPhase(DataPacket self) -> uint8_t"""
        return _target_driver.DataPacket_GetBlockPhase(self)

    @staticmethod
    def CalculateFirstCellId(pRow, pColumn, pBlockPhase):
        r"""CalculateFirstCellId(uint16_t pRow, uint16_t pColumn, uint16_t pBlockPhase) -> uint16_t"""
        return _target_driver.DataPacket_CalculateFirstCellId(pRow, pColumn, pBlockPhase)

    @staticmethod
    def CalculatePacketSizeInBytes(pWaveformsPerPacket, pSamplesPerWaveform):
        r"""CalculatePacketSizeInBytes(uint16_t pWaveformsPerPacket, uint16_t pSamplesPerWaveform) -> uint16_t"""
        return _target_driver.DataPacket_CalculatePacketSizeInBytes(pWaveformsPerPacket, pSamplesPerWaveform)

    @staticmethod
    def CalculateRowColumnBlockPhase(pCellId, pRow, pColumn, pBlockPhase):
        r"""CalculateRowColumnBlockPhase(uint16_t pCellId, uint16_t & pRow, uint16_t & pColumn, uint16_t & pBlockPhase)"""
        return _target_driver.DataPacket_CalculateRowColumnBlockPhase(pCellId, pRow, pColumn, pBlockPhase)

    @staticmethod
    def GetNCells():
        r"""GetNCells() -> uint16_t"""
        return _target_driver.DataPacket_GetNCells()

    def GetFirstCellId(self):
        r"""GetFirstCellId(DataPacket self) -> uint16_t"""
        return _target_driver.DataPacket_GetFirstCellId(self)

    def GetWaveform(self, waveformindex):
        r"""GetWaveform(DataPacket self, uint16_t waveformindex) -> Waveform"""
        return _target_driver.DataPacket_GetWaveform(self, waveformindex)

    def GetPacketID(self):
        r"""GetPacketID(DataPacket self) -> bool"""
        return _target_driver.DataPacket_GetPacketID(self)

    def AssociateWaveform(self, n, pWaveform):
        r"""AssociateWaveform(DataPacket self, uint16_t n, Waveform pWaveform)"""
        return _target_driver.DataPacket_AssociateWaveform(self, n, pWaveform)

    def FillHeader(self, waves_per_packet, waveform_samples, camera_slot_id, module_index, event_sequence_number, tack, quad, row, col):
        r"""FillHeader(DataPacket self, uint16_t waves_per_packet, uint16_t waveform_samples, uint8_t camera_slot_id, uint8_t module_index, uint8_t event_sequence_number, uint64_t tack, uint8_t quad, uint8_t row, uint8_t col)"""
        return _target_driver.DataPacket_FillHeader(self, waves_per_packet, waveform_samples, camera_slot_id, module_index, event_sequence_number, tack, quad, row, col)

    def FillFooter(self):
        r"""FillFooter(DataPacket self)"""
        return _target_driver.DataPacket_FillFooter(self)

    def SummarisePacket(self, *args):
        r"""SummarisePacket(DataPacket self, std::ostream & os=std::cout)"""
        return _target_driver.DataPacket_SummarisePacket(self, *args)

    def Allocate(self, packetsize):
        r"""Allocate(DataPacket self, uint16_t packetsize)"""
        return _target_driver.DataPacket_Allocate(self, packetsize)

    def Assign(self, data, packetsize):
        r"""Assign(DataPacket self, uint8_t * data, uint16_t packetsize)"""
        return _target_driver.DataPacket_Assign(self, data, packetsize)

    def Fill(self, data, packetsize):
        r"""Fill(DataPacket self, uint8_t const * data, uint16_t packetsize) -> bool"""
        return _target_driver.DataPacket_Fill(self, data, packetsize)

    def ClearFilledFlag(self):
        r"""ClearFilledFlag(DataPacket self)"""
        return _target_driver.DataPacket_ClearFilledFlag(self)

    def Deallocate(self):
        r"""Deallocate(DataPacket self)"""
        return _target_driver.DataPacket_Deallocate(self)

    def IsFilled(self):
        r"""IsFilled(DataPacket self) -> bool"""
        return _target_driver.DataPacket_IsFilled(self)

    def GetPacketSize(self):
        r"""GetPacketSize(DataPacket self) -> uint16_t"""
        return _target_driver.DataPacket_GetPacketSize(self)

    def GetData(self):
        r"""GetData(DataPacket self) -> uint8_t *"""
        return _target_driver.DataPacket_GetData(self)

    def Print(self):
        r"""Print(DataPacket self)"""
        return _target_driver.DataPacket_Print(self)

    def FillZero(self):
        r"""FillZero(DataPacket self)"""
        return _target_driver.DataPacket_FillZero(self)

# Register DataPacket in _target_driver:
_target_driver.DataPacket_swigregister(DataPacket)

def DataPacket_CalculateFirstCellId(pRow, pColumn, pBlockPhase):
    r"""DataPacket_CalculateFirstCellId(uint16_t pRow, uint16_t pColumn, uint16_t pBlockPhase) -> uint16_t"""
    return _target_driver.DataPacket_CalculateFirstCellId(pRow, pColumn, pBlockPhase)

def DataPacket_CalculatePacketSizeInBytes(pWaveformsPerPacket, pSamplesPerWaveform):
    r"""DataPacket_CalculatePacketSizeInBytes(uint16_t pWaveformsPerPacket, uint16_t pSamplesPerWaveform) -> uint16_t"""
    return _target_driver.DataPacket_CalculatePacketSizeInBytes(pWaveformsPerPacket, pSamplesPerWaveform)

def DataPacket_CalculateRowColumnBlockPhase(pCellId, pRow, pColumn, pBlockPhase):
    r"""DataPacket_CalculateRowColumnBlockPhase(uint16_t pCellId, uint16_t & pRow, uint16_t & pColumn, uint16_t & pBlockPhase)"""
    return _target_driver.DataPacket_CalculateRowColumnBlockPhase(pCellId, pRow, pColumn, pBlockPhase)

def DataPacket_GetNCells():
    r"""DataPacket_GetNCells() -> uint16_t"""
    return _target_driver.DataPacket_GetNCells()

TESTER_BOARD_PORT = _target_driver.TESTER_BOARD_PORT

TESTER_COMMAND_PORT = _target_driver.TESTER_COMMAND_PORT

class TesterBoard(TargetModule):
    r"""Proxy of C++ CTA::TargetDriver::TesterBoard class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _target_driver.delete_TesterBoard

    def Init(self, my_ip, tb_ip):
        r"""Init(TesterBoard self, std::string const & my_ip, std::string const & tb_ip) -> int"""
        return _target_driver.TesterBoard_Init(self, my_ip, tb_ip)

    def GetFirmwareVersion(self):
        r"""GetFirmwareVersion(TesterBoard self) -> uint32_t"""
        return _target_driver.TesterBoard_GetFirmwareVersion(self)

    def GetSerialNumber(self):
        r"""GetSerialNumber(TesterBoard self) -> uint64_t"""
        return _target_driver.TesterBoard_GetSerialNumber(self)

    def GetStatus(self):
        r"""GetStatus(TesterBoard self) -> uint32_t"""
        return _target_driver.TesterBoard_GetStatus(self)

    def PrintStatus(self):
        r"""PrintStatus(TesterBoard self)"""
        return _target_driver.TesterBoard_PrintStatus(self)

    def TurnOffAnalogInput(self):
        r"""TurnOffAnalogInput(TesterBoard self)"""
        return _target_driver.TesterBoard_TurnOffAnalogInput(self)

    def IsCameraModuleConnected(self):
        r"""IsCameraModuleConnected(TesterBoard self) -> bool"""
        return _target_driver.TesterBoard_IsCameraModuleConnected(self)

    def SetStatusOfBPLines(self, bp6, bp4):
        r"""SetStatusOfBPLines(TesterBoard self, bool bp6, bool bp4)"""
        return _target_driver.TesterBoard_SetStatusOfBPLines(self, bp6, bp4)

    def EnableReset(self, enable):
        r"""EnableReset(TesterBoard self, bool enable)"""
        return _target_driver.TesterBoard_EnableReset(self, enable)

    def SetTriggerDeadTime(self, deadtime):
        r"""SetTriggerDeadTime(TesterBoard self, uint16_t deadtime) -> int"""
        return _target_driver.TesterBoard_SetTriggerDeadTime(self, deadtime)

    def SetClockOffset(self, offset):
        r"""SetClockOffset(TesterBoard self, uint8_t offset) -> int"""
        return _target_driver.TesterBoard_SetClockOffset(self, offset)

    def SendSoftwareTrigger(self):
        r"""SendSoftwareTrigger(TesterBoard self) -> int"""
        return _target_driver.TesterBoard_SendSoftwareTrigger(self)

    def ResyncTrigger(self):
        r"""ResyncTrigger(TesterBoard self)"""
        return _target_driver.TesterBoard_ResyncTrigger(self)

    def SetTriggerModeAndType(self, mode, type):
        r"""SetTriggerModeAndType(TesterBoard self, uint8_t mode, uint8_t type) -> int"""
        return _target_driver.TesterBoard_SetTriggerModeAndType(self, mode, type)

    def SetTriggerMode(self, mode):
        r"""SetTriggerMode(TesterBoard self, uint8_t mode) -> int"""
        return _target_driver.TesterBoard_SetTriggerMode(self, mode)

    def EnableExternalTrigger(self, enable):
        r"""EnableExternalTrigger(TesterBoard self, bool enable)"""
        return _target_driver.TesterBoard_EnableExternalTrigger(self, enable)

    def EnableSoftwareTrigger(self, enable):
        r"""EnableSoftwareTrigger(TesterBoard self, bool enable)"""
        return _target_driver.TesterBoard_EnableSoftwareTrigger(self, enable)

    def GetTriggerMode(self):
        r"""GetTriggerMode(TesterBoard self) -> uint8_t"""
        return _target_driver.TesterBoard_GetTriggerMode(self)

    def EnableTrigger(self, *args):
        r"""
        EnableTrigger(TesterBoard self, uint8_t asic, bool b0, bool b1, bool b2, bool b3)
        EnableTrigger(TesterBoard self, uint8_t asic, uint8_t group, bool enable)
        """
        return _target_driver.TesterBoard_EnableTrigger(self, *args)

    def EnableTriggerCounterContribution(self, asic, group, enable):
        r"""EnableTriggerCounterContribution(TesterBoard self, uint8_t asic, uint8_t group, bool enable)"""
        return _target_driver.TesterBoard_EnableTriggerCounterContribution(self, asic, group, enable)

    def StartTriggerEfficiencyCounter(self, duration):
        r"""StartTriggerEfficiencyCounter(TesterBoard self, uint32_t duration)"""
        return _target_driver.TesterBoard_StartTriggerEfficiencyCounter(self, duration)

    def GetTriggerCounter(self):
        r"""GetTriggerCounter(TesterBoard self) -> uint32_t"""
        return _target_driver.TesterBoard_GetTriggerCounter(self)

    def GetTriggerEfficiencyCounter(self):
        r"""GetTriggerEfficiencyCounter(TesterBoard self) -> uint32_t"""
        return _target_driver.TesterBoard_GetTriggerEfficiencyCounter(self)

    def StartTimeBaseCounting(self, start):
        r"""StartTimeBaseCounting(TesterBoard self, uint64_t start)"""
        return _target_driver.TesterBoard_StartTimeBaseCounting(self, start)

    def GetTACKMessage(self):
        r"""GetTACKMessage(TesterBoard self) -> uint64_t"""
        return _target_driver.TesterBoard_GetTACKMessage(self)

    def IsTriggerEfficiencyCounterOutsideDeadTimeCompleted(self):
        r"""IsTriggerEfficiencyCounterOutsideDeadTimeCompleted(TesterBoard self) -> bool"""
        return _target_driver.TesterBoard_IsTriggerEfficiencyCounterOutsideDeadTimeCompleted(self)

    def GetTriggerEfficiencyCounterOutsideDeadTime(self):
        r"""GetTriggerEfficiencyCounterOutsideDeadTime(TesterBoard self) -> uint32_t"""
        return _target_driver.TesterBoard_GetTriggerEfficiencyCounterOutsideDeadTime(self)

    def __init__(self):
        r"""__init__(TesterBoard self) -> TesterBoard"""
        _target_driver.TesterBoard_swiginit(self, _target_driver.new_TesterBoard())

# Register TesterBoard in _target_driver:
_target_driver.TesterBoard_swigregister(TesterBoard)

class EventHeader(object):
    r"""Proxy of C++ CTA::TargetDriver::EventHeader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(EventHeader self) -> EventHeader"""
        _target_driver.EventHeader_swiginit(self, _target_driver.new_EventHeader())
    __swig_destroy__ = _target_driver.delete_EventHeader

    def Init(self):
        r"""Init(EventHeader self)"""
        return _target_driver.EventHeader_Init(self)

    def SetEventID(self, pEventID):
        r"""SetEventID(EventHeader self, uint32_t pEventID)"""
        return _target_driver.EventHeader_SetEventID(self, pEventID)

    def GetEventID(self):
        r"""GetEventID(EventHeader self) -> uint32_t"""
        return _target_driver.EventHeader_GetEventID(self)

    def SetTACK(self, pTACK):
        r"""SetTACK(EventHeader self, uint64_t pTACK)"""
        return _target_driver.EventHeader_SetTACK(self, pTACK)

    def GetTACK(self):
        r"""GetTACK(EventHeader self) -> uint64_t"""
        return _target_driver.EventHeader_GetTACK(self)

    def SetNPacketsFilled(self, pNPacketsFilled):
        r"""SetNPacketsFilled(EventHeader self, uint16_t pNPacketsFilled)"""
        return _target_driver.EventHeader_SetNPacketsFilled(self, pNPacketsFilled)

    def GetNPacketsFilled(self):
        r"""GetNPacketsFilled(EventHeader self) -> uint16_t"""
        return _target_driver.EventHeader_GetNPacketsFilled(self)

    def IncrementNPacketsFilled(self):
        r"""IncrementNPacketsFilled(EventHeader self)"""
        return _target_driver.EventHeader_IncrementNPacketsFilled(self)

    def SetTimeStamp(self, pSec, pNanosec):
        r"""SetTimeStamp(EventHeader self, int64_t pSec, int64_t pNanosec)"""
        return _target_driver.EventHeader_SetTimeStamp(self, pSec, pNanosec)

    def GetTimeStamp(self, pSec, pNanosec):
        r"""GetTimeStamp(EventHeader self, int64_t & pSec, int64_t & pNanosec)"""
        return _target_driver.EventHeader_GetTimeStamp(self, pSec, pNanosec)

    def SetTimeStampNow(self):
        r"""SetTimeStampNow(EventHeader self)"""
        return _target_driver.EventHeader_SetTimeStampNow(self)

    def CalcDeltaTSinceTimeStamp(self):
        r"""CalcDeltaTSinceTimeStamp(EventHeader self) -> double"""
        return _target_driver.EventHeader_CalcDeltaTSinceTimeStamp(self)

    def IfTimeStampIsZero(self):
        r"""IfTimeStampIsZero(EventHeader self) -> bool"""
        return _target_driver.EventHeader_IfTimeStampIsZero(self)

# Register EventHeader in _target_driver:
_target_driver.EventHeader_swigregister(EventHeader)
cvar = _target_driver.cvar
EventHeader.kColumnType = _target_driver.cvar.EventHeader_kColumnType
EventHeader.kColumnForm = _target_driver.cvar.EventHeader_kColumnForm
EventHeader.kColumnUnit = _target_driver.cvar.EventHeader_kColumnUnit

class RawEvent(object):
    r"""Proxy of C++ CTA::TargetDriver::RawEvent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pNPacketsPerEvent, pPacketSize):
        r"""__init__(RawEvent self, uint16_t pNPacketsPerEvent, uint16_t pPacketSize) -> RawEvent"""
        _target_driver.RawEvent_swiginit(self, _target_driver.new_RawEvent(pNPacketsPerEvent, pPacketSize))
    __swig_destroy__ = _target_driver.delete_RawEvent

    def Clear(self):
        r"""Clear(RawEvent self)"""
        return _target_driver.RawEvent_Clear(self)

    def GetDataPackets(self):
        r"""GetDataPackets(RawEvent self) -> std::vector< CTA::TargetDriver::DataPacket * > const &"""
        return _target_driver.RawEvent_GetDataPackets(self)

    def GetPacketSize(self):
        r"""GetPacketSize(RawEvent self) -> uint16_t"""
        return _target_driver.RawEvent_GetPacketSize(self)

    def GetEventHeader(self):
        r"""GetEventHeader(RawEvent self) -> EventHeader"""
        return _target_driver.RawEvent_GetEventHeader(self)

    def GetNPacketsPerEvent(self):
        r"""GetNPacketsPerEvent(RawEvent self) -> std::size_t"""
        return _target_driver.RawEvent_GetNPacketsPerEvent(self)

    def GetTimeoutSec(self):
        r"""GetTimeoutSec(RawEvent self) -> double"""
        return _target_driver.RawEvent_GetTimeoutSec(self)

    @staticmethod
    def SetTimeoutSec(pTimeoutSec):
        r"""SetTimeoutSec(double pTimeoutSec)"""
        return _target_driver.RawEvent_SetTimeoutSec(pTimeoutSec)

    def IsEmpty(self):
        r"""IsEmpty(RawEvent self) -> bool"""
        return _target_driver.RawEvent_IsEmpty(self)

    def IsTimedOut(self):
        r"""IsTimedOut(RawEvent self) -> bool"""
        return _target_driver.RawEvent_IsTimedOut(self)

    def WasFlushed(self):
        r"""WasFlushed(RawEvent self) -> bool"""
        return _target_driver.RawEvent_WasFlushed(self)

    def WasRead(self):
        r"""WasRead(RawEvent self) -> bool"""
        return _target_driver.RawEvent_WasRead(self)

    def SetToRead(self):
        r"""SetToRead(RawEvent self)"""
        return _target_driver.RawEvent_SetToRead(self)

    def SetToFlushed(self):
        r"""SetToFlushed(RawEvent self)"""
        return _target_driver.RawEvent_SetToFlushed(self)

    def IsBeingBuilt(self):
        r"""IsBeingBuilt(RawEvent self) -> bool"""
        return _target_driver.RawEvent_IsBeingBuilt(self)

    def IsComplete(self):
        r"""IsComplete(RawEvent self) -> bool"""
        return _target_driver.RawEvent_IsComplete(self)

    def AddNewPacket(self, pData, pPacketID, pPacketSize, checkflag=False):
        r"""AddNewPacket(RawEvent self, uint8_t const * pData, uint16_t pPacketID, uint16_t pPacketSize, bool checkflag=False) -> bool"""
        return _target_driver.RawEvent_AddNewPacket(self, pData, pPacketID, pPacketSize, checkflag)

    def WaveformCheckStatus(self):
        r"""WaveformCheckStatus(RawEvent self) -> bool"""
        return _target_driver.RawEvent_WaveformCheckStatus(self)

# Register RawEvent in _target_driver:
_target_driver.RawEvent_swigregister(RawEvent)

def RawEvent_SetTimeoutSec(pTimeoutSec):
    r"""RawEvent_SetTimeoutSec(double pTimeoutSec)"""
    return _target_driver.RawEvent_SetTimeoutSec(pTimeoutSec)

class EventBuffer(object):
    r"""Proxy of C++ CTA::TargetDriver::EventBuffer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pBufferDepth, pNPacketsPerEvent, pPacketSize, pBuildTimeout=0.2, pCheckFreq=0):
        r"""__init__(EventBuffer self, uint32_t pBufferDepth, uint16_t pNPacketsPerEvent, uint16_t pPacketSize, float pBuildTimeout=0.2, uint32_t pCheckFreq=0) -> EventBuffer"""
        _target_driver.EventBuffer_swiginit(self, _target_driver.new_EventBuffer(pBufferDepth, pNPacketsPerEvent, pPacketSize, pBuildTimeout, pCheckFreq))
    __swig_destroy__ = _target_driver.delete_EventBuffer

    def AddNewPacket(self, pData, pEventID, pPacketID, pPacketSize):
        r"""AddNewPacket(EventBuffer self, uint8_t const * pData, uint32_t pEventID, uint16_t pPacketID, uint16_t pPacketSize) -> bool"""
        return _target_driver.EventBuffer_AddNewPacket(self, pData, pEventID, pPacketID, pPacketSize)

    def ReadEvent(self):
        r"""ReadEvent(EventBuffer self) -> RawEvent"""
        return _target_driver.EventBuffer_ReadEvent(self)

    def Clear(self):
        r"""Clear(EventBuffer self)"""
        return _target_driver.EventBuffer_Clear(self)

    def ClearEvents(self):
        r"""ClearEvents(EventBuffer self)"""
        return _target_driver.EventBuffer_ClearEvents(self)

    def Flush(self):
        r"""Flush(EventBuffer self)"""
        return _target_driver.EventBuffer_Flush(self)

    def Report(self, stream):
        r"""Report(EventBuffer self, std::ostream & stream)"""
        return _target_driver.EventBuffer_Report(self, stream)

    def StatusOK(self):
        r"""StatusOK(EventBuffer self) -> bool"""
        return _target_driver.EventBuffer_StatusOK(self)

    def GetEventRate(self):
        r"""GetEventRate(EventBuffer self) -> float"""
        return _target_driver.EventBuffer_GetEventRate(self)

    def GetPacketSize(self):
        r"""GetPacketSize(EventBuffer self) -> uint16_t"""
        return _target_driver.EventBuffer_GetPacketSize(self)

    def GetNPacketsPerEvent(self):
        r"""GetNPacketsPerEvent(EventBuffer self) -> uint16_t"""
        return _target_driver.EventBuffer_GetNPacketsPerEvent(self)

    def GetReadIndex(self):
        r"""GetReadIndex(EventBuffer self) -> int64_t"""
        return _target_driver.EventBuffer_GetReadIndex(self)

    def GetWriteIndex(self):
        r"""GetWriteIndex(EventBuffer self) -> int64_t"""
        return _target_driver.EventBuffer_GetWriteIndex(self)

    def GetFinishedIndex(self):
        r"""GetFinishedIndex(EventBuffer self) -> int64_t"""
        return _target_driver.EventBuffer_GetFinishedIndex(self)

    def GetNumberIncomplete(self):
        r"""GetNumberIncomplete(EventBuffer self) -> int64_t"""
        return _target_driver.EventBuffer_GetNumberIncomplete(self)

    def GetNumberToBeRead(self):
        r"""GetNumberToBeRead(EventBuffer self) -> int64_t"""
        return _target_driver.EventBuffer_GetNumberToBeRead(self)

    def DiagnosticReport(self, stream):
        r"""DiagnosticReport(EventBuffer self, std::ostream & stream)"""
        return _target_driver.EventBuffer_DiagnosticReport(self, stream)

# Register EventBuffer in _target_driver:
_target_driver.EventBuffer_swigregister(EventBuffer)

class DataListener(UDPClient):
    r"""Proxy of C++ CTA::TargetDriver::DataListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pBufferDepth, pNPacketsPerEvent, pPacketSize, pBuildTimeout=0.2, pCheckFreq=0):
        r"""__init__(DataListener self, uint32_t pBufferDepth, uint16_t pNPacketsPerEvent, uint16_t pPacketSize, float pBuildTimeout=0.2, uint32_t pCheckFreq=0) -> DataListener"""
        _target_driver.DataListener_swiginit(self, _target_driver.new_DataListener(pBufferDepth, pNPacketsPerEvent, pPacketSize, pBuildTimeout, pCheckFreq))
    __swig_destroy__ = _target_driver.delete_DataListener

    def AddDAQListener(self, pMyIP):
        r"""AddDAQListener(DataListener self, std::string const & pMyIP) -> int"""
        return _target_driver.DataListener_AddDAQListener(self, pMyIP)

    def StopListening(self):
        r"""StopListening(DataListener self)"""
        return _target_driver.DataListener_StopListening(self)

    def StartListening(self):
        r"""StartListening(DataListener self)"""
        return _target_driver.DataListener_StartListening(self)

    def IsRunning(self):
        r"""IsRunning(DataListener self) -> bool"""
        return _target_driver.DataListener_IsRunning(self)

    def DropPackets(self, drop=True):
        r"""DropPackets(DataListener self, bool drop=True)"""
        return _target_driver.DataListener_DropPackets(self, drop)

    def GetNPacketsReceived(self):
        r"""GetNPacketsReceived(DataListener self) -> uint64_t"""
        return _target_driver.DataListener_GetNPacketsReceived(self)

    def GetNPacketProblems(self):
        r"""GetNPacketProblems(DataListener self) -> uint64_t"""
        return _target_driver.DataListener_GetNPacketProblems(self)

    def GetEventBuffer(self):
        r"""GetEventBuffer(DataListener self) -> std::shared_ptr< CTA::TargetDriver::EventBuffer >"""
        return _target_driver.DataListener_GetEventBuffer(self)

# Register DataListener in _target_driver:
_target_driver.DataListener_swigregister(DataListener)


def get_default_config_dir():
    r"""get_default_config_dir() -> std::string"""
    return _target_driver.get_default_config_dir()

def send_waveform_packet(p, sim, waves, samples):
    r"""send_waveform_packet(DataPacket p, ModuleSimulator sim, uint16_t waves, uint16_t samples) -> int"""
    return _target_driver.send_waveform_packet(p, sim, waves, samples)
TM_CONTROLPACKET_BYTES = _target_driver.TM_CONTROLPACKET_BYTES

TM_NUM_REGISTERS = _target_driver.TM_NUM_REGISTERS

TM_NUM_ASIC_REGISTERS = _target_driver.TM_NUM_ASIC_REGISTERS

TM_DATA_TIMEOUT = _target_driver.TM_DATA_TIMEOUT

TM_COMM_WRONGRESPONSESIZE = _target_driver.TM_COMM_WRONGRESPONSESIZE

TM_COMM_NORESPONSE = _target_driver.TM_COMM_NORESPONSE

TM_OK = _target_driver.TM_OK

TM_COMM_FAILURE = _target_driver.TM_COMM_FAILURE

TM_USER_ERROR = _target_driver.TM_USER_ERROR

class TargetModuleComms(object):
    r"""Proxy of C++ CTA::TARGET::TargetModuleComms class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TargetModuleComms self) -> TargetModuleComms"""
        _target_driver.TargetModuleComms_swiginit(self, _target_driver.new_TargetModuleComms())

    def PrintStatus(self, *args):
        r"""PrintStatus(TargetModuleComms self, std::ostream & os=std::cout)"""
        return _target_driver.TargetModuleComms_PrintStatus(self, *args)

    def EstablishSlowControlLink(self, my_ip, tm_ip, tm_number=0):
        r"""EstablishSlowControlLink(TargetModuleComms self, char * my_ip, char * tm_ip, int tm_number=0) -> bool"""
        return _target_driver.TargetModuleComms_EstablishSlowControlLink(self, my_ip, tm_ip, tm_number)

    def AddDAQListener(self, my_ip, socket_buffer_size=999424):
        r"""AddDAQListener(TargetModuleComms self, char * my_ip, int32_t socket_buffer_size=999424) -> bool"""
        return _target_driver.TargetModuleComms_AddDAQListener(self, my_ip, socket_buffer_size)

    def EndCommunications(self):
        r"""EndCommunications(TargetModuleComms self)"""
        return _target_driver.TargetModuleComms_EndCommunications(self)

    def ReadRegister(self, address):
        r"""ReadRegister(TargetModuleComms self, uint32_t address) -> bool"""
        return _target_driver.TargetModuleComms_ReadRegister(self, address)

    def WriteRegister(self, address, data):
        r"""WriteRegister(TargetModuleComms self, uint32_t address, uint32_t data) -> bool"""
        return _target_driver.TargetModuleComms_WriteRegister(self, address, data)

    def WriteRegisterAndCheck(self, address, data):
        r"""WriteRegisterAndCheck(TargetModuleComms self, uint32_t address, uint32_t data) -> bool"""
        return _target_driver.TargetModuleComms_WriteRegisterAndCheck(self, address, data)

    def GetDataPacket(self, tobefilled, bytes, maxbytes):
        r"""GetDataPacket(TargetModuleComms self, void * tobefilled, uint32_t & bytes, int maxbytes) -> bool"""
        return _target_driver.TargetModuleComms_GetDataPacket(self, tobefilled, bytes, maxbytes)

    @staticmethod
    def PackPacket(packet, addr, data, iswrite):
        r"""PackPacket(uint8_t * packet, uint32_t addr, uint32_t data, bool iswrite)"""
        return _target_driver.TargetModuleComms_PackPacket(packet, addr, data, iswrite)

    @staticmethod
    def UnpackPacket(packet, addr, iswrite):
        r"""UnpackPacket(uint8_t * packet, uint32_t & addr, bool & iswrite)"""
        return _target_driver.TargetModuleComms_UnpackPacket(packet, addr, iswrite)
    __swig_destroy__ = _target_driver.delete_TargetModuleComms

# Register TargetModuleComms in _target_driver:
_target_driver.TargetModuleComms_swigregister(TargetModuleComms)

def TargetModuleComms_PackPacket(packet, addr, data, iswrite):
    r"""TargetModuleComms_PackPacket(uint8_t * packet, uint32_t addr, uint32_t data, bool iswrite)"""
    return _target_driver.TargetModuleComms_PackPacket(packet, addr, data, iswrite)

def TargetModuleComms_UnpackPacket(packet, addr, iswrite):
    r"""TargetModuleComms_UnpackPacket(uint8_t * packet, uint32_t & addr, bool & iswrite)"""
    return _target_driver.TargetModuleComms_UnpackPacket(packet, addr, iswrite)

class TargetSimulator(object):
    r"""Proxy of C++ CTA::TARGET::TargetSimulator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(TargetSimulator self, char const * hostip="127.0.0.1") -> TargetSimulator"""
        _target_driver.TargetSimulator_swiginit(self, _target_driver.new_TargetSimulator(*args))
    __swig_destroy__ = _target_driver.delete_TargetSimulator

    def ClearRegisters(self):
        r"""ClearRegisters(TargetSimulator self)"""
        return _target_driver.TargetSimulator_ClearRegisters(self)

    def SendData(self, data, len):
        r"""SendData(TargetSimulator self, uint8_t * data, uint32_t len) -> bool"""
        return _target_driver.TargetSimulator_SendData(self, data, len)

    def ListenAndRespond(self):
        r"""ListenAndRespond(TargetSimulator self)"""
        return _target_driver.TargetSimulator_ListenAndRespond(self)

    @staticmethod
    def listener(context):
        r"""listener(void * context) -> void *"""
        return _target_driver.TargetSimulator_listener(context)

    def CloseSockets(self):
        r"""CloseSockets(TargetSimulator self)"""
        return _target_driver.TargetSimulator_CloseSockets(self)

    def SetVerbose(self, verbose):
        r"""SetVerbose(TargetSimulator self, bool verbose)"""
        return _target_driver.TargetSimulator_SetVerbose(self, verbose)

# Register TargetSimulator in _target_driver:
_target_driver.TargetSimulator_swigregister(TargetSimulator)

def TargetSimulator_listener(context):
    r"""TargetSimulator_listener(void * context) -> void *"""
    return _target_driver.TargetSimulator_listener(context)



