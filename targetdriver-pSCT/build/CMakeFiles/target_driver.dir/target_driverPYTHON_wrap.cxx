/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#elif PY_VERSION_HEX >= 0x03000000
  char *newstr = 0;
  str = PyUnicode_AsUTF8String(str);
  if (str) {
    char *cstr;
    Py_ssize_t len;
    if (PyBytes_AsStringAndSize(str, &cstr, &len) != -1) {
      newstr = (char *) malloc(len+1);
      if (newstr)
        memcpy(newstr, cstr, len+1);
    }
    Py_XDECREF(str);
  }
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03030000 || PY_VERSION_HEX < 0x03000000
#  define SWIG_Python_str_DelForPy3(x)
#else
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

// SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user
// interface files check for it.
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    Py_XDECREF(value);
    PyErr_Restore(type, newvalue, traceback);
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error "This version of SWIG only supports Python 3 >= 3.2"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
      data->delargs = !(flags & (METH_O));
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SwigPyObject_acquire(v,args);
      } else {
        SwigPyObject_disown(v,args);
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    return PyDict_SetItem(dict, SWIG_This(), swig_this);
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, "type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        return -1;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CTA__TargetDriver__DataListener swig_types[0]
#define SWIGTYPE_p_CTA__TargetDriver__DataPacket swig_types[1]
#define SWIGTYPE_p_CTA__TargetDriver__EventBuffer swig_types[2]
#define SWIGTYPE_p_CTA__TargetDriver__EventHeader swig_types[3]
#define SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator swig_types[4]
#define SWIGTYPE_p_CTA__TargetDriver__RawEvent swig_types[5]
#define SWIGTYPE_p_CTA__TargetDriver__RegisterASIC swig_types[6]
#define SWIGTYPE_p_CTA__TargetDriver__RegisterFPGA swig_types[7]
#define SWIGTYPE_p_CTA__TargetDriver__RegisterSettings swig_types[8]
#define SWIGTYPE_p_CTA__TargetDriver__Setting swig_types[9]
#define SWIGTYPE_p_CTA__TargetDriver__SettingASIC swig_types[10]
#define SWIGTYPE_p_CTA__TargetDriver__TargetModule swig_types[11]
#define SWIGTYPE_p_CTA__TargetDriver__TesterBoard swig_types[12]
#define SWIGTYPE_p_CTA__TargetDriver__UDPBase swig_types[13]
#define SWIGTYPE_p_CTA__TargetDriver__UDPClient swig_types[14]
#define SWIGTYPE_p_CTA__TargetDriver__UDPServer swig_types[15]
#define SWIGTYPE_p_CTA__TargetDriver__Waveform swig_types[16]
#define SWIGTYPE_p_RA_cit swig_types[17]
#define SWIGTYPE_p_RF_cit swig_types[18]
#define SWIGTYPE_p_SA_cit swig_types[19]
#define SWIGTYPE_p_SF_cit swig_types[20]
#define SWIGTYPE_p_bool swig_types[21]
#define SWIGTYPE_p_char swig_types[22]
#define SWIGTYPE_p_float swig_types[23]
#define SWIGTYPE_p_int swig_types[24]
#define SWIGTYPE_p_long_long swig_types[25]
#define SWIGTYPE_p_short swig_types[26]
#define SWIGTYPE_p_signed_char swig_types[27]
#define SWIGTYPE_p_ssize_t swig_types[28]
#define SWIGTYPE_p_std__invalid_argument swig_types[29]
#define SWIGTYPE_p_std__mapT_std__string_CTA__TargetDriver__SettingASIC_t swig_types[30]
#define SWIGTYPE_p_std__mapT_std__string_CTA__TargetDriver__Setting_t swig_types[31]
#define SWIGTYPE_p_std__mapT_unsigned_char_CTA__TargetDriver__RegisterASIC_t swig_types[32]
#define SWIGTYPE_p_std__mapT_unsigned_int_CTA__TargetDriver__RegisterFPGA_t swig_types[33]
#define SWIGTYPE_p_std__ostream swig_types[34]
#define SWIGTYPE_p_std__shared_ptrT_CTA__TargetDriver__EventBuffer_t swig_types[35]
#define SWIGTYPE_p_std__vectorT_CTA__TargetDriver__DataPacket_p_t swig_types[36]
#define SWIGTYPE_p_std__vectorT_bool_t swig_types[37]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[38]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[39]
#define SWIGTYPE_p_unsigned_char swig_types[40]
#define SWIGTYPE_p_unsigned_int swig_types[41]
#define SWIGTYPE_p_unsigned_long_long swig_types[42]
#define SWIGTYPE_p_unsigned_short swig_types[43]
static swig_type_info *swig_types[45];
static swig_module_info swig_module = {swig_types, 44, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _target_driver.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__target_driver

#else
#  define SWIG_init    init_target_driver

#endif
#define SWIG_name    "_target_driver"

#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#define SWIG_FILE_WITH_INIT
#include "TargetDriver/UDPBase.h"
#include "TargetDriver/UDPClient.h"
#include "TargetDriver/UDPServer.h"
#include "TargetDriver/TargetModule.h"
#include "TargetDriver/RegisterSettings.h"
#include "TargetDriver/ModuleSimulator.h"
#include "TargetDriver/Waveform.h"
#include "TargetDriver/DataPacket.h"
#include "TargetDriver/TesterBoard.h"
#include "TargetDriver/EventHeader.h"
#include "TargetDriver/RawEvent.h"
#include "TargetDriver/EventBuffer.h"
#include "TargetDriver/DataListener.h"
#include "TargetDriver/utils.h"
using namespace CTA::TargetDriver;


#ifndef SWIG_FILE_WITH_INIT
#define NO_IMPORT_ARRAY
#endif
#include "stdio.h"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/arrayobject.h>


#include <complex> 


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <list>


#include <stdint.h>		// Use the C99 official header


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (PyObject * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}





SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(__clang__) && defined(__has_builtin)
#  if __has_builtin(__builtin_isfinite)
#   define SWIG_isfinite(X) (__builtin_isfinite(X))
#  endif
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


#if NPY_API_VERSION < 0x00000007
#define NPY_ARRAY_DEFAULT NPY_DEFAULT
#define NPY_ARRAY_FARRAY  NPY_FARRAY
#define NPY_FORTRANORDER  NPY_FORTRAN
#endif


/* Macros to extract array attributes.
 */
#if NPY_API_VERSION < 0x00000007
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
#define array_numdims(a)       (((PyArrayObject*)a)->nd)
#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
#define array_strides(a)       (((PyArrayObject*)a)->strides)
#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
#define array_data(a)          (((PyArrayObject*)a)->data)
#define array_descr(a)         (((PyArrayObject*)a)->descr)
#define array_flags(a)         (((PyArrayObject*)a)->flags)
#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
#else
#define is_array(a)            ((a) && PyArray_Check(a))
#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
#endif
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))
#define array_is_fortran(a)    (PyArray_IS_F_CONTIGUOUS((PyArrayObject*)a))


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj)
  {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyString_Check(  py_obj)) return "string"      ;
    if (PyInt_Check(     py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;
#if PY_MAJOR_VERSION < 3
    if (PyFile_Check(    py_obj)) return "file"        ;
    if (PyModule_Check(  py_obj)) return "module"      ;
    if (PyInstance_Check(py_obj)) return "instance"    ;
#endif

    return "unknown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode)
  {
    static const char* type_names[25] = {"bool",
                                         "byte",
                                         "unsigned byte",
                                         "short",
                                         "unsigned short",
                                         "int",
                                         "unsigned int",
                                         "long",
                                         "unsigned long",
                                         "long long",
                                         "unsigned long long",
                                         "float",
                                         "double",
                                         "long double",
                                         "complex float",
                                         "complex double",
                                         "complex long double",
                                         "object",
                                         "string",
                                         "unicode",
                                         "void",
                                         "ntypes",
                                         "notype",
                                         "char",
                                         "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  This now just calls
     PyArray_EquivTypenums().
   */
  int type_match(int actual_type,
                 int desired_type)
  {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }

#ifdef SWIGPY_USE_CAPSULE
  void free_cap(PyObject * cap)
  {
    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
    if (array != NULL) free(array);
  }
#endif




  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
                                            int        typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type,
                   actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
                                               int       typecode,
                                               int*      is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject*      py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary,
                                 int*           is_new_object,
                                 int            min_dims,
                                 int            max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                              array_type(ary),
                                                              min_dims,
                                                              max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
   * If so, return the input pointer, but do not flag it as not a new
   * object.  If it is not Fortran-contiguous, create a new
   * PyArrayObject using the original data, flag it as a new object
   * and return the pointer.
   */
  PyArrayObject* make_fortran(PyArrayObject* ary,
                              int*           is_new_object)
  {
    PyArrayObject* result;
    if (array_is_fortran(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      Py_INCREF(array_descr(ary));
      result = (PyArrayObject*) PyArray_FromArray(ary,
                                                  array_descr(ary),
                                                  NPY_ARRAY_F_CONTIGUOUS);
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int       typecode,
                                                          int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }

  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
   * specified type.  If the input object is not a Fortran-ordered
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
                                                       int       typecode,
                                                       int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_fortran(ary1, &is_new2);
      if (is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }


  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Test whether a python object is (C_ or F_) contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_c_or_f_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!(array_is_contiguous(ary) || array_is_fortran(ary)))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous (C_ or F_).  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary,
                         int            exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions,
                   array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary,
                           int*           exact_dimensions,
                           int            n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str,
                   array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary,
                   npy_intp*      size,
                   int            n)
  {
    int i;
    int success = 1;
    int len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims,
                   actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to to be Fortran ordered.  If the
   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
   * set the Fortran ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    npy_intp * strides = array_strides(ary);
    if (array_is_fortran(ary)) return success;
    /* Set the Fortran ordered flag */
    array_enableflags(ary,NPY_ARRAY_FARRAY);
    /* Recompute the strides */
    strides[0] = strides[nd-1];
    for (i=1; i < nd; ++i)
      strides[i] = strides[i-1] * array_size(ary,i-1);
    return success;
  }



#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_distance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_equal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_advance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___isub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UDPBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_UDPBase", 0, 0, 0)) SWIG_fail;
  result = (CTA::TargetDriver::UDPBase *)new CTA::TargetDriver::UDPBase();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__UDPBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UDPBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPBase *arg1 = (CTA::TargetDriver::UDPBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UDPBase" "', argument " "1"" of type '" "CTA::TargetDriver::UDPBase *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPBase * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPBase_Receive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPBase *arg1 = (CTA::TargetDriver::UDPBase *) 0 ;
  void *arg2 = (void *) 0 ;
  ssize_t *arg3 = 0 ;
  uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "UDPBase_Receive", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPBase_Receive" "', argument " "1"" of type '" "CTA::TargetDriver::UDPBase *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UDPBase_Receive" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ssize_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UDPBase_Receive" "', argument " "3"" of type '" "ssize_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UDPBase_Receive" "', argument " "3"" of type '" "ssize_t &""'"); 
  }
  arg3 = reinterpret_cast< ssize_t * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "UDPBase_Receive" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  result = (int)(arg1)->Receive(arg2,*arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPBase_CloseSocket(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPBase *arg1 = (CTA::TargetDriver::UDPBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPBase_CloseSocket" "', argument " "1"" of type '" "CTA::TargetDriver::UDPBase *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPBase * >(argp1);
  (arg1)->CloseSocket();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPBase_ReturnCodeToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPBase *arg1 = (CTA::TargetDriver::UDPBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "UDPBase_ReturnCodeToString", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPBase_ReturnCodeToString" "', argument " "1"" of type '" "CTA::TargetDriver::UDPBase *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UDPBase_ReturnCodeToString" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->ReturnCodeToString(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPBase_SetVerbose__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPBase *arg1 = (CTA::TargetDriver::UDPBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPBase_SetVerbose" "', argument " "1"" of type '" "CTA::TargetDriver::UDPBase *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UDPBase_SetVerbose" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetVerbose(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPBase_SetVerbose__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPBase *arg1 = (CTA::TargetDriver::UDPBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPBase_SetVerbose" "', argument " "1"" of type '" "CTA::TargetDriver::UDPBase *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPBase * >(argp1);
  (arg1)->SetVerbose();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPBase_SetVerbose(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "UDPBase_SetVerbose", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__UDPBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_UDPBase_SetVerbose__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__UDPBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UDPBase_SetVerbose__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'UDPBase_SetVerbose'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::UDPBase::SetVerbose(bool)\n"
    "    CTA::TargetDriver::UDPBase::SetVerbose()\n");
  return 0;
}


SWIGINTERN PyObject *UDPBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__UDPBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UDPBase_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_UDPClient__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  uint8_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  CTA::TargetDriver::UDPClient *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UDPClient" "', argument " "1"" of type '" "uint8_t""'");
  } 
  arg1 = static_cast< uint8_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UDPClient" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_UDPClient" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (CTA::TargetDriver::UDPClient *)new CTA::TargetDriver::UDPClient(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__UDPClient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UDPClient__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  uint8_t arg1 ;
  uint32_t arg2 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  CTA::TargetDriver::UDPClient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UDPClient" "', argument " "1"" of type '" "uint8_t""'");
  } 
  arg1 = static_cast< uint8_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UDPClient" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (CTA::TargetDriver::UDPClient *)new CTA::TargetDriver::UDPClient(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__UDPClient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UDPClient__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  uint8_t arg1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  CTA::TargetDriver::UDPClient *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UDPClient" "', argument " "1"" of type '" "uint8_t""'");
  } 
  arg1 = static_cast< uint8_t >(val1);
  result = (CTA::TargetDriver::UDPClient *)new CTA::TargetDriver::UDPClient(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__UDPClient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UDPClient__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPClient *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (CTA::TargetDriver::UDPClient *)new CTA::TargetDriver::UDPClient();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__UDPClient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UDPClient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_UDPClient", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_UDPClient__SWIG_3(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UDPClient__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_UDPClient__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_UDPClient__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_UDPClient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::UDPClient::UDPClient(uint8_t,uint32_t,uint32_t)\n"
    "    CTA::TargetDriver::UDPClient::UDPClient(uint8_t,uint32_t)\n"
    "    CTA::TargetDriver::UDPClient::UDPClient(uint8_t)\n"
    "    CTA::TargetDriver::UDPClient::UDPClient()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_UDPClient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPClient *arg1 = (CTA::TargetDriver::UDPClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPClient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UDPClient" "', argument " "1"" of type '" "CTA::TargetDriver::UDPClient *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPClient * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPClient_ConnectToServer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPClient *arg1 = (CTA::TargetDriver::UDPClient *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  std::string *arg4 = 0 ;
  uint16_t arg5 ;
  int32_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int result;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPClient_ConnectToServer" "', argument " "1"" of type '" "CTA::TargetDriver::UDPClient *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPClient * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UDPClient_ConnectToServer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UDPClient_ConnectToServer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UDPClient_ConnectToServer" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "UDPClient_ConnectToServer" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UDPClient_ConnectToServer" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_short(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "UDPClient_ConnectToServer" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "UDPClient_ConnectToServer" "', argument " "6"" of type '" "int32_t""'");
  } 
  arg6 = static_cast< int32_t >(val6);
  result = (int)(arg1)->ConnectToServer((std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPClient_ConnectToServer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPClient *arg1 = (CTA::TargetDriver::UDPClient *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  std::string *arg4 = 0 ;
  uint16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  int result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPClient_ConnectToServer" "', argument " "1"" of type '" "CTA::TargetDriver::UDPClient *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPClient * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UDPClient_ConnectToServer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UDPClient_ConnectToServer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UDPClient_ConnectToServer" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "UDPClient_ConnectToServer" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UDPClient_ConnectToServer" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_short(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "UDPClient_ConnectToServer" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  result = (int)(arg1)->ConnectToServer((std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPClient_ConnectToServer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "UDPClient_ConnectToServer", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__UDPClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_UDPClient_ConnectToServer__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__UDPClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_UDPClient_ConnectToServer__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'UDPClient_ConnectToServer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::UDPClient::ConnectToServer(std::string const &,uint16_t,std::string const &,uint16_t,int32_t)\n"
    "    CTA::TargetDriver::UDPClient::ConnectToServer(std::string const &,uint16_t,std::string const &,uint16_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UDPClient_AddDataListener__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPClient *arg1 = (CTA::TargetDriver::UDPClient *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  int32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPClient_AddDataListener" "', argument " "1"" of type '" "CTA::TargetDriver::UDPClient *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPClient * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UDPClient_AddDataListener" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UDPClient_AddDataListener" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UDPClient_AddDataListener" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "UDPClient_AddDataListener" "', argument " "4"" of type '" "int32_t""'");
  } 
  arg4 = static_cast< int32_t >(val4);
  result = (int)(arg1)->AddDataListener((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPClient_AddDataListener__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPClient *arg1 = (CTA::TargetDriver::UDPClient *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPClient_AddDataListener" "', argument " "1"" of type '" "CTA::TargetDriver::UDPClient *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPClient * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UDPClient_AddDataListener" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UDPClient_AddDataListener" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UDPClient_AddDataListener" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (int)(arg1)->AddDataListener((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPClient_AddDataListener(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "UDPClient_AddDataListener", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__UDPClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UDPClient_AddDataListener__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__UDPClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_UDPClient_AddDataListener__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'UDPClient_AddDataListener'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::UDPClient::AddDataListener(std::string const &,uint16_t,int32_t)\n"
    "    CTA::TargetDriver::UDPClient::AddDataListener(std::string const &,uint16_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UDPClient_CloseSockets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPClient *arg1 = (CTA::TargetDriver::UDPClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPClient_CloseSockets" "', argument " "1"" of type '" "CTA::TargetDriver::UDPClient *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPClient * >(argp1);
  (arg1)->CloseSockets();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPClient_CloseDataListenerSockets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPClient *arg1 = (CTA::TargetDriver::UDPClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPClient_CloseDataListenerSockets" "', argument " "1"" of type '" "CTA::TargetDriver::UDPClient *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPClient * >(argp1);
  (arg1)->CloseDataListenerSockets();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPClient_GetDataPacket(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPClient *arg1 = (CTA::TargetDriver::UDPClient *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t *arg3 = 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "UDPClient_GetDataPacket", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPClient_GetDataPacket" "', argument " "1"" of type '" "CTA::TargetDriver::UDPClient *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPClient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UDPClient_GetDataPacket" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UDPClient_GetDataPacket" "', argument " "3"" of type '" "uint32_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UDPClient_GetDataPacket" "', argument " "3"" of type '" "uint32_t &""'"); 
  }
  arg3 = reinterpret_cast< uint32_t * >(argp3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "UDPClient_GetDataPacket" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  result = (int)(arg1)->GetDataPacket(arg2,*arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPClient_SendAndReceive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPClient *arg1 = (CTA::TargetDriver::UDPClient *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  ssize_t *arg5 = 0 ;
  uint32_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *temp4 ;
  ssize_t temp5 ;
  int res5 = SWIG_TMPOBJ ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  {
    arg4 = &temp4;
  }
  arg5 = &temp5;
  if (!SWIG_Python_UnpackTuple(args, "UDPClient_SendAndReceive", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPClient_SendAndReceive" "', argument " "1"" of type '" "CTA::TargetDriver::UDPClient *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPClient * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UDPClient_SendAndReceive" "', argument " "2"" of type '" "void const *""'");
  }
  arg2 = reinterpret_cast< void * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UDPClient_SendAndReceive" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode6 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "UDPClient_SendAndReceive" "', argument " "6"" of type '" "uint32_t""'");
  } 
  arg6 = static_cast< uint32_t >(val6);
  result = (int)(arg1)->SendAndReceive((void const *)arg2,arg3,arg4,*arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    resultobj = PyString_FromString(static_cast<const char*>(arg4));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_size_t((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_ssize_t, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPClient_SetMaxAttempts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPClient *arg1 = (CTA::TargetDriver::UDPClient *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "UDPClient_SetMaxAttempts", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPClient_SetMaxAttempts" "', argument " "1"" of type '" "CTA::TargetDriver::UDPClient *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UDPClient_SetMaxAttempts" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  (arg1)->SetMaxAttempts(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UDPClient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__UDPClient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UDPClient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_UDPServer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint32_t arg4 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  CTA::TargetDriver::UDPServer *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UDPServer" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UDPServer" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UDPServer" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_UDPServer" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_UDPServer" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  result = (CTA::TargetDriver::UDPServer *)new CTA::TargetDriver::UDPServer((std::string const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__UDPServer, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UDPServer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  CTA::TargetDriver::UDPServer *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UDPServer" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UDPServer" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UDPServer" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_UDPServer" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (CTA::TargetDriver::UDPServer *)new CTA::TargetDriver::UDPServer((std::string const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__UDPServer, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UDPServer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_UDPServer", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_UDPServer__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_UDPServer__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_UDPServer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::UDPServer::UDPServer(std::string const &,uint16_t,uint16_t,uint32_t)\n"
    "    CTA::TargetDriver::UDPServer::UDPServer(std::string const &,uint16_t,uint16_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_UDPServer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPServer *arg1 = (CTA::TargetDriver::UDPServer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPServer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UDPServer" "', argument " "1"" of type '" "CTA::TargetDriver::UDPServer *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPServer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPServer_SendResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPServer *arg1 = (CTA::TargetDriver::UDPServer *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "UDPServer_SendResponse", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPServer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPServer_SendResponse" "', argument " "1"" of type '" "CTA::TargetDriver::UDPServer *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPServer * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UDPServer_SendResponse" "', argument " "2"" of type '" "void const *""'");
  }
  arg2 = reinterpret_cast< void * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UDPServer_SendResponse" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (int)(arg1)->SendResponse((void const *)arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPServer_SendDataPacket(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPServer *arg1 = (CTA::TargetDriver::UDPServer *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "UDPServer_SendDataPacket", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPServer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPServer_SendDataPacket" "', argument " "1"" of type '" "CTA::TargetDriver::UDPServer *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPServer * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UDPServer_SendDataPacket" "', argument " "2"" of type '" "void const *""'");
  }
  arg2 = reinterpret_cast< void * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UDPServer_SendDataPacket" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (int)(arg1)->SendDataPacket((void const *)arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UDPServer_Setup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::UDPServer *arg1 = (CTA::TargetDriver::UDPServer *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  uint32_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "UDPServer_Setup", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__UDPServer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UDPServer_Setup" "', argument " "1"" of type '" "CTA::TargetDriver::UDPServer *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::UDPServer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UDPServer_Setup" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UDPServer_Setup" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UDPServer_Setup" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "UDPServer_Setup" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "UDPServer_Setup" "', argument " "5"" of type '" "uint32_t""'");
  } 
  arg5 = static_cast< uint32_t >(val5);
  result = (int)(arg1)->Setup((std::string const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *UDPServer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__UDPServer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UDPServer_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TargetModule__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  uint16_t arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  CTA::TargetDriver::TargetModule *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TargetModule" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  result = (CTA::TargetDriver::TargetModule *)new CTA::TargetDriver::TargetModule(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__TargetModule, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TargetModule__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (CTA::TargetDriver::TargetModule *)new CTA::TargetDriver::TargetModule();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__TargetModule, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TargetModule__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  CTA::TargetDriver::TargetModule *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TargetModule" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TargetModule" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TargetModule" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TargetModule" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TargetModule" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (CTA::TargetDriver::TargetModule *)new CTA::TargetDriver::TargetModule((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__TargetModule, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TargetModule__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  CTA::TargetDriver::TargetModule *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TargetModule" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TargetModule" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TargetModule" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TargetModule" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (CTA::TargetDriver::TargetModule *)new CTA::TargetDriver::TargetModule((std::string const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__TargetModule, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TargetModule__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint16_t arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  CTA::TargetDriver::TargetModule *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TargetModule" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TargetModule" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TargetModule" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TargetModule" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TargetModule" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TargetModule" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TargetModule" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  result = (CTA::TargetDriver::TargetModule *)new CTA::TargetDriver::TargetModule((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__TargetModule, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TargetModule__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  CTA::TargetDriver::TargetModule *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TargetModule" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TargetModule" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TargetModule" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TargetModule" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TargetModule" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TargetModule" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (CTA::TargetDriver::TargetModule *)new CTA::TargetDriver::TargetModule((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__TargetModule, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TargetModule(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_TargetModule", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_TargetModule__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TargetModule__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TargetModule__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_TargetModule__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_TargetModule__SWIG_5(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_TargetModule__SWIG_4(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_TargetModule'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::TargetModule::TargetModule(uint16_t)\n"
    "    CTA::TargetDriver::TargetModule::TargetModule()\n"
    "    CTA::TargetDriver::TargetModule::TargetModule(std::string const &,std::string const &,uint16_t)\n"
    "    CTA::TargetDriver::TargetModule::TargetModule(std::string const &,std::string const &)\n"
    "    CTA::TargetDriver::TargetModule::TargetModule(std::string const &,std::string const &,std::string const &,uint16_t)\n"
    "    CTA::TargetDriver::TargetModule::TargetModule(std::string const &,std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TargetModule_SetIPAddresses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_SetIPAddresses", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_SetIPAddresses" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_SetIPAddresses" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_SetIPAddresses" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TargetModule_SetIPAddresses" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_SetIPAddresses" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->SetIPAddresses((std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_SetClientIP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_SetClientIP", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_SetClientIP" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_SetClientIP" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_SetClientIP" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetClientIP((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_SetModuleIP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_SetModuleIP", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_SetModuleIP" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_SetModuleIP" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_SetModuleIP" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetModuleIP((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_Exists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_Exists", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_Exists" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "TargetModule_Exists" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "TargetModule_Exists" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->Exists(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_Connect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_Connect" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->Connect();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_EstablishSlowControlLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_EstablishSlowControlLink", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_EstablishSlowControlLink" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_EstablishSlowControlLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_EstablishSlowControlLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TargetModule_EstablishSlowControlLink" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_EstablishSlowControlLink" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (int)(arg1)->EstablishSlowControlLink((std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_AddDAQListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_AddDAQListener", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_AddDAQListener" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_AddDAQListener" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_AddDAQListener" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->AddDAQListener((std::string const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_PackControlPacket(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_PackControlPacket", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_PackControlPacket" "', argument " "1"" of type '" "uint8_t *""'"); 
  }
  arg1 = reinterpret_cast< uint8_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_PackControlPacket" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_PackControlPacket" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_PackControlPacket" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  CTA::TargetDriver::TargetModule::PackControlPacket(arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_UnpackControlPacket(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t *arg2 = 0 ;
  uint32_t *arg3 = 0 ;
  bool *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  uint32_t temp3 ;
  int res3 = SWIG_TMPOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  arg3 = &temp3;
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_UnpackControlPacket", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_UnpackControlPacket" "', argument " "1"" of type '" "uint8_t const *""'"); 
  }
  arg1 = reinterpret_cast< uint8_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_UnpackControlPacket" "', argument " "2"" of type '" "uint32_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_UnpackControlPacket" "', argument " "2"" of type '" "uint32_t &""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);
  res4 = SWIG_ConvertPtr(swig_obj[2], &argp4, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TargetModule_UnpackControlPacket" "', argument " "4"" of type '" "bool &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_UnpackControlPacket" "', argument " "4"" of type '" "bool &""'"); 
  }
  arg4 = reinterpret_cast< bool * >(argp4);
  result = (int)CTA::TargetDriver::TargetModule::UnpackControlPacket((unsigned char const *)arg1,*arg2,*arg3,*arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_unsigned_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_GetFirmwareVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint32_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_GetFirmwareVersion" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->GetFirmwareVersion(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_unsigned_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_GetPrimaryBoardID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint64_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_GetPrimaryBoardID" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->GetPrimaryBoardID(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_long_SS_long((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_unsigned_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_CheckResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint8_t *arg1 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_CheckResponse" "', argument " "1"" of type '" "uint8_t const *""'"); 
  }
  arg1 = reinterpret_cast< uint8_t * >(argp1);
  result = (int)CTA::TargetDriver::TargetModule::CheckResponse((unsigned char const *)arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_GetClockPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_GetClockPhase" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)((CTA::TargetDriver::TargetModule const *)arg1)->GetClockPhase();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_StopSampling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_StopSampling" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  (arg1)->StopSampling();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_CheckRegisters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_CheckRegisters" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->CheckRegisters();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_GoToSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_GoToSafe" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->GoToSafe();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_GoToPreSync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_GoToPreSync" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->GoToPreSync();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_GoToReady(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_GoToReady" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->GoToReady();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_IsReady(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_IsReady" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (bool)((CTA::TargetDriver::TargetModule const *)arg1)->IsReady();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_IsPreSync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_IsPreSync" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (bool)((CTA::TargetDriver::TargetModule const *)arg1)->IsPreSync();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_IsSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_IsSafe" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (bool)((CTA::TargetDriver::TargetModule const *)arg1)->IsSafe();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_IsUndefined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_IsUndefined" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (bool)((CTA::TargetDriver::TargetModule const *)arg1)->IsUndefined();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_IsContactable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_IsContactable" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (bool)((CTA::TargetDriver::TargetModule const *)arg1)->IsContactable();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_IsUnresponsive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_IsUnresponsive" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (bool)((CTA::TargetDriver::TargetModule const *)arg1)->IsUnresponsive();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_GetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_GetState" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)((CTA::TargetDriver::TargetModule const *)arg1)->GetState();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ReconnectToServer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  std::string *arg4 = 0 ;
  uint16_t arg5 ;
  int32_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int result;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_ReconnectToServer" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_ReconnectToServer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_ReconnectToServer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_ReconnectToServer" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TargetModule_ReconnectToServer" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_ReconnectToServer" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_short(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TargetModule_ReconnectToServer" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TargetModule_ReconnectToServer" "', argument " "6"" of type '" "int32_t""'");
  } 
  arg6 = static_cast< int32_t >(val6);
  result = (int)(arg1)->ReconnectToServer((std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ReconnectToServer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  std::string *arg4 = 0 ;
  uint16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  int result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_ReconnectToServer" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_ReconnectToServer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_ReconnectToServer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_ReconnectToServer" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TargetModule_ReconnectToServer" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_ReconnectToServer" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_short(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TargetModule_ReconnectToServer" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  result = (int)(arg1)->ReconnectToServer((std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ReconnectToServer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TargetModule_ReconnectToServer", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TargetModule_ReconnectToServer__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TargetModule_ReconnectToServer__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TargetModule_ReconnectToServer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::TargetModule::ReconnectToServer(std::string const &,uint16_t,std::string const &,uint16_t,int32_t)\n"
    "    CTA::TargetDriver::TargetModule::ReconnectToServer(std::string const &,uint16_t,std::string const &,uint16_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TargetModule_PrintAllRegisterSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_PrintAllRegisterSettings" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  (arg1)->PrintAllRegisterSettings();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_PrintAllRegisterValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_PrintAllRegisterValues" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  (arg1)->PrintAllRegisterValues();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_GetStateString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_GetStateString" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (arg1)->GetStateString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_WriteRegister", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteRegister" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_WriteRegister" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteRegister" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (int)(arg1)->WriteRegister(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteRegisterAndCheck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_WriteRegisterAndCheck", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteRegisterAndCheck" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_WriteRegisterAndCheck" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteRegisterAndCheck" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (int)(arg1)->WriteRegisterAndCheck(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTARGETRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  uint8_t arg8 ;
  uint16_t arg9 ;
  bool arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  unsigned short val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  int result;
  
  if ((nobjs < 10) || (nobjs > 10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "8"" of type '" "uint8_t""'");
  } 
  arg8 = static_cast< uint8_t >(val8);
  ecode9 = SWIG_AsVal_unsigned_SS_short(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "9"" of type '" "uint16_t""'");
  } 
  arg9 = static_cast< uint16_t >(val9);
  ecode10 = SWIG_AsVal_bool(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  result = (int)(arg1)->WriteTARGETRegister(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTARGETRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  uint8_t arg8 ;
  uint16_t arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  unsigned short val9 ;
  int ecode9 = 0 ;
  int result;
  
  if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "8"" of type '" "uint8_t""'");
  } 
  arg8 = static_cast< uint8_t >(val8);
  ecode9 = SWIG_AsVal_unsigned_SS_short(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "9"" of type '" "uint16_t""'");
  } 
  arg9 = static_cast< uint16_t >(val9);
  result = (int)(arg1)->WriteTARGETRegister(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTARGETRegister__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  bool arg2 ;
  bool arg3 ;
  uint8_t arg4 ;
  uint16_t arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  int result;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (int)(arg1)->WriteTARGETRegister(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTARGETRegister__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  bool arg2 ;
  bool arg3 ;
  uint8_t arg4 ;
  uint16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  int result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TargetModule_WriteTARGETRegister" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  result = (int)(arg1)->WriteTARGETRegister(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTARGETRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[11] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TargetModule_WriteTARGETRegister", 0, 10, argv))) SWIG_fail;
  --argc;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TargetModule_WriteTARGETRegister__SWIG_3(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TargetModule_WriteTARGETRegister__SWIG_2(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_unsigned_SS_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_unsigned_SS_short(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_TargetModule_WriteTARGETRegister__SWIG_1(self, argc, argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_unsigned_SS_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_unsigned_SS_short(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_bool(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_TargetModule_WriteTARGETRegister__SWIG_0(self, argc, argv);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TargetModule_WriteTARGETRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::TargetModule::WriteTARGETRegister(bool,bool,bool,bool,bool,bool,uint8_t,uint16_t,bool)\n"
    "    CTA::TargetDriver::TargetModule::WriteTARGETRegister(bool,bool,bool,bool,bool,bool,uint8_t,uint16_t)\n"
    "    CTA::TargetDriver::TargetModule::WriteTARGETRegister(bool,bool,uint8_t,uint16_t,bool)\n"
    "    CTA::TargetDriver::TargetModule::WriteTARGETRegister(bool,bool,uint8_t,uint16_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteSetting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_WriteSetting", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteSetting" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteSetting" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (int)(arg1)->WriteSetting((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ReadSetting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint32_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  uint32_t temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject *swig_obj[2] ;
  int result;
  
  arg3 = &temp3;
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_ReadSetting", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_ReadSetting" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_ReadSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_ReadSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->ReadSetting((std::string const &)*arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_unsigned_int, new_flags));
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteSettingFromConfig(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_WriteSettingFromConfig", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteSettingFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->WriteSettingFromConfig((std::string const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteRegisterFromConfig(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_WriteRegisterFromConfig", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteRegisterFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_WriteRegisterFromConfig" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (int)(arg1)->WriteRegisterFromConfig(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteASICSetting__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  int result;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteASICSetting" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteASICSetting" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteASICSetting" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TargetModule_WriteASICSetting" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TargetModule_WriteASICSetting" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (int)(arg1)->WriteASICSetting((std::string const &)*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteASICSetting__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteASICSetting" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteASICSetting" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteASICSetting" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TargetModule_WriteASICSetting" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (int)(arg1)->WriteASICSetting((std::string const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteASICSetting__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteASICSetting" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteASICSetting" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteASICSetting" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  result = (int)(arg1)->WriteASICSetting((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteASICSetting(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TargetModule_WriteASICSetting", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TargetModule_WriteASICSetting__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TargetModule_WriteASICSetting__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TargetModule_WriteASICSetting__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TargetModule_WriteASICSetting'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::TargetModule::WriteASICSetting(std::string const &,uint8_t,uint16_t,bool,bool)\n"
    "    CTA::TargetDriver::TargetModule::WriteASICSetting(std::string const &,uint8_t,uint16_t,bool)\n"
    "    CTA::TargetDriver::TargetModule::WriteASICSetting(std::string const &,uint8_t,uint16_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTriggerASICSetting__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteTriggerASICSetting" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteTriggerASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteTriggerASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteTriggerASICSetting" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteTriggerASICSetting" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TargetModule_WriteTriggerASICSetting" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (int)(arg1)->WriteTriggerASICSetting((std::string const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTriggerASICSetting__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteTriggerASICSetting" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteTriggerASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteTriggerASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteTriggerASICSetting" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteTriggerASICSetting" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  result = (int)(arg1)->WriteTriggerASICSetting((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTriggerASICSetting(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TargetModule_WriteTriggerASICSetting", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TargetModule_WriteTriggerASICSetting__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TargetModule_WriteTriggerASICSetting__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TargetModule_WriteTriggerASICSetting'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::TargetModule::WriteTriggerASICSetting(std::string const &,uint8_t,uint16_t,bool)\n"
    "    CTA::TargetDriver::TargetModule::WriteTriggerASICSetting(std::string const &,uint8_t,uint16_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteASICRegisterFromConfig__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteASICRegisterFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_WriteASICRegisterFromConfig" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteASICRegisterFromConfig" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteASICRegisterFromConfig" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TargetModule_WriteASICRegisterFromConfig" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (int)(arg1)->WriteASICRegisterFromConfig(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteASICRegisterFromConfig__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteASICRegisterFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_WriteASICRegisterFromConfig" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteASICRegisterFromConfig" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteASICRegisterFromConfig" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (int)(arg1)->WriteASICRegisterFromConfig(arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteASICRegisterFromConfig__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteASICRegisterFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_WriteASICRegisterFromConfig" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteASICRegisterFromConfig" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  result = (int)(arg1)->WriteASICRegisterFromConfig(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteASICRegisterFromConfig__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteASICRegisterFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_WriteASICRegisterFromConfig" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->WriteASICRegisterFromConfig(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteASICRegisterFromConfig(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TargetModule_WriteASICRegisterFromConfig", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TargetModule_WriteASICRegisterFromConfig__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TargetModule_WriteASICRegisterFromConfig__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TargetModule_WriteASICRegisterFromConfig__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TargetModule_WriteASICRegisterFromConfig__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TargetModule_WriteASICRegisterFromConfig'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::TargetModule::WriteASICRegisterFromConfig(uint8_t,uint8_t,bool,bool)\n"
    "    CTA::TargetDriver::TargetModule::WriteASICRegisterFromConfig(uint8_t,uint8_t,bool)\n"
    "    CTA::TargetDriver::TargetModule::WriteASICRegisterFromConfig(uint8_t,uint8_t)\n"
    "    CTA::TargetDriver::TargetModule::WriteASICRegisterFromConfig(uint8_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTriggerASICRegisterFromConfig__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteTriggerASICRegisterFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_WriteTriggerASICRegisterFromConfig" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteTriggerASICRegisterFromConfig" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteTriggerASICRegisterFromConfig" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (int)(arg1)->WriteTriggerASICRegisterFromConfig(arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTriggerASICRegisterFromConfig__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteTriggerASICRegisterFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_WriteTriggerASICRegisterFromConfig" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteTriggerASICRegisterFromConfig" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  result = (int)(arg1)->WriteTriggerASICRegisterFromConfig(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTriggerASICRegisterFromConfig__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteTriggerASICRegisterFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_WriteTriggerASICRegisterFromConfig" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->WriteTriggerASICRegisterFromConfig(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTriggerASICRegisterFromConfig(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TargetModule_WriteTriggerASICRegisterFromConfig", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TargetModule_WriteTriggerASICRegisterFromConfig__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TargetModule_WriteTriggerASICRegisterFromConfig__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TargetModule_WriteTriggerASICRegisterFromConfig__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TargetModule_WriteTriggerASICRegisterFromConfig'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::TargetModule::WriteTriggerASICRegisterFromConfig(uint8_t,uint8_t,bool)\n"
    "    CTA::TargetDriver::TargetModule::WriteTriggerASICRegisterFromConfig(uint8_t,uint8_t)\n"
    "    CTA::TargetDriver::TargetModule::WriteTriggerASICRegisterFromConfig(uint8_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteASICSettingFromConfig__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (int)(arg1)->WriteASICSettingFromConfig((std::string const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteASICSettingFromConfig__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (int)(arg1)->WriteASICSettingFromConfig((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteASICSettingFromConfig__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  result = (int)(arg1)->WriteASICSettingFromConfig((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteASICSettingFromConfig__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteASICSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->WriteASICSettingFromConfig((std::string const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteASICSettingFromConfig(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TargetModule_WriteASICSettingFromConfig", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TargetModule_WriteASICSettingFromConfig__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TargetModule_WriteASICSettingFromConfig__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TargetModule_WriteASICSettingFromConfig__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TargetModule_WriteASICSettingFromConfig__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TargetModule_WriteASICSettingFromConfig'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::TargetModule::WriteASICSettingFromConfig(std::string const &,uint8_t,bool,bool)\n"
    "    CTA::TargetDriver::TargetModule::WriteASICSettingFromConfig(std::string const &,uint8_t,bool)\n"
    "    CTA::TargetDriver::TargetModule::WriteASICSettingFromConfig(std::string const &,uint8_t)\n"
    "    CTA::TargetDriver::TargetModule::WriteASICSettingFromConfig(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTriggerASICSettingFromConfig__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteTriggerASICSettingFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteTriggerASICSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteTriggerASICSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteTriggerASICSettingFromConfig" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteTriggerASICSettingFromConfig" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (int)(arg1)->WriteTriggerASICSettingFromConfig((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTriggerASICSettingFromConfig__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteTriggerASICSettingFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteTriggerASICSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteTriggerASICSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteTriggerASICSettingFromConfig" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  result = (int)(arg1)->WriteTriggerASICSettingFromConfig((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTriggerASICSettingFromConfig__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteTriggerASICSettingFromConfig" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteTriggerASICSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteTriggerASICSettingFromConfig" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->WriteTriggerASICSettingFromConfig((std::string const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteTriggerASICSettingFromConfig(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TargetModule_WriteTriggerASICSettingFromConfig", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TargetModule_WriteTriggerASICSettingFromConfig__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TargetModule_WriteTriggerASICSettingFromConfig__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TargetModule_WriteTriggerASICSettingFromConfig__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TargetModule_WriteTriggerASICSettingFromConfig'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::TargetModule::WriteTriggerASICSettingFromConfig(std::string const &,uint8_t,bool)\n"
    "    CTA::TargetDriver::TargetModule::WriteTriggerASICSettingFromConfig(std::string const &,uint8_t)\n"
    "    CTA::TargetDriver::TargetModule::WriteTriggerASICSettingFromConfig(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteSettingCalibrated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_WriteSettingCalibrated", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteSettingCalibrated" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteSettingCalibrated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteSettingCalibrated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteSettingCalibrated" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (int)(arg1)->WriteSettingCalibrated((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ReadSettingCalibrated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject *swig_obj[2] ;
  int result;
  
  arg3 = &temp3;
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_ReadSettingCalibrated", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_ReadSettingCalibrated" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_ReadSettingCalibrated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_ReadSettingCalibrated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->ReadSettingCalibrated((std::string const &)*arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_float((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags));
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteSettingASICCalibrated__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  float arg4 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  int result;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (int)(arg1)->WriteSettingASICCalibrated((std::string const &)*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteSettingASICCalibrated__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  float arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (int)(arg1)->WriteSettingASICCalibrated((std::string const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteSettingASICCalibrated__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteSettingASICCalibrated" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (int)(arg1)->WriteSettingASICCalibrated((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteSettingASICCalibrated(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TargetModule_WriteSettingASICCalibrated", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TargetModule_WriteSettingASICCalibrated__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TargetModule_WriteSettingASICCalibrated__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TargetModule_WriteSettingASICCalibrated__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TargetModule_WriteSettingASICCalibrated'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::TargetModule::WriteSettingASICCalibrated(std::string const &,uint8_t,float,bool,bool)\n"
    "    CTA::TargetDriver::TargetModule::WriteSettingASICCalibrated(std::string const &,uint8_t,float,bool)\n"
    "    CTA::TargetDriver::TargetModule::WriteSettingASICCalibrated(std::string const &,uint8_t,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteSettingTriggerASICCalibrated__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  float arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteSettingTriggerASICCalibrated" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteSettingTriggerASICCalibrated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteSettingTriggerASICCalibrated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteSettingTriggerASICCalibrated" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteSettingTriggerASICCalibrated" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TargetModule_WriteSettingTriggerASICCalibrated" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (int)(arg1)->WriteSettingTriggerASICCalibrated((std::string const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteSettingTriggerASICCalibrated__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WriteSettingTriggerASICCalibrated" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WriteSettingTriggerASICCalibrated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WriteSettingTriggerASICCalibrated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_WriteSettingTriggerASICCalibrated" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TargetModule_WriteSettingTriggerASICCalibrated" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (int)(arg1)->WriteSettingTriggerASICCalibrated((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WriteSettingTriggerASICCalibrated(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TargetModule_WriteSettingTriggerASICCalibrated", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TargetModule_WriteSettingTriggerASICCalibrated__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TargetModule_WriteSettingTriggerASICCalibrated__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TargetModule_WriteSettingTriggerASICCalibrated'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::TargetModule::WriteSettingTriggerASICCalibrated(std::string const &,uint8_t,float,bool)\n"
    "    CTA::TargetDriver::TargetModule::WriteSettingTriggerASICCalibrated(std::string const &,uint8_t,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TargetModule_PowerUpASIC__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_PowerUpASIC" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_PowerUpASIC" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_PowerUpASIC" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (int)(arg1)->PowerUpASIC(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_PowerUpASIC__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_PowerUpASIC" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_PowerUpASIC" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->PowerUpASIC(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_PowerUpASIC__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_PowerUpASIC" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->PowerUpASIC();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_PowerUpASIC(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TargetModule_PowerUpASIC", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TargetModule_PowerUpASIC__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TargetModule_PowerUpASIC__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TargetModule_PowerUpASIC__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TargetModule_PowerUpASIC'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::TargetModule::PowerUpASIC(uint8_t,bool)\n"
    "    CTA::TargetDriver::TargetModule::PowerUpASIC(uint8_t)\n"
    "    CTA::TargetDriver::TargetModule::PowerUpASIC()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TargetModule_Initialise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_Initialise" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->Initialise();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_EnableDLLFeedback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_EnableDLLFeedback" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->EnableDLLFeedback();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_DisableDLLFeedBack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_DisableDLLFeedBack" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->DisableDLLFeedBack();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ReadRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint32_t arg2 ;
  uint32_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  uint32_t temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject *swig_obj[2] ;
  int result;
  
  arg3 = &temp3;
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_ReadRegister", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_ReadRegister" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_ReadRegister" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (int)(arg1)->ReadRegister(arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_unsigned_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_FillRegisterMapFromFPGA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_FillRegisterMapFromFPGA" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->FillRegisterMapFromFPGA();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_DataPortPing__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_DataPortPing" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_DataPortPing" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_DataPortPing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_DataPortPing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  CTA::TargetDriver::TargetModule::DataPortPing((std::string const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_DataPortPing__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_DataPortPing" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  (arg1)->DataPortPing();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_DataPortPing(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TargetModule_DataPortPing", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TargetModule_DataPortPing__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TargetModule_DataPortPing__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TargetModule_DataPortPing'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::TargetModule::DataPortPing(std::string const &,std::string const &)\n"
    "    CTA::TargetDriver::TargetModule::DataPortPing()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TargetModule_DeleteDAQListeners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_DeleteDAQListeners" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  (arg1)->DeleteDAQListeners();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_QueryAndPrintAllRegisters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_QueryAndPrintAllRegisters", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_QueryAndPrintAllRegisters" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_QueryAndPrintAllRegisters" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_QueryAndPrintAllRegisters" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  (arg1)->QueryAndPrintAllRegisters(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ReadHVCurrentInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_ReadHVCurrentInput" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->ReadHVCurrentInput(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_float((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ReadHVVoltageInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_ReadHVVoltageInput" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->ReadHVVoltageInput(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_float((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_GetTempI2CPower(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_GetTempI2CPower" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->GetTempI2CPower(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_float((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_GetTempI2CAux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_GetTempI2CAux" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->GetTempI2CAux(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_float((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_GetTempI2CPrimary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_GetTempI2CPrimary" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->GetTempI2CPrimary(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_float((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_GetTempSIPM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_GetTempSIPM" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->GetTempSIPM(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_float((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ReadPowerBoardID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint64_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_ReadPowerBoardID" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->ReadPowerBoardID(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_long_SS_long((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_unsigned_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ReadHVEnableBytes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t *arg2 = 0 ;
  uint8_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_ReadHVEnableBytes", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_ReadHVEnableBytes" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_char,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_ReadHVEnableBytes" "', argument " "2"" of type '" "uint8_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_ReadHVEnableBytes" "', argument " "2"" of type '" "uint8_t &""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_unsigned_char,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TargetModule_ReadHVEnableBytes" "', argument " "3"" of type '" "uint8_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_ReadHVEnableBytes" "', argument " "3"" of type '" "uint8_t &""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  result = (int)(arg1)->ReadHVEnableBytes(*arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_IsHVEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject *swig_obj[2] ;
  int result;
  
  arg3 = &temp3;
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_IsHVEnabled", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_IsHVEnabled" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_IsHVEnabled" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->IsHVEnabled(arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_bool((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_bool, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_WhichHVEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  std::vector< bool > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_WhichHVEnabled", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_WhichHVEnabled" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_bool_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_WhichHVEnabled" "', argument " "2"" of type '" "std::vector< bool > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_WhichHVEnabled" "', argument " "2"" of type '" "std::vector< bool > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bool > * >(argp2);
  result = (int)(arg1)->WhichHVEnabled(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_DisableHVSuperPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_DisableHVSuperPixel", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_DisableHVSuperPixel" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_DisableHVSuperPixel" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->DisableHVSuperPixel(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_EnableHVSuperPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_EnableHVSuperPixel", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_EnableHVSuperPixel" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_EnableHVSuperPixel" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->EnableHVSuperPixel(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_DisableHVAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_DisableHVAll" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->DisableHVAll();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_EnableHVAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_EnableHVAll" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->EnableHVAll();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_SetHVDAC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_SetHVDAC", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_SetHVDAC" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_SetHVDAC" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TargetModule_SetHVDAC" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  result = (int)(arg1)->SetHVDAC(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ReadHVDAC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  uint8_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  uint8_t temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject *swig_obj[2] ;
  int result;
  
  arg3 = &temp3;
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_ReadHVDAC", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_ReadHVDAC" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_ReadHVDAC" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->ReadHVDAC(arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_char((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_unsigned_char, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_SetHVDACAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_SetHVDACAll", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_SetHVDACAll" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_SetHVDACAll" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->SetHVDACAll(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_SuperPixelIdToI2CAddr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_SuperPixelIdToI2CAddr", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_SuperPixelIdToI2CAddr" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_SuperPixelIdToI2CAddr" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->SuperPixelIdToI2CAddr(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_SuperPixelIdToI2CRegAddr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_SuperPixelIdToI2CRegAddr", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_SuperPixelIdToI2CRegAddr" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_SuperPixelIdToI2CRegAddr" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->SuperPixelIdToI2CRegAddr(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_SuperPixelIdToHVEneableBit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_SuperPixelIdToHVEneableBit", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_SuperPixelIdToHVEneableBit" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_SuperPixelIdToHVEneableBit" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->SuperPixelIdToHVEneableBit(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_GetHVSuperPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  float *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject *swig_obj[2] ;
  int result;
  
  arg3 = &temp3;
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_GetHVSuperPixel", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_GetHVSuperPixel" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_GetHVSuperPixel" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->GetHVSuperPixel(arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_float((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ModifyModuleIP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_ModifyModuleIP", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_ModifyModuleIP" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_ModifyModuleIP" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->ModifyModuleIP(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ReadModuleIP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint8_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_ReadModuleIP" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  result = (int)(arg1)->ReadModuleIP(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_char((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_unsigned_char, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ModifyModuleIdentifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_ModifyModuleIdentifier", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_ModifyModuleIdentifier" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TargetModule_ModifyModuleIdentifier" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  result = (int)(arg1)->ModifyModuleIdentifier(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TargetModule_ReadModuleIdentifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  uint16_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TargetModule_ReadModuleIdentifier", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TargetModule_ReadModuleIdentifier" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TargetModule_ReadModuleIdentifier" "', argument " "2"" of type '" "uint16_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TargetModule_ReadModuleIdentifier" "', argument " "2"" of type '" "uint16_t &""'"); 
  }
  arg2 = reinterpret_cast< uint16_t * >(argp2);
  result = (int)(arg1)->ReadModuleIdentifier(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TargetModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TargetModule *arg1 = (CTA::TargetDriver::TargetModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TargetModule, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TargetModule" "', argument " "1"" of type '" "CTA::TargetDriver::TargetModule *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TargetModule * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TargetModule_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__TargetModule, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TargetModule_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Setting_regAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Setting_regAddr_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_regAddr_set" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Setting_regAddr_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->regAddr = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_regAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_regAddr_get" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  result = (uint32_t) ((arg1)->regAddr);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_nBits_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Setting_nBits_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_nBits_set" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Setting_nBits_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->nBits = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_nBits_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_nBits_get" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  result = (uint16_t) ((arg1)->nBits);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_startBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Setting_startBit_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_startBit_set" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Setting_startBit_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->startBit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_startBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_startBit_get" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  result = (uint16_t) ((arg1)->startBit);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Setting_value_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_value_set" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Setting_value_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->value = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_value_get" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  result = (uint32_t) ((arg1)->value);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_access_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  CTA::TargetDriver::Access arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Setting_access_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_access_set" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Setting_access_set" "', argument " "2"" of type '" "CTA::TargetDriver::Access""'");
  } 
  arg2 = static_cast< CTA::TargetDriver::Access >(val2);
  if (arg1) (arg1)->access = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_access_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  CTA::TargetDriver::Access result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_access_get" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  result = (CTA::TargetDriver::Access) ((arg1)->access);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_lowerBound_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Setting_lowerBound_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_lowerBound_set" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Setting_lowerBound_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->lowerBound = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_lowerBound_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_lowerBound_get" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  result = (uint32_t) ((arg1)->lowerBound);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_upperBound_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Setting_upperBound_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_upperBound_set" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Setting_upperBound_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->upperBound = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_upperBound_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_upperBound_get" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  result = (uint32_t) ((arg1)->upperBound);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_multiplier_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Setting_multiplier_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_multiplier_set" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Setting_multiplier_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->multiplier = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_multiplier_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  float result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_multiplier_get" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  result = (float) ((arg1)->multiplier);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_offset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Setting_offset_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_offset_set" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Setting_offset_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->offset = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_offset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  float result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_offset_get" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  result = (float) ((arg1)->offset);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_description_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Setting_description_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_description_set" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Setting_description_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Setting_description_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->description = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Setting_description_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Setting_description_get" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  result = (std::string *) & ((arg1)->description);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Setting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Setting", 0, 0, 0)) SWIG_fail;
  result = (CTA::TargetDriver::Setting *)new CTA::TargetDriver::Setting();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__Setting, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Setting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Setting *arg1 = (CTA::TargetDriver::Setting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Setting, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Setting" "', argument " "1"" of type '" "CTA::TargetDriver::Setting *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Setting_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__Setting, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Setting_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SettingASIC_settingASIC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::SettingASIC *arg1 = (CTA::TargetDriver::SettingASIC *) 0 ;
  CTA::TargetDriver::Setting *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SettingASIC_settingASIC_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__SettingASIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SettingASIC_settingASIC_set" "', argument " "1"" of type '" "CTA::TargetDriver::SettingASIC *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::SettingASIC * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SettingASIC_settingASIC_set" "', argument " "2"" of type '" "CTA::TargetDriver::Setting [4]""'"); 
  } 
  arg2 = reinterpret_cast< CTA::TargetDriver::Setting * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) *(CTA::TargetDriver::Setting *)&arg1->settingASIC[ii] = *((CTA::TargetDriver::Setting *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""settingASIC""' of type '""CTA::TargetDriver::Setting [4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SettingASIC_settingASIC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::SettingASIC *arg1 = (CTA::TargetDriver::SettingASIC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  CTA::TargetDriver::Setting *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__SettingASIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SettingASIC_settingASIC_get" "', argument " "1"" of type '" "CTA::TargetDriver::SettingASIC *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::SettingASIC * >(argp1);
  result = (CTA::TargetDriver::Setting *)(CTA::TargetDriver::Setting *) ((arg1)->settingASIC);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__Setting, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SettingASIC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::SettingASIC *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_SettingASIC", 0, 0, 0)) SWIG_fail;
  result = (CTA::TargetDriver::SettingASIC *)new CTA::TargetDriver::SettingASIC();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__SettingASIC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SettingASIC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::SettingASIC *arg1 = (CTA::TargetDriver::SettingASIC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__SettingASIC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SettingASIC" "', argument " "1"" of type '" "CTA::TargetDriver::SettingASIC *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::SettingASIC * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SettingASIC_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__SettingASIC, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SettingASIC_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RegisterFPGA_val_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterFPGA *arg1 = (CTA::TargetDriver::RegisterFPGA *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterFPGA_val_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterFPGA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterFPGA_val_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterFPGA *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterFPGA * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegisterFPGA_val_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->val = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterFPGA_val_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterFPGA *arg1 = (CTA::TargetDriver::RegisterFPGA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterFPGA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterFPGA_val_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterFPGA *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterFPGA * >(argp1);
  result = (uint32_t) ((arg1)->val);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterFPGA_access_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterFPGA *arg1 = (CTA::TargetDriver::RegisterFPGA *) 0 ;
  CTA::TargetDriver::Access arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterFPGA_access_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterFPGA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterFPGA_access_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterFPGA *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterFPGA * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegisterFPGA_access_set" "', argument " "2"" of type '" "CTA::TargetDriver::Access""'");
  } 
  arg2 = static_cast< CTA::TargetDriver::Access >(val2);
  if (arg1) (arg1)->access = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterFPGA_access_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterFPGA *arg1 = (CTA::TargetDriver::RegisterFPGA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  CTA::TargetDriver::Access result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterFPGA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterFPGA_access_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterFPGA *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterFPGA * >(argp1);
  result = (CTA::TargetDriver::Access) ((arg1)->access);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RegisterFPGA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterFPGA *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RegisterFPGA", 0, 0, 0)) SWIG_fail;
  result = (CTA::TargetDriver::RegisterFPGA *)new CTA::TargetDriver::RegisterFPGA();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__RegisterFPGA, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RegisterFPGA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterFPGA *arg1 = (CTA::TargetDriver::RegisterFPGA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterFPGA, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RegisterFPGA" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterFPGA *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterFPGA * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RegisterFPGA_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__RegisterFPGA, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RegisterFPGA_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RegisterASIC_val_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterASIC *arg1 = (CTA::TargetDriver::RegisterASIC *) 0 ;
  uint16_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterASIC_val_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterASIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterASIC_val_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterASIC *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterASIC * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterASIC_val_set" "', argument " "2"" of type '" "uint16_t [4]""'"); 
  } 
  arg2 = reinterpret_cast< uint16_t * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) *(uint16_t *)&arg1->val[ii] = *((uint16_t *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""val""' of type '""uint16_t [4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterASIC_val_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterASIC *arg1 = (CTA::TargetDriver::RegisterASIC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterASIC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterASIC_val_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterASIC *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterASIC * >(argp1);
  result = (uint16_t *)(uint16_t *) ((arg1)->val);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RegisterASIC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterASIC *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RegisterASIC", 0, 0, 0)) SWIG_fail;
  result = (CTA::TargetDriver::RegisterASIC *)new CTA::TargetDriver::RegisterASIC();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__RegisterASIC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RegisterASIC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterASIC *arg1 = (CTA::TargetDriver::RegisterASIC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterASIC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RegisterASIC" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterASIC *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterASIC * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RegisterASIC_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__RegisterASIC, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RegisterASIC_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RegisterSettings__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  CTA::TargetDriver::RegisterSettings *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RegisterSettings" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RegisterSettings" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RegisterSettings" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RegisterSettings" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (CTA::TargetDriver::RegisterSettings *)new CTA::TargetDriver::RegisterSettings((std::string const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RegisterSettings__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  CTA::TargetDriver::RegisterSettings *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RegisterSettings" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RegisterSettings" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RegisterSettings" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RegisterSettings" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RegisterSettings" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RegisterSettings" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (CTA::TargetDriver::RegisterSettings *)new CTA::TargetDriver::RegisterSettings((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RegisterSettings(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_RegisterSettings", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RegisterSettings__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_RegisterSettings__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_RegisterSettings'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::RegisterSettings::RegisterSettings(std::string const &,std::string const &)\n"
    "    CTA::TargetDriver::RegisterSettings::RegisterSettings(std::string const &,std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_PrintSetting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  CTA::TargetDriver::Setting arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_PrintSetting", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_PrintSetting" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_CTA__TargetDriver__Setting,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_PrintSetting" "', argument " "2"" of type '" "CTA::TargetDriver::Setting""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_PrintSetting" "', argument " "2"" of type '" "CTA::TargetDriver::Setting""'");
    } else {
      CTA::TargetDriver::Setting * temp = reinterpret_cast< CTA::TargetDriver::Setting * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->PrintSetting(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_PrintFPGASetting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_PrintFPGASetting", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_PrintFPGASetting" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_PrintFPGASetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_PrintFPGASetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->PrintFPGASetting((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_PrintASICSetting__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_PrintASICSetting" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_PrintASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_PrintASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegisterSettings_PrintASICSetting" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->PrintASICSetting((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_PrintASICSetting__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_PrintASICSetting" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_PrintASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_PrintASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->PrintASICSetting((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_PrintASICSetting(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RegisterSettings_PrintASICSetting", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RegisterSettings_PrintASICSetting__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RegisterSettings_PrintASICSetting__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RegisterSettings_PrintASICSetting'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::RegisterSettings::PrintASICSetting(std::string const &,bool) const\n"
    "    CTA::TargetDriver::RegisterSettings::PrintASICSetting(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_PrintTriggerASICSetting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_PrintTriggerASICSetting", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_PrintTriggerASICSetting" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_PrintTriggerASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_PrintTriggerASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->PrintTriggerASICSetting((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_PrintAllSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_PrintAllSettings" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->PrintAllSettings();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_PrintHeaderFPGA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_PrintHeaderFPGA" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->PrintHeaderFPGA();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_PrintHeaderASIC__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_PrintHeaderASIC" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegisterSettings_PrintHeaderASIC" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->PrintHeaderASIC(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_PrintHeaderASIC__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_PrintHeaderASIC" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->PrintHeaderASIC();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_PrintHeaderASIC(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RegisterSettings_PrintHeaderASIC", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RegisterSettings_PrintHeaderASIC__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RegisterSettings_PrintHeaderASIC__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RegisterSettings_PrintHeaderASIC'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::RegisterSettings::PrintHeaderASIC(bool) const\n"
    "    CTA::TargetDriver::RegisterSettings::PrintHeaderASIC() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_PrintHeaderTriggerASIC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_PrintHeaderTriggerASIC" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->PrintHeaderTriggerASIC();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_PrintAllRegisters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_PrintAllRegisters" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->PrintAllRegisters();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GenerateASICMarkdown__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_GenerateASICMarkdown" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_GenerateASICMarkdown" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GenerateASICMarkdown" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegisterSettings_GenerateASICMarkdown" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->GenerateASICMarkdown((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GenerateASICMarkdown__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_GenerateASICMarkdown" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_GenerateASICMarkdown" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GenerateASICMarkdown" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->GenerateASICMarkdown((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GenerateASICMarkdown(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RegisterSettings_GenerateASICMarkdown", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RegisterSettings_GenerateASICMarkdown__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RegisterSettings_GenerateASICMarkdown__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RegisterSettings_GenerateASICMarkdown'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::RegisterSettings::GenerateASICMarkdown(std::string const &,bool) const\n"
    "    CTA::TargetDriver::RegisterSettings::GenerateASICMarkdown(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GenerateTriggerASICMarkdown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_GenerateTriggerASICMarkdown", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_GenerateTriggerASICMarkdown" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_GenerateTriggerASICMarkdown" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GenerateTriggerASICMarkdown" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->GenerateTriggerASICMarkdown((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GenerateFPGAMarkdown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_GenerateFPGAMarkdown", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_GenerateFPGAMarkdown" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_GenerateFPGAMarkdown" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GenerateFPGAMarkdown" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ((CTA::TargetDriver::RegisterSettings const *)arg1)->GenerateFPGAMarkdown((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ReadUserFPGAConfigFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_ReadUserFPGAConfigFile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_ReadUserFPGAConfigFile" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_ReadUserFPGAConfigFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_ReadUserFPGAConfigFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->ReadUserFPGAConfigFile((std::string const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ReadUserTriggerASICConfigFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_ReadUserTriggerASICConfigFile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_ReadUserTriggerASICConfigFile" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_ReadUserTriggerASICConfigFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_ReadUserTriggerASICConfigFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->ReadUserTriggerASICConfigFile((std::string const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ReadUserASICConfigFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_ReadUserASICConfigFile" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_ReadUserASICConfigFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_ReadUserASICConfigFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegisterSettings_ReadUserASICConfigFile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (int)(arg1)->ReadUserASICConfigFile((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ReadUserASICConfigFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_ReadUserASICConfigFile" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_ReadUserASICConfigFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_ReadUserASICConfigFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->ReadUserASICConfigFile((std::string const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ReadUserASICConfigFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RegisterSettings_ReadUserASICConfigFile", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RegisterSettings_ReadUserASICConfigFile__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RegisterSettings_ReadUserASICConfigFile__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RegisterSettings_ReadUserASICConfigFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::RegisterSettings::ReadUserASICConfigFile(std::string const &,bool)\n"
    "    CTA::TargetDriver::RegisterSettings::ReadUserASICConfigFile(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ModifyFPGASetting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_ModifyFPGASetting", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_ModifyFPGASetting" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_ModifyFPGASetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_ModifyFPGASetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegisterSettings_ModifyFPGASetting" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (int)(arg1)->ModifyFPGASetting((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GetRegisterPartially(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  uint32_t arg2 ;
  CTA::TargetDriver::Setting arg3 ;
  uint32_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_GetRegisterPartially", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_GetRegisterPartially" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegisterSettings_GetRegisterPartially" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_CTA__TargetDriver__Setting,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterSettings_GetRegisterPartially" "', argument " "3"" of type '" "CTA::TargetDriver::Setting""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetRegisterPartially" "', argument " "3"" of type '" "CTA::TargetDriver::Setting""'");
    } else {
      CTA::TargetDriver::Setting * temp = reinterpret_cast< CTA::TargetDriver::Setting * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RegisterSettings_GetRegisterPartially" "', argument " "4"" of type '" "uint32_t &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetRegisterPartially" "', argument " "4"" of type '" "uint32_t &""'"); 
  }
  arg4 = reinterpret_cast< uint32_t * >(argp4);
  (arg1)->GetRegisterPartially(arg2,arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ModifyTriggerASICSetting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_ModifyTriggerASICSetting", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_ModifyTriggerASICSetting" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_ModifyTriggerASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_ModifyTriggerASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegisterSettings_ModifyTriggerASICSetting" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RegisterSettings_ModifyTriggerASICSetting" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  result = (int)(arg1)->ModifyTriggerASICSetting((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ModifyASICSetting__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_ModifyASICSetting" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_ModifyASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_ModifyASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegisterSettings_ModifyASICSetting" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RegisterSettings_ModifyASICSetting" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RegisterSettings_ModifyASICSetting" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (int)(arg1)->ModifyASICSetting((std::string const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ModifyASICSetting__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_ModifyASICSetting" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_ModifyASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_ModifyASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegisterSettings_ModifyASICSetting" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RegisterSettings_ModifyASICSetting" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  result = (int)(arg1)->ModifyASICSetting((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ModifyASICSetting(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RegisterSettings_ModifyASICSetting", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RegisterSettings_ModifyASICSetting__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_RegisterSettings_ModifyASICSetting__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RegisterSettings_ModifyASICSetting'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::RegisterSettings::ModifyASICSetting(std::string const &,uint8_t,uint16_t,bool)\n"
    "    CTA::TargetDriver::RegisterSettings::ModifyASICSetting(std::string const &,uint8_t,uint16_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GetFPGARegisterValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  uint32_t arg2 ;
  uint32_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  uint32_t temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject *swig_obj[2] ;
  int result;
  
  arg3 = &temp3;
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_GetFPGARegisterValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_GetFPGARegisterValue" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegisterSettings_GetFPGARegisterValue" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (int)((CTA::TargetDriver::RegisterSettings const *)arg1)->GetFPGARegisterValue(arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_unsigned_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GetTriggerASICRegisterValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_GetTriggerASICRegisterValue", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_GetTriggerASICRegisterValue" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_GetTriggerASICRegisterValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetTriggerASICRegisterValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegisterSettings_GetTriggerASICRegisterValue" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RegisterSettings_GetTriggerASICRegisterValue" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetTriggerASICRegisterValue" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  result = (int)((CTA::TargetDriver::RegisterSettings const *)arg1)->GetTriggerASICRegisterValue((std::string const &)*arg2,arg3,*arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GetASICRegisterValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_GetASICRegisterValue" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_GetASICRegisterValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetASICRegisterValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegisterSettings_GetASICRegisterValue" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RegisterSettings_GetASICRegisterValue" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetASICRegisterValue" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RegisterSettings_GetASICRegisterValue" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (int)((CTA::TargetDriver::RegisterSettings const *)arg1)->GetASICRegisterValue((std::string const &)*arg2,arg3,*arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GetASICRegisterValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_GetASICRegisterValue" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_GetASICRegisterValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetASICRegisterValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegisterSettings_GetASICRegisterValue" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RegisterSettings_GetASICRegisterValue" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetASICRegisterValue" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  result = (int)((CTA::TargetDriver::RegisterSettings const *)arg1)->GetASICRegisterValue((std::string const &)*arg2,arg3,*arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GetASICRegisterValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RegisterSettings_GetASICRegisterValue", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_unsigned_short, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RegisterSettings_GetASICRegisterValue__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_unsigned_short, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_RegisterSettings_GetASICRegisterValue__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RegisterSettings_GetASICRegisterValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::RegisterSettings::GetASICRegisterValue(std::string const &,uint8_t,uint16_t &,bool) const\n"
    "    CTA::TargetDriver::RegisterSettings::GetASICRegisterValue(std::string const &,uint8_t,uint16_t &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GetFPGASettingRegisterAddress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  uint32_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_GetFPGASettingRegisterAddress", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_GetFPGASettingRegisterAddress" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_GetFPGASettingRegisterAddress" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetFPGASettingRegisterAddress" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterSettings_GetFPGASettingRegisterAddress" "', argument " "3"" of type '" "uint32_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetFPGASettingRegisterAddress" "', argument " "3"" of type '" "uint32_t &""'"); 
  }
  arg3 = reinterpret_cast< uint32_t * >(argp3);
  result = (int)((CTA::TargetDriver::RegisterSettings const *)arg1)->GetFPGASettingRegisterAddress((std::string const &)*arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GetTriggerASICSettingRegisterAddress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_GetTriggerASICSettingRegisterAddress", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_GetTriggerASICSettingRegisterAddress" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_GetTriggerASICSettingRegisterAddress" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetTriggerASICSettingRegisterAddress" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_unsigned_char,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterSettings_GetTriggerASICSettingRegisterAddress" "', argument " "3"" of type '" "uint8_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetTriggerASICSettingRegisterAddress" "', argument " "3"" of type '" "uint8_t &""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  result = (int)((CTA::TargetDriver::RegisterSettings const *)arg1)->GetTriggerASICSettingRegisterAddress((std::string const &)*arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GetASICSettingRegisterAddress__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_GetASICSettingRegisterAddress" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_GetASICSettingRegisterAddress" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetASICSettingRegisterAddress" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_unsigned_char,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterSettings_GetASICSettingRegisterAddress" "', argument " "3"" of type '" "uint8_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetASICSettingRegisterAddress" "', argument " "3"" of type '" "uint8_t &""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RegisterSettings_GetASICSettingRegisterAddress" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (int)((CTA::TargetDriver::RegisterSettings const *)arg1)->GetASICSettingRegisterAddress((std::string const &)*arg2,*arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GetASICSettingRegisterAddress__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_GetASICSettingRegisterAddress" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_GetASICSettingRegisterAddress" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetASICSettingRegisterAddress" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_unsigned_char,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterSettings_GetASICSettingRegisterAddress" "', argument " "3"" of type '" "uint8_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_GetASICSettingRegisterAddress" "', argument " "3"" of type '" "uint8_t &""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  result = (int)((CTA::TargetDriver::RegisterSettings const *)arg1)->GetASICSettingRegisterAddress((std::string const &)*arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_GetASICSettingRegisterAddress(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RegisterSettings_GetASICSettingRegisterAddress", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_unsigned_char, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RegisterSettings_GetASICSettingRegisterAddress__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_unsigned_char, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RegisterSettings_GetASICSettingRegisterAddress__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RegisterSettings_GetASICSettingRegisterAddress'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::RegisterSettings::GetASICSettingRegisterAddress(std::string const &,uint8_t &,bool) const\n"
    "    CTA::TargetDriver::RegisterSettings::GetASICSettingRegisterAddress(std::string const &,uint8_t &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fType_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fType_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_fType_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_fType_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->fType = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fType_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::string *) & ((arg1)->fType);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fFPGAFirmwareVersion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fFPGAFirmwareVersion_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fFPGAFirmwareVersion_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegisterSettings_fFPGAFirmwareVersion_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->fFPGAFirmwareVersion = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fFPGAFirmwareVersion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fFPGAFirmwareVersion_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (uint32_t) ((arg1)->fFPGAFirmwareVersion);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fFPGADescription_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fFPGADescription_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fFPGADescription_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_fFPGADescription_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_fFPGADescription_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->fFPGADescription = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fFPGADescription_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fFPGADescription_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::string *) & ((arg1)->fFPGADescription);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fFPGAAuthor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fFPGAAuthor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fFPGAAuthor_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_fFPGAAuthor_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_fFPGAAuthor_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->fFPGAAuthor = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fFPGAAuthor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fFPGAAuthor_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::string *) & ((arg1)->fFPGAAuthor);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fFPGANumberOfRegisters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fFPGANumberOfRegisters_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fFPGANumberOfRegisters_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegisterSettings_fFPGANumberOfRegisters_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->fFPGANumberOfRegisters = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fFPGANumberOfRegisters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fFPGANumberOfRegisters_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (uint32_t) ((arg1)->fFPGANumberOfRegisters);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fASICDescription_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fASICDescription_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fASICDescription_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_fASICDescription_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_fASICDescription_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->fASICDescription = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fASICDescription_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fASICDescription_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::string *) & ((arg1)->fASICDescription);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fASICAuthor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fASICAuthor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fASICAuthor_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_fASICAuthor_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_fASICAuthor_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->fASICAuthor = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fASICAuthor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fASICAuthor_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::string *) & ((arg1)->fASICAuthor);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fASICNumberOfRegisters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fASICNumberOfRegisters_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fASICNumberOfRegisters_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegisterSettings_fASICNumberOfRegisters_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->fASICNumberOfRegisters = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fASICNumberOfRegisters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fASICNumberOfRegisters_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (uint32_t) ((arg1)->fASICNumberOfRegisters);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fTriggerASICDescription_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fTriggerASICDescription_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fTriggerASICDescription_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_fTriggerASICDescription_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_fTriggerASICDescription_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->fTriggerASICDescription = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fTriggerASICDescription_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fTriggerASICDescription_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::string *) & ((arg1)->fTriggerASICDescription);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fTriggerASICAuthor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fTriggerASICAuthor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fTriggerASICAuthor_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_fTriggerASICAuthor_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_fTriggerASICAuthor_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->fTriggerASICAuthor = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fTriggerASICAuthor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fTriggerASICAuthor_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::string *) & ((arg1)->fTriggerASICAuthor);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fTriggerASICNumberOfRegisters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fTriggerASICNumberOfRegisters_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fTriggerASICNumberOfRegisters_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegisterSettings_fTriggerASICNumberOfRegisters_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->fTriggerASICNumberOfRegisters = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fTriggerASICNumberOfRegisters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fTriggerASICNumberOfRegisters_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (uint32_t) ((arg1)->fTriggerASICNumberOfRegisters);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_CheckFPGARegisterConsistency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_CheckFPGARegisterConsistency" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (int)(arg1)->CheckFPGARegisterConsistency();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_CheckTriggerASICRegisterConsistency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_CheckTriggerASICRegisterConsistency" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (int)(arg1)->CheckTriggerASICRegisterConsistency();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_CheckASICRegisterConsistency__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_CheckASICRegisterConsistency" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegisterSettings_CheckASICRegisterConsistency" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (int)(arg1)->CheckASICRegisterConsistency(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_CheckASICRegisterConsistency__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_CheckASICRegisterConsistency" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (int)(arg1)->CheckASICRegisterConsistency();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_CheckASICRegisterConsistency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RegisterSettings_CheckASICRegisterConsistency", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RegisterSettings_CheckASICRegisterConsistency__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RegisterSettings_CheckASICRegisterConsistency__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RegisterSettings_CheckASICRegisterConsistency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::RegisterSettings::CheckASICRegisterConsistency(bool)\n"
    "    CTA::TargetDriver::RegisterSettings::CheckASICRegisterConsistency()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ReadDefinitionFileFPGA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_ReadDefinitionFileFPGA" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (int)(arg1)->ReadDefinitionFileFPGA();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ReadDefinitionFileTriggerASIC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_ReadDefinitionFileTriggerASIC" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (int)(arg1)->ReadDefinitionFileTriggerASIC();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ReadDefinitionFileASIC__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_ReadDefinitionFileASIC" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegisterSettings_ReadDefinitionFileASIC" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (int)(arg1)->ReadDefinitionFileASIC(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ReadDefinitionFileASIC__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_ReadDefinitionFileASIC" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (int)(arg1)->ReadDefinitionFileASIC();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ReadDefinitionFileASIC(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RegisterSettings_ReadDefinitionFileASIC", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RegisterSettings_ReadDefinitionFileASIC__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RegisterSettings_ReadDefinitionFileASIC__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RegisterSettings_ReadDefinitionFileASIC'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::RegisterSettings::ReadDefinitionFileASIC(bool)\n"
    "    CTA::TargetDriver::RegisterSettings::ReadDefinitionFileASIC()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_ModifyRegisterPartially(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  uint32_t *arg2 = 0 ;
  CTA::TargetDriver::Setting arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_ModifyRegisterPartially", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_ModifyRegisterPartially" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_ModifyRegisterPartially" "', argument " "2"" of type '" "uint32_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_ModifyRegisterPartially" "', argument " "2"" of type '" "uint32_t &""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_CTA__TargetDriver__Setting,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterSettings_ModifyRegisterPartially" "', argument " "3"" of type '" "CTA::TargetDriver::Setting""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_ModifyRegisterPartially" "', argument " "3"" of type '" "CTA::TargetDriver::Setting""'");
    } else {
      CTA::TargetDriver::Setting * temp = reinterpret_cast< CTA::TargetDriver::Setting * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->ModifyRegisterPartially(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_CheckRegisterPartially(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  uint32_t arg2 ;
  CTA::TargetDriver::Setting arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_CheckRegisterPartially", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_CheckRegisterPartially" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegisterSettings_CheckRegisterPartially" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_CTA__TargetDriver__Setting,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterSettings_CheckRegisterPartially" "', argument " "3"" of type '" "CTA::TargetDriver::Setting""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_CheckRegisterPartially" "', argument " "3"" of type '" "CTA::TargetDriver::Setting""'");
    } else {
      CTA::TargetDriver::Setting * temp = reinterpret_cast< CTA::TargetDriver::Setting * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->CheckRegisterPartially(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_AddFPGASetting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  CTA::TargetDriver::Setting arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_AddFPGASetting", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_AddFPGASetting" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_AddFPGASetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_AddFPGASetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_CTA__TargetDriver__Setting,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterSettings_AddFPGASetting" "', argument " "3"" of type '" "CTA::TargetDriver::Setting""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_AddFPGASetting" "', argument " "3"" of type '" "CTA::TargetDriver::Setting""'");
    } else {
      CTA::TargetDriver::Setting * temp = reinterpret_cast< CTA::TargetDriver::Setting * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (int)(arg1)->AddFPGASetting((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_AddTriggerASICSetting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  CTA::TargetDriver::SettingASIC arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_AddTriggerASICSetting", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_AddTriggerASICSetting" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_AddTriggerASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_AddTriggerASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_CTA__TargetDriver__SettingASIC,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterSettings_AddTriggerASICSetting" "', argument " "3"" of type '" "CTA::TargetDriver::SettingASIC""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_AddTriggerASICSetting" "', argument " "3"" of type '" "CTA::TargetDriver::SettingASIC""'");
    } else {
      CTA::TargetDriver::SettingASIC * temp = reinterpret_cast< CTA::TargetDriver::SettingASIC * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (int)(arg1)->AddTriggerASICSetting((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_AddASICSetting__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  CTA::TargetDriver::SettingASIC arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_AddASICSetting" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_AddASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_AddASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_CTA__TargetDriver__SettingASIC,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterSettings_AddASICSetting" "', argument " "3"" of type '" "CTA::TargetDriver::SettingASIC""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_AddASICSetting" "', argument " "3"" of type '" "CTA::TargetDriver::SettingASIC""'");
    } else {
      CTA::TargetDriver::SettingASIC * temp = reinterpret_cast< CTA::TargetDriver::SettingASIC * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RegisterSettings_AddASICSetting" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (int)(arg1)->AddASICSetting((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_AddASICSetting__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::string *arg2 = 0 ;
  CTA::TargetDriver::SettingASIC arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_AddASICSetting" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_AddASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_AddASICSetting" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_CTA__TargetDriver__SettingASIC,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterSettings_AddASICSetting" "', argument " "3"" of type '" "CTA::TargetDriver::SettingASIC""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSettings_AddASICSetting" "', argument " "3"" of type '" "CTA::TargetDriver::SettingASIC""'");
    } else {
      CTA::TargetDriver::SettingASIC * temp = reinterpret_cast< CTA::TargetDriver::SettingASIC * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (int)(arg1)->AddASICSetting((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_AddASICSetting(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RegisterSettings_AddASICSetting", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_CTA__TargetDriver__SettingASIC, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RegisterSettings_AddASICSetting__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_CTA__TargetDriver__SettingASIC, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RegisterSettings_AddASICSetting__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RegisterSettings_AddASICSetting'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::RegisterSettings::AddASICSetting(std::string const &,CTA::TargetDriver::SettingASIC,bool)\n"
    "    CTA::TargetDriver::RegisterSettings::AddASICSetting(std::string const &,CTA::TargetDriver::SettingASIC)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_UpdateFPGASettingMapFromRegisterMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_UpdateFPGASettingMapFromRegisterMap" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (int)(arg1)->UpdateFPGASettingMapFromRegisterMap();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fDefintionFileFPGA_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fDefintionFileFPGA_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::string *) & ((arg1)->fDefintionFileFPGA);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fDefintionFileASIC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fDefintionFileASIC_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::string *) & ((arg1)->fDefintionFileASIC);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fDefintionFileTriggerASIC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fDefintionFileTriggerASIC_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::string *) & ((arg1)->fDefintionFileTriggerASIC);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fSettingMapFPGA_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::map< std::string,CTA::TargetDriver::Setting > *arg2 = (std::map< std::string,CTA::TargetDriver::Setting > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fSettingMapFPGA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fSettingMapFPGA_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_std__string_CTA__TargetDriver__Setting_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_fSettingMapFPGA_set" "', argument " "2"" of type '" "std::map< std::string,CTA::TargetDriver::Setting > *""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::string,CTA::TargetDriver::Setting > * >(argp2);
  if (arg1) (arg1)->fSettingMapFPGA = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fSettingMapFPGA_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,CTA::TargetDriver::Setting > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fSettingMapFPGA_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::map< std::string,CTA::TargetDriver::Setting > *)& ((arg1)->fSettingMapFPGA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_CTA__TargetDriver__Setting_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fSettingMapASIC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::map< std::string,CTA::TargetDriver::SettingASIC > *arg2 = (std::map< std::string,CTA::TargetDriver::SettingASIC > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fSettingMapASIC_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fSettingMapASIC_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_std__string_CTA__TargetDriver__SettingASIC_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_fSettingMapASIC_set" "', argument " "2"" of type '" "std::map< std::string,CTA::TargetDriver::SettingASIC > *""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::string,CTA::TargetDriver::SettingASIC > * >(argp2);
  if (arg1) (arg1)->fSettingMapASIC = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fSettingMapASIC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,CTA::TargetDriver::SettingASIC > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fSettingMapASIC_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::map< std::string,CTA::TargetDriver::SettingASIC > *)& ((arg1)->fSettingMapASIC);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_CTA__TargetDriver__SettingASIC_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fSettingMapTriggerASIC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::map< std::string,CTA::TargetDriver::SettingASIC > *arg2 = (std::map< std::string,CTA::TargetDriver::SettingASIC > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fSettingMapTriggerASIC_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fSettingMapTriggerASIC_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_std__string_CTA__TargetDriver__SettingASIC_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_fSettingMapTriggerASIC_set" "', argument " "2"" of type '" "std::map< std::string,CTA::TargetDriver::SettingASIC > *""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::string,CTA::TargetDriver::SettingASIC > * >(argp2);
  if (arg1) (arg1)->fSettingMapTriggerASIC = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fSettingMapTriggerASIC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,CTA::TargetDriver::SettingASIC > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fSettingMapTriggerASIC_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::map< std::string,CTA::TargetDriver::SettingASIC > *)& ((arg1)->fSettingMapTriggerASIC);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_CTA__TargetDriver__SettingASIC_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fRegisterMapFPGA_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::map< uint32_t,CTA::TargetDriver::RegisterFPGA > *arg2 = (std::map< uint32_t,CTA::TargetDriver::RegisterFPGA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fRegisterMapFPGA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fRegisterMapFPGA_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_unsigned_int_CTA__TargetDriver__RegisterFPGA_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_fRegisterMapFPGA_set" "', argument " "2"" of type '" "std::map< uint32_t,CTA::TargetDriver::RegisterFPGA > *""'"); 
  }
  arg2 = reinterpret_cast< std::map< uint32_t,CTA::TargetDriver::RegisterFPGA > * >(argp2);
  if (arg1) (arg1)->fRegisterMapFPGA = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fRegisterMapFPGA_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< uint32_t,CTA::TargetDriver::RegisterFPGA > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fRegisterMapFPGA_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::map< uint32_t,CTA::TargetDriver::RegisterFPGA > *)& ((arg1)->fRegisterMapFPGA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_unsigned_int_CTA__TargetDriver__RegisterFPGA_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fRegisterMapASIC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::map< uint8_t,CTA::TargetDriver::RegisterASIC > *arg2 = (std::map< uint8_t,CTA::TargetDriver::RegisterASIC > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fRegisterMapASIC_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fRegisterMapASIC_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_unsigned_char_CTA__TargetDriver__RegisterASIC_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_fRegisterMapASIC_set" "', argument " "2"" of type '" "std::map< uint8_t,CTA::TargetDriver::RegisterASIC > *""'"); 
  }
  arg2 = reinterpret_cast< std::map< uint8_t,CTA::TargetDriver::RegisterASIC > * >(argp2);
  if (arg1) (arg1)->fRegisterMapASIC = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fRegisterMapASIC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< uint8_t,CTA::TargetDriver::RegisterASIC > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fRegisterMapASIC_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::map< uint8_t,CTA::TargetDriver::RegisterASIC > *)& ((arg1)->fRegisterMapASIC);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_unsigned_char_CTA__TargetDriver__RegisterASIC_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fRegisterMapTriggerASIC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  std::map< uint8_t,CTA::TargetDriver::RegisterASIC > *arg2 = (std::map< uint8_t,CTA::TargetDriver::RegisterASIC > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RegisterSettings_fRegisterMapTriggerASIC_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fRegisterMapTriggerASIC_set" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_unsigned_char_CTA__TargetDriver__RegisterASIC_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterSettings_fRegisterMapTriggerASIC_set" "', argument " "2"" of type '" "std::map< uint8_t,CTA::TargetDriver::RegisterASIC > *""'"); 
  }
  arg2 = reinterpret_cast< std::map< uint8_t,CTA::TargetDriver::RegisterASIC > * >(argp2);
  if (arg1) (arg1)->fRegisterMapTriggerASIC = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSettings_fRegisterMapTriggerASIC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< uint8_t,CTA::TargetDriver::RegisterASIC > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSettings_fRegisterMapTriggerASIC_get" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  result = (std::map< uint8_t,CTA::TargetDriver::RegisterASIC > *)& ((arg1)->fRegisterMapTriggerASIC);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_unsigned_char_CTA__TargetDriver__RegisterASIC_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RegisterSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RegisterSettings *arg1 = (CTA::TargetDriver::RegisterSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RegisterSettings" "', argument " "1"" of type '" "CTA::TargetDriver::RegisterSettings *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RegisterSettings * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RegisterSettings_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__RegisterSettings, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RegisterSettings_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ModuleSimulator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  double val5 ;
  int ecode5 = 0 ;
  CTA::TargetDriver::ModuleSimulator *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ModuleSimulator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleSimulator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ModuleSimulator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleSimulator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ModuleSimulator" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleSimulator" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ModuleSimulator" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleSimulator" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ModuleSimulator" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = (CTA::TargetDriver::ModuleSimulator *)new CTA::TargetDriver::ModuleSimulator((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ModuleSimulator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  CTA::TargetDriver::ModuleSimulator *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ModuleSimulator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleSimulator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ModuleSimulator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleSimulator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ModuleSimulator" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleSimulator" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ModuleSimulator" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleSimulator" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (CTA::TargetDriver::ModuleSimulator *)new CTA::TargetDriver::ModuleSimulator((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ModuleSimulator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  CTA::TargetDriver::ModuleSimulator *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ModuleSimulator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleSimulator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ModuleSimulator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleSimulator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ModuleSimulator" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleSimulator" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (CTA::TargetDriver::ModuleSimulator *)new CTA::TargetDriver::ModuleSimulator((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ModuleSimulator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  CTA::TargetDriver::ModuleSimulator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ModuleSimulator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleSimulator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ModuleSimulator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleSimulator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (CTA::TargetDriver::ModuleSimulator *)new CTA::TargetDriver::ModuleSimulator((std::string const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ModuleSimulator__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  CTA::TargetDriver::ModuleSimulator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ModuleSimulator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleSimulator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (CTA::TargetDriver::ModuleSimulator *)new CTA::TargetDriver::ModuleSimulator((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ModuleSimulator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ModuleSimulator", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ModuleSimulator__SWIG_4(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ModuleSimulator__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ModuleSimulator__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_ModuleSimulator__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ModuleSimulator__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ModuleSimulator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::ModuleSimulator::ModuleSimulator(std::string const &,std::string const &,std::string const &,std::string const &,double)\n"
    "    CTA::TargetDriver::ModuleSimulator::ModuleSimulator(std::string const &,std::string const &,std::string const &,std::string const &)\n"
    "    CTA::TargetDriver::ModuleSimulator::ModuleSimulator(std::string const &,std::string const &,std::string const &)\n"
    "    CTA::TargetDriver::ModuleSimulator::ModuleSimulator(std::string const &,std::string const &)\n"
    "    CTA::TargetDriver::ModuleSimulator::ModuleSimulator(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ModuleSimulator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::ModuleSimulator *arg1 = (CTA::TargetDriver::ModuleSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ModuleSimulator" "', argument " "1"" of type '" "CTA::TargetDriver::ModuleSimulator *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleSimulator_ListenAndRespond(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::ModuleSimulator *arg1 = (CTA::TargetDriver::ModuleSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleSimulator_ListenAndRespond" "', argument " "1"" of type '" "CTA::TargetDriver::ModuleSimulator *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp1);
  (arg1)->ListenAndRespond();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleSimulator_RunTrigger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::ModuleSimulator *arg1 = (CTA::TargetDriver::ModuleSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleSimulator_RunTrigger" "', argument " "1"" of type '" "CTA::TargetDriver::ModuleSimulator *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp1);
  (arg1)->RunTrigger();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleSimulator_CloseSockets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::ModuleSimulator *arg1 = (CTA::TargetDriver::ModuleSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleSimulator_CloseSockets" "', argument " "1"" of type '" "CTA::TargetDriver::ModuleSimulator *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp1);
  (arg1)->CloseSockets();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleSimulator_IsRunning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::ModuleSimulator *arg1 = (CTA::TargetDriver::ModuleSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleSimulator_IsRunning" "', argument " "1"" of type '" "CTA::TargetDriver::ModuleSimulator const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp1);
  result = (bool)((CTA::TargetDriver::ModuleSimulator const *)arg1)->IsRunning();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleSimulator_SetVerbose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::ModuleSimulator *arg1 = (CTA::TargetDriver::ModuleSimulator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ModuleSimulator_SetVerbose", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleSimulator_SetVerbose" "', argument " "1"" of type '" "CTA::TargetDriver::ModuleSimulator *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModuleSimulator_SetVerbose" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetVerbose(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleSimulator_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::ModuleSimulator *arg1 = (CTA::TargetDriver::ModuleSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleSimulator_Start" "', argument " "1"" of type '" "CTA::TargetDriver::ModuleSimulator *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp1);
  (arg1)->Start();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleSimulator_Stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::ModuleSimulator *arg1 = (CTA::TargetDriver::ModuleSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleSimulator_Stop" "', argument " "1"" of type '" "CTA::TargetDriver::ModuleSimulator *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp1);
  (arg1)->Stop();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleSimulator_StartTriggering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::ModuleSimulator *arg1 = (CTA::TargetDriver::ModuleSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleSimulator_StartTriggering" "', argument " "1"" of type '" "CTA::TargetDriver::ModuleSimulator *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp1);
  (arg1)->StartTriggering();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleSimulator_StopTriggering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::ModuleSimulator *arg1 = (CTA::TargetDriver::ModuleSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleSimulator_StopTriggering" "', argument " "1"" of type '" "CTA::TargetDriver::ModuleSimulator *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp1);
  (arg1)->StopTriggering();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleSimulator_SetTriggerRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::ModuleSimulator *arg1 = (CTA::TargetDriver::ModuleSimulator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ModuleSimulator_SetTriggerRate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleSimulator_SetTriggerRate" "', argument " "1"" of type '" "CTA::TargetDriver::ModuleSimulator *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModuleSimulator_SetTriggerRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetTriggerRate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleSimulator_CheckTimeDifference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::ModuleSimulator *arg1 = (CTA::TargetDriver::ModuleSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleSimulator_CheckTimeDifference" "', argument " "1"" of type '" "CTA::TargetDriver::ModuleSimulator *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp1);
  result = (bool)(arg1)->CheckTimeDifference();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleSimulator_SendEventData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::ModuleSimulator *arg1 = (CTA::TargetDriver::ModuleSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleSimulator_SendEventData" "', argument " "1"" of type '" "CTA::TargetDriver::ModuleSimulator *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp1);
  (arg1)->SendEventData();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleSimulator_SetRefWaveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::ModuleSimulator *arg1 = (CTA::TargetDriver::ModuleSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleSimulator_SetRefWaveform" "', argument " "1"" of type '" "CTA::TargetDriver::ModuleSimulator *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp1);
  (arg1)->SetRefWaveform();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ModuleSimulator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ModuleSimulator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Waveform__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  uint8_t *arg1 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CTA::TargetDriver::Waveform *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Waveform" "', argument " "1"" of type '" "uint8_t *""'"); 
  }
  arg1 = reinterpret_cast< uint8_t * >(argp1);
  result = (CTA::TargetDriver::Waveform *)new CTA::TargetDriver::Waveform(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__Waveform, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Waveform__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (CTA::TargetDriver::Waveform *)new CTA::TargetDriver::Waveform();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__Waveform, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Waveform(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Waveform", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Waveform__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_unsigned_char, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Waveform__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Waveform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::Waveform::Waveform(uint8_t *)\n"
    "    CTA::TargetDriver::Waveform::Waveform()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Waveform" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_AssociateData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Waveform_AssociateData", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_AssociateData" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Waveform_AssociateData" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  (arg1)->AssociateData(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_IsErrorFlagOn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_IsErrorFlagOn" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  result = (bool)((CTA::TargetDriver::Waveform const *)arg1)->IsErrorFlagOn();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_GetChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_GetChannel" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  result = (uint8_t)((CTA::TargetDriver::Waveform const *)arg1)->GetChannel();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_GetASIC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_GetASIC" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  result = (uint8_t)((CTA::TargetDriver::Waveform const *)arg1)->GetASIC();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_GetSamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_GetSamples" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  result = (uint16_t)((CTA::TargetDriver::Waveform const *)arg1)->GetSamples();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_GetADC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  uint16_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "Waveform_GetADC", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_GetADC" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Waveform_GetADC" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  result = (uint16_t)((CTA::TargetDriver::Waveform const *)arg1)->GetADC(arg2);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_GetADC16bit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  uint16_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "Waveform_GetADC16bit", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_GetADC16bit" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Waveform_GetADC16bit" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  result = (uint16_t)((CTA::TargetDriver::Waveform const *)arg1)->GetADC16bit(arg2);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_GetPixelID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_GetPixelID" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  result = (uint16_t)(arg1)->GetPixelID();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_GetADCArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Waveform_GetADCArray", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_GetADCArray" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(swig_obj[1]))
    {
      const char* typestring = pytype_string(swig_obj[1]);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(swig_obj[1]);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_USHORT);
    if (!array2) SWIG_fail;
    arg2 = (unsigned short*) array_data(array2);
  }
  ((CTA::TargetDriver::Waveform const *)arg1)->GetADCArray(arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_GetADC16bitArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Waveform_GetADC16bitArray", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_GetADC16bitArray" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(swig_obj[1]))
    {
      const char* typestring = pytype_string(swig_obj[1]);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(swig_obj[1]);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_USHORT);
    if (!array2) SWIG_fail;
    arg2 = (unsigned short*) array_data(array2);
  }
  ((CTA::TargetDriver::Waveform const *)arg1)->GetADC16bitArray(arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_brycesGetADCArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Waveform_brycesGetADCArray", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_brycesGetADCArray" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(swig_obj[1]))
    {
      const char* typestring = pytype_string(swig_obj[1]);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(swig_obj[1]);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_USHORT);
    if (!array2) SWIG_fail;
    arg2 = (unsigned short*) array_data(array2);
  }
  ((CTA::TargetDriver::Waveform const *)arg1)->brycesGetADCArray(arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_brycesGetADC16bitArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Waveform_brycesGetADC16bitArray", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_brycesGetADC16bitArray" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(swig_obj[1]))
    {
      const char* typestring = pytype_string(swig_obj[1]);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(swig_obj[1]);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_USHORT);
    if (!array2) SWIG_fail;
    arg2 = (unsigned short*) array_data(array2);
  }
  ((CTA::TargetDriver::Waveform const *)arg1)->brycesGetADC16bitArray(arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_GetMeanAndStdDev__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  uint16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_GetMeanAndStdDev" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Waveform_GetMeanAndStdDev" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveform_GetMeanAndStdDev" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Waveform_GetMeanAndStdDev" "', argument " "3"" of type '" "float &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveform_GetMeanAndStdDev" "', argument " "3"" of type '" "float &""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Waveform_GetMeanAndStdDev" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  (arg1)->GetMeanAndStdDev(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_GetMeanAndStdDev__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_GetMeanAndStdDev" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Waveform_GetMeanAndStdDev" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveform_GetMeanAndStdDev" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Waveform_GetMeanAndStdDev" "', argument " "3"" of type '" "float &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveform_GetMeanAndStdDev" "', argument " "3"" of type '" "float &""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  (arg1)->GetMeanAndStdDev(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_GetMeanAndStdDev(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Waveform_GetMeanAndStdDev", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Waveform_GetMeanAndStdDev__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Waveform_GetMeanAndStdDev__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Waveform_GetMeanAndStdDev'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::Waveform::GetMeanAndStdDev(float &,float &,uint16_t)\n"
    "    CTA::TargetDriver::Waveform::GetMeanAndStdDev(float &,float &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Waveform_GetMeanAndRMS__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  uint16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_GetMeanAndRMS" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Waveform_GetMeanAndRMS" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveform_GetMeanAndRMS" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Waveform_GetMeanAndRMS" "', argument " "3"" of type '" "float &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveform_GetMeanAndRMS" "', argument " "3"" of type '" "float &""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Waveform_GetMeanAndRMS" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  (arg1)->GetMeanAndRMS(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_GetMeanAndRMS__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_GetMeanAndRMS" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Waveform_GetMeanAndRMS" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveform_GetMeanAndRMS" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Waveform_GetMeanAndRMS" "', argument " "3"" of type '" "float &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveform_GetMeanAndRMS" "', argument " "3"" of type '" "float &""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  (arg1)->GetMeanAndRMS(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_GetMeanAndRMS(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Waveform_GetMeanAndRMS", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Waveform_GetMeanAndRMS__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Waveform_GetMeanAndRMS__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Waveform_GetMeanAndRMS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::Waveform::GetMeanAndRMS(float &,float &,uint16_t)\n"
    "    CTA::TargetDriver::Waveform::GetMeanAndRMS(float &,float &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Waveform_SetHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint16_t arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Waveform_SetHeader", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_SetHeader" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Waveform_SetHeader" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Waveform_SetHeader" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Waveform_SetHeader" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Waveform_SetHeader" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->SetHeader(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_SetADC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Waveform_SetADC", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_SetADC" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Waveform_SetADC" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Waveform_SetADC" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  (arg1)->SetADC(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_SetADC16bit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Waveform_SetADC16bit", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_SetADC16bit" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Waveform_SetADC16bit" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Waveform_SetADC16bit" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  (arg1)->SetADC16bit(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_PackWaveform__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint16_t arg4 ;
  bool arg5 ;
  uint16_t *arg6 = (uint16_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_PackWaveform" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Waveform_PackWaveform" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Waveform_PackWaveform" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Waveform_PackWaveform" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Waveform_PackWaveform" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Waveform_PackWaveform" "', argument " "6"" of type '" "uint16_t *""'"); 
  }
  arg6 = reinterpret_cast< uint16_t * >(argp6);
  (arg1)->PackWaveform(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_PackWaveform__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::Waveform *arg1 = (CTA::TargetDriver::Waveform *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint16_t arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveform_PackWaveform" "', argument " "1"" of type '" "CTA::TargetDriver::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Waveform_PackWaveform" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Waveform_PackWaveform" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Waveform_PackWaveform" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Waveform_PackWaveform" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->PackWaveform(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveform_PackWaveform(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Waveform_PackWaveform", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Waveform_PackWaveform__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_unsigned_short, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Waveform_PackWaveform__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Waveform_PackWaveform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::Waveform::PackWaveform(uint8_t,uint8_t,uint16_t,bool,uint16_t *)\n"
    "    CTA::TargetDriver::Waveform::PackWaveform(uint8_t,uint8_t,uint16_t,bool)\n");
  return 0;
}


SWIGINTERN PyObject *Waveform_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__Waveform, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Waveform_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DataPacket__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  uint16_t arg1 ;
  uint16_t arg2 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  CTA::TargetDriver::DataPacket *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DataPacket" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DataPacket" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  result = (CTA::TargetDriver::DataPacket *)new CTA::TargetDriver::DataPacket(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__DataPacket, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataPacket__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  uint16_t arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  CTA::TargetDriver::DataPacket *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DataPacket" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  result = (CTA::TargetDriver::DataPacket *)new CTA::TargetDriver::DataPacket(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__DataPacket, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataPacket__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (CTA::TargetDriver::DataPacket *)new CTA::TargetDriver::DataPacket();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__DataPacket, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataPacket(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DataPacket", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_DataPacket__SWIG_2(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DataPacket__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DataPacket__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DataPacket'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::DataPacket::DataPacket(uint16_t,uint16_t)\n"
    "    CTA::TargetDriver::DataPacket::DataPacket(uint16_t)\n"
    "    CTA::TargetDriver::DataPacket::DataPacket()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DataPacket(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataPacket" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_IsEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_IsEmpty" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (bool)((CTA::TargetDriver::DataPacket const *)arg1)->IsEmpty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_IsValid" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (bool)(arg1)->IsValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetStatus" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (int)(arg1)->GetStatus();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetStatusString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetStatusString" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (arg1)->GetStatusString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetASICID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetASICID" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint8_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetASICID();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetChannelID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetChannelID" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint8_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetChannelID();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetNumberOfWaveforms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetNumberOfWaveforms" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint16_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetNumberOfWaveforms();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetBuffers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetBuffers" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint16_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetBuffers();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetWaveformLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetWaveformLength" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint16_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetWaveformLength();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetWaveformSamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetWaveformSamples" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint16_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetWaveformSamples();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetWaveformBytes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetWaveformBytes" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint16_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetWaveformBytes();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_IsFirstSubPacket(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_IsFirstSubPacket" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (bool)((CTA::TargetDriver::DataPacket const *)arg1)->IsFirstSubPacket();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_IsLastSubPacket(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_IsLastSubPacket" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (bool)((CTA::TargetDriver::DataPacket const *)arg1)->IsLastSubPacket();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetTotalSizeInBytes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetTotalSizeInBytes" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint16_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetTotalSizeInBytes();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetEventNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetEventNumber" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint16_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetEventNumber();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetSlotID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetSlotID" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint8_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetSlotID();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetDetectorID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetDetectorID" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint8_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetDetectorID();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetEventSequenceNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetEventSequenceNumber" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint8_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetEventSequenceNumber();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetDetectorUniqueTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetDetectorUniqueTag" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint8_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetDetectorUniqueTag();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetTACKTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetTACKTime" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint64_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetTACKTime();
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetTACKMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetTACKMode" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint8_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetTACKMode();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_IsZeroSupressionEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_IsZeroSupressionEnabled" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (bool)((CTA::TargetDriver::DataPacket const *)arg1)->IsZeroSupressionEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetStaleBit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetStaleBit" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint8_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetStaleBit();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetColumn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetColumn" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint8_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetColumn();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetRow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetRow" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint8_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetRow();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetBlockPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetBlockPhase" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint8_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetBlockPhase();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_CalculateFirstCellId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint16_t arg1 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  uint16_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataPacket_CalculateFirstCellId", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DataPacket_CalculateFirstCellId" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataPacket_CalculateFirstCellId" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataPacket_CalculateFirstCellId" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (uint16_t)CTA::TargetDriver::DataPacket::CalculateFirstCellId(arg1,arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_CalculatePacketSizeInBytes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint16_t arg1 ;
  uint16_t arg2 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  uint16_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataPacket_CalculatePacketSizeInBytes", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DataPacket_CalculatePacketSizeInBytes" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataPacket_CalculatePacketSizeInBytes" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  result = (uint16_t)CTA::TargetDriver::DataPacket::CalculatePacketSizeInBytes(arg1,arg2);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_CalculateRowColumnBlockPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint16_t arg1 ;
  uint16_t *arg2 = 0 ;
  uint16_t *arg3 = 0 ;
  uint16_t *arg4 = 0 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataPacket_CalculateRowColumnBlockPhase", 4, 4, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DataPacket_CalculateRowColumnBlockPhase" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataPacket_CalculateRowColumnBlockPhase" "', argument " "2"" of type '" "uint16_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataPacket_CalculateRowColumnBlockPhase" "', argument " "2"" of type '" "uint16_t &""'"); 
  }
  arg2 = reinterpret_cast< uint16_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataPacket_CalculateRowColumnBlockPhase" "', argument " "3"" of type '" "uint16_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataPacket_CalculateRowColumnBlockPhase" "', argument " "3"" of type '" "uint16_t &""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DataPacket_CalculateRowColumnBlockPhase" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataPacket_CalculateRowColumnBlockPhase" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  CTA::TargetDriver::DataPacket::CalculateRowColumnBlockPhase(arg1,*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetNCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint16_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataPacket_GetNCells", 0, 0, 0)) SWIG_fail;
  result = (uint16_t)CTA::TargetDriver::DataPacket::GetNCells();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetFirstCellId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetFirstCellId" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint16_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetFirstCellId();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetWaveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  CTA::TargetDriver::Waveform *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataPacket_GetWaveform", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetWaveform" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataPacket_GetWaveform" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  result = (CTA::TargetDriver::Waveform *)(arg1)->GetWaveform(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetPacketID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  uint16_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  bool result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetPacketID" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (bool)(arg1)->GetPacketID(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_short((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_unsigned_short, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_AssociateWaveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  uint16_t arg2 ;
  CTA::TargetDriver::Waveform *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataPacket_AssociateWaveform", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_AssociateWaveform" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataPacket_AssociateWaveform" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_CTA__TargetDriver__Waveform,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataPacket_AssociateWaveform" "', argument " "3"" of type '" "CTA::TargetDriver::Waveform &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataPacket_AssociateWaveform" "', argument " "3"" of type '" "CTA::TargetDriver::Waveform &""'"); 
  }
  arg3 = reinterpret_cast< CTA::TargetDriver::Waveform * >(argp3);
  (arg1)->AssociateWaveform(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_FillHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  uint64_t arg7 ;
  uint8_t arg8 ;
  uint8_t arg9 ;
  uint8_t arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned long long val7 ;
  int ecode7 = 0 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  unsigned char val9 ;
  int ecode9 = 0 ;
  unsigned char val10 ;
  int ecode10 = 0 ;
  PyObject *swig_obj[10] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataPacket_FillHeader", 10, 10, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_FillHeader" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataPacket_FillHeader" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataPacket_FillHeader" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DataPacket_FillHeader" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DataPacket_FillHeader" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "DataPacket_FillHeader" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "DataPacket_FillHeader" "', argument " "7"" of type '" "uint64_t""'");
  } 
  arg7 = static_cast< uint64_t >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "DataPacket_FillHeader" "', argument " "8"" of type '" "uint8_t""'");
  } 
  arg8 = static_cast< uint8_t >(val8);
  ecode9 = SWIG_AsVal_unsigned_SS_char(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "DataPacket_FillHeader" "', argument " "9"" of type '" "uint8_t""'");
  } 
  arg9 = static_cast< uint8_t >(val9);
  ecode10 = SWIG_AsVal_unsigned_SS_char(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "DataPacket_FillHeader" "', argument " "10"" of type '" "uint8_t""'");
  } 
  arg10 = static_cast< uint8_t >(val10);
  (arg1)->FillHeader(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_FillFooter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_FillFooter" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  (arg1)->FillFooter();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_SummarisePacket__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_SummarisePacket" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataPacket_SummarisePacket" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataPacket_SummarisePacket" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  (arg1)->SummarisePacket(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_SummarisePacket__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_SummarisePacket" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  (arg1)->SummarisePacket();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_SummarisePacket(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DataPacket_SummarisePacket", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DataPacket_SummarisePacket__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DataPacket_SummarisePacket__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DataPacket_SummarisePacket'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::DataPacket::SummarisePacket(std::ostream &)\n"
    "    CTA::TargetDriver::DataPacket::SummarisePacket()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataPacket_Allocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataPacket_Allocate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_Allocate" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataPacket_Allocate" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  (arg1)->Allocate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_Assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataPacket_Assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_Assign" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataPacket_Assign" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataPacket_Assign" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  (arg1)->Assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_Fill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataPacket_Fill", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_Fill" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataPacket_Fill" "', argument " "2"" of type '" "uint8_t const *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataPacket_Fill" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (bool)(arg1)->Fill((uint8_t const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_ClearFilledFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_ClearFilledFlag" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  (arg1)->ClearFilledFlag();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_Deallocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_Deallocate" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  (arg1)->Deallocate();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_IsFilled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_IsFilled" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (bool)((CTA::TargetDriver::DataPacket const *)arg1)->IsFilled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetPacketSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetPacketSize" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint16_t)((CTA::TargetDriver::DataPacket const *)arg1)->GetPacketSize();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_GetData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_GetData" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  result = (uint8_t *)(arg1)->GetData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_Print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_Print" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  ((CTA::TargetDriver::DataPacket const *)arg1)->Print();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPacket_FillZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = (CTA::TargetDriver::DataPacket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataPacket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPacket_FillZero" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  (arg1)->FillZero();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DataPacket_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__DataPacket, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DataPacket_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_TesterBoard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TesterBoard" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_Init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TesterBoard_Init", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_Init" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TesterBoard_Init" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TesterBoard_Init" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TesterBoard_Init" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TesterBoard_Init" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (int)(arg1)->Init((std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_GetFirmwareVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_GetFirmwareVersion" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  result = (uint32_t)(arg1)->GetFirmwareVersion();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_GetSerialNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_GetSerialNumber" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  result = (uint64_t)(arg1)->GetSerialNumber();
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_GetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_GetStatus" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  result = (uint32_t)(arg1)->GetStatus();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_PrintStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_PrintStatus" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  (arg1)->PrintStatus();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_TurnOffAnalogInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_TurnOffAnalogInput" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  (arg1)->TurnOffAnalogInput();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_IsCameraModuleConnected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_IsCameraModuleConnected" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  result = (bool)(arg1)->IsCameraModuleConnected();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_SetStatusOfBPLines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TesterBoard_SetStatusOfBPLines", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_SetStatusOfBPLines" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TesterBoard_SetStatusOfBPLines" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TesterBoard_SetStatusOfBPLines" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->SetStatusOfBPLines(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_EnableReset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TesterBoard_EnableReset", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_EnableReset" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TesterBoard_EnableReset" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->EnableReset(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_SetTriggerDeadTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TesterBoard_SetTriggerDeadTime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_SetTriggerDeadTime" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TesterBoard_SetTriggerDeadTime" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  result = (int)(arg1)->SetTriggerDeadTime(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_SetClockOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TesterBoard_SetClockOffset", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_SetClockOffset" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TesterBoard_SetClockOffset" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->SetClockOffset(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_SendSoftwareTrigger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_SendSoftwareTrigger" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  result = (int)(arg1)->SendSoftwareTrigger();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_ResyncTrigger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_ResyncTrigger" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  (arg1)->ResyncTrigger();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_SetTriggerModeAndType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TesterBoard_SetTriggerModeAndType", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_SetTriggerModeAndType" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TesterBoard_SetTriggerModeAndType" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TesterBoard_SetTriggerModeAndType" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  result = (int)(arg1)->SetTriggerModeAndType(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_SetTriggerMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TesterBoard_SetTriggerMode", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_SetTriggerMode" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TesterBoard_SetTriggerMode" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (int)(arg1)->SetTriggerMode(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_EnableExternalTrigger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TesterBoard_EnableExternalTrigger", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_EnableExternalTrigger" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TesterBoard_EnableExternalTrigger" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->EnableExternalTrigger(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_EnableSoftwareTrigger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TesterBoard_EnableSoftwareTrigger", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_EnableSoftwareTrigger" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TesterBoard_EnableSoftwareTrigger" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->EnableSoftwareTrigger(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_GetTriggerMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint8_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_GetTriggerMode" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  result = (uint8_t)(arg1)->GetTriggerMode();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_EnableTrigger__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  uint8_t arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_EnableTrigger" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TesterBoard_EnableTrigger" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TesterBoard_EnableTrigger" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TesterBoard_EnableTrigger" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TesterBoard_EnableTrigger" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TesterBoard_EnableTrigger" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->EnableTrigger(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_EnableTrigger__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_EnableTrigger" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TesterBoard_EnableTrigger" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TesterBoard_EnableTrigger" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TesterBoard_EnableTrigger" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->EnableTrigger(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_EnableTrigger(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TesterBoard_EnableTrigger", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TesterBoard_EnableTrigger__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TesterBoard_EnableTrigger__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TesterBoard_EnableTrigger'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::TesterBoard::EnableTrigger(uint8_t,bool,bool,bool,bool)\n"
    "    CTA::TargetDriver::TesterBoard::EnableTrigger(uint8_t,uint8_t,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TesterBoard_EnableTriggerCounterContribution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TesterBoard_EnableTriggerCounterContribution", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_EnableTriggerCounterContribution" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TesterBoard_EnableTriggerCounterContribution" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TesterBoard_EnableTriggerCounterContribution" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TesterBoard_EnableTriggerCounterContribution" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->EnableTriggerCounterContribution(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_StartTriggerEfficiencyCounter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TesterBoard_StartTriggerEfficiencyCounter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_StartTriggerEfficiencyCounter" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TesterBoard_StartTriggerEfficiencyCounter" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->StartTriggerEfficiencyCounter(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_GetTriggerCounter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_GetTriggerCounter" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  result = (uint32_t)(arg1)->GetTriggerCounter();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_GetTriggerEfficiencyCounter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_GetTriggerEfficiencyCounter" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  result = (uint32_t)(arg1)->GetTriggerEfficiencyCounter();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_StartTimeBaseCounting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TesterBoard_StartTimeBaseCounting", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_StartTimeBaseCounting" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TesterBoard_StartTimeBaseCounting" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  (arg1)->StartTimeBaseCounting(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_GetTACKMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_GetTACKMessage" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  result = (uint64_t)(arg1)->GetTACKMessage();
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_IsTriggerEfficiencyCounterOutsideDeadTimeCompleted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_IsTriggerEfficiencyCounterOutsideDeadTimeCompleted" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  result = (bool)(arg1)->IsTriggerEfficiencyCounterOutsideDeadTimeCompleted();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TesterBoard_GetTriggerEfficiencyCounterOutsideDeadTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *arg1 = (CTA::TargetDriver::TesterBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__TesterBoard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TesterBoard_GetTriggerEfficiencyCounterOutsideDeadTime" "', argument " "1"" of type '" "CTA::TargetDriver::TesterBoard *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::TesterBoard * >(argp1);
  result = (uint32_t)(arg1)->GetTriggerEfficiencyCounterOutsideDeadTime();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TesterBoard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::TesterBoard *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_TesterBoard", 0, 0, 0)) SWIG_fail;
  result = (CTA::TargetDriver::TesterBoard *)new CTA::TargetDriver::TesterBoard();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__TesterBoard, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TesterBoard_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__TesterBoard, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TesterBoard_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EventHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_EventHeader", 0, 0, 0)) SWIG_fail;
  result = (CTA::TargetDriver::EventHeader *)new CTA::TargetDriver::EventHeader();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__EventHeader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EventHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *arg1 = (CTA::TargetDriver::EventHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventHeader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EventHeader" "', argument " "1"" of type '" "CTA::TargetDriver::EventHeader *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventHeader * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventHeader_Init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *arg1 = (CTA::TargetDriver::EventHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventHeader_Init" "', argument " "1"" of type '" "CTA::TargetDriver::EventHeader *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventHeader * >(argp1);
  (arg1)->Init();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventHeader_SetEventID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *arg1 = (CTA::TargetDriver::EventHeader *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "EventHeader_SetEventID", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventHeader_SetEventID" "', argument " "1"" of type '" "CTA::TargetDriver::EventHeader *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventHeader * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EventHeader_SetEventID" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->SetEventID(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventHeader_GetEventID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *arg1 = (CTA::TargetDriver::EventHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventHeader_GetEventID" "', argument " "1"" of type '" "CTA::TargetDriver::EventHeader const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventHeader * >(argp1);
  result = (uint32_t)((CTA::TargetDriver::EventHeader const *)arg1)->GetEventID();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventHeader_SetTACK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *arg1 = (CTA::TargetDriver::EventHeader *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "EventHeader_SetTACK", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventHeader_SetTACK" "', argument " "1"" of type '" "CTA::TargetDriver::EventHeader *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventHeader * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EventHeader_SetTACK" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  (arg1)->SetTACK(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventHeader_GetTACK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *arg1 = (CTA::TargetDriver::EventHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventHeader_GetTACK" "', argument " "1"" of type '" "CTA::TargetDriver::EventHeader const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventHeader * >(argp1);
  result = (uint64_t)((CTA::TargetDriver::EventHeader const *)arg1)->GetTACK();
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventHeader_SetNPacketsFilled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *arg1 = (CTA::TargetDriver::EventHeader *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "EventHeader_SetNPacketsFilled", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventHeader_SetNPacketsFilled" "', argument " "1"" of type '" "CTA::TargetDriver::EventHeader *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventHeader * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EventHeader_SetNPacketsFilled" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  (arg1)->SetNPacketsFilled(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventHeader_GetNPacketsFilled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *arg1 = (CTA::TargetDriver::EventHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventHeader_GetNPacketsFilled" "', argument " "1"" of type '" "CTA::TargetDriver::EventHeader const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventHeader * >(argp1);
  result = (uint16_t)((CTA::TargetDriver::EventHeader const *)arg1)->GetNPacketsFilled();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventHeader_IncrementNPacketsFilled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *arg1 = (CTA::TargetDriver::EventHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventHeader_IncrementNPacketsFilled" "', argument " "1"" of type '" "CTA::TargetDriver::EventHeader *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventHeader * >(argp1);
  (arg1)->IncrementNPacketsFilled();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventHeader_SetTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *arg1 = (CTA::TargetDriver::EventHeader *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "EventHeader_SetTimeStamp", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventHeader_SetTimeStamp" "', argument " "1"" of type '" "CTA::TargetDriver::EventHeader *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventHeader * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EventHeader_SetTimeStamp" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EventHeader_SetTimeStamp" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  (arg1)->SetTimeStamp(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventHeader_GetTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *arg1 = (CTA::TargetDriver::EventHeader *) 0 ;
  int64_t *arg2 = 0 ;
  int64_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "EventHeader_GetTimeStamp", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventHeader_GetTimeStamp" "', argument " "1"" of type '" "CTA::TargetDriver::EventHeader const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventHeader * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EventHeader_GetTimeStamp" "', argument " "2"" of type '" "int64_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EventHeader_GetTimeStamp" "', argument " "2"" of type '" "int64_t &""'"); 
  }
  arg2 = reinterpret_cast< int64_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_long,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EventHeader_GetTimeStamp" "', argument " "3"" of type '" "int64_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EventHeader_GetTimeStamp" "', argument " "3"" of type '" "int64_t &""'"); 
  }
  arg3 = reinterpret_cast< int64_t * >(argp3);
  ((CTA::TargetDriver::EventHeader const *)arg1)->GetTimeStamp(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventHeader_SetTimeStampNow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *arg1 = (CTA::TargetDriver::EventHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventHeader_SetTimeStampNow" "', argument " "1"" of type '" "CTA::TargetDriver::EventHeader *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventHeader * >(argp1);
  (arg1)->SetTimeStampNow();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventHeader_CalcDeltaTSinceTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *arg1 = (CTA::TargetDriver::EventHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventHeader_CalcDeltaTSinceTimeStamp" "', argument " "1"" of type '" "CTA::TargetDriver::EventHeader const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventHeader * >(argp1);
  result = (double)((CTA::TargetDriver::EventHeader const *)arg1)->CalcDeltaTSinceTimeStamp();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventHeader_IfTimeStampIsZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventHeader *arg1 = (CTA::TargetDriver::EventHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventHeader_IfTimeStampIsZero" "', argument " "1"" of type '" "CTA::TargetDriver::EventHeader const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventHeader * >(argp1);
  result = (bool)((CTA::TargetDriver::EventHeader const *)arg1)->IfTimeStampIsZero();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_EventHeader_kColumnType_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EventHeader_kColumnType is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EventHeader_kColumnType_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&CTA::TargetDriver::EventHeader::kColumnType), SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_EventHeader_kColumnForm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EventHeader_kColumnForm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EventHeader_kColumnForm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&CTA::TargetDriver::EventHeader::kColumnForm), SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_EventHeader_kColumnUnit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EventHeader_kColumnUnit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EventHeader_kColumnUnit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&CTA::TargetDriver::EventHeader::kColumnUnit), SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  return pyobj;
}


SWIGINTERN PyObject *EventHeader_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__EventHeader, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EventHeader_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RawEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint16_t arg1 ;
  uint16_t arg2 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  CTA::TargetDriver::RawEvent *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RawEvent", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RawEvent" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RawEvent" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  result = (CTA::TargetDriver::RawEvent *)new CTA::TargetDriver::RawEvent(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__RawEvent, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RawEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RawEvent" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_Clear" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_GetDataPackets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< CTA::TargetDriver::DataPacket * > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_GetDataPackets" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  result = (std::vector< CTA::TargetDriver::DataPacket * > *) &((CTA::TargetDriver::RawEvent const *)arg1)->GetDataPackets();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_CTA__TargetDriver__DataPacket_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_GetPacketSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_GetPacketSize" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  result = (uint16_t)((CTA::TargetDriver::RawEvent const *)arg1)->GetPacketSize();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_GetEventHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  CTA::TargetDriver::EventHeader *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_GetEventHeader" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  result = (CTA::TargetDriver::EventHeader *) &(arg1)->GetEventHeader();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__EventHeader, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_GetNPacketsPerEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_GetNPacketsPerEvent" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  result = ((CTA::TargetDriver::RawEvent const *)arg1)->GetNPacketsPerEvent();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_GetTimeoutSec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_GetTimeoutSec" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  result = (double)((CTA::TargetDriver::RawEvent const *)arg1)->GetTimeoutSec();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_SetTimeoutSec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RawEvent_SetTimeoutSec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  CTA::TargetDriver::RawEvent::SetTimeoutSec(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_IsEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_IsEmpty" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  result = (bool)((CTA::TargetDriver::RawEvent const *)arg1)->IsEmpty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_IsTimedOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_IsTimedOut" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  result = (bool)(arg1)->IsTimedOut();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_WasFlushed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_WasFlushed" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  result = (bool)((CTA::TargetDriver::RawEvent const *)arg1)->WasFlushed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_WasRead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_WasRead" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  result = (bool)((CTA::TargetDriver::RawEvent const *)arg1)->WasRead();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_SetToRead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_SetToRead" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  (arg1)->SetToRead();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_SetToFlushed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_SetToFlushed" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  (arg1)->SetToFlushed();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_IsBeingBuilt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_IsBeingBuilt" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  result = (bool)((CTA::TargetDriver::RawEvent const *)arg1)->IsBeingBuilt();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_IsComplete(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_IsComplete" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  result = (bool)((CTA::TargetDriver::RawEvent const *)arg1)->IsComplete();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_AddNewPacket__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_AddNewPacket" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RawEvent_AddNewPacket" "', argument " "2"" of type '" "uint8_t const *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RawEvent_AddNewPacket" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RawEvent_AddNewPacket" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RawEvent_AddNewPacket" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (bool)(arg1)->AddNewPacket((uint8_t const *)arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_AddNewPacket__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  bool result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_AddNewPacket" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RawEvent_AddNewPacket" "', argument " "2"" of type '" "uint8_t const *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RawEvent_AddNewPacket" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RawEvent_AddNewPacket" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  result = (bool)(arg1)->AddNewPacket((uint8_t const *)arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawEvent_AddNewPacket(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RawEvent_AddNewPacket", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_char, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RawEvent_AddNewPacket__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_char, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_RawEvent_AddNewPacket__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RawEvent_AddNewPacket'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::RawEvent::AddNewPacket(uint8_t const *,uint16_t,uint16_t,bool)\n"
    "    CTA::TargetDriver::RawEvent::AddNewPacket(uint8_t const *,uint16_t,uint16_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RawEvent_WaveformCheckStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::RawEvent *arg1 = (CTA::TargetDriver::RawEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawEvent_WaveformCheckStatus" "', argument " "1"" of type '" "CTA::TargetDriver::RawEvent *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::RawEvent * >(argp1);
  result = (bool)(arg1)->WaveformCheckStatus();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RawEvent_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__RawEvent, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RawEvent_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EventBuffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  float arg4 ;
  uint32_t arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  CTA::TargetDriver::EventBuffer *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_EventBuffer" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EventBuffer" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_EventBuffer" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_EventBuffer" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_EventBuffer" "', argument " "5"" of type '" "uint32_t""'");
  } 
  arg5 = static_cast< uint32_t >(val5);
  result = (CTA::TargetDriver::EventBuffer *)new CTA::TargetDriver::EventBuffer(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__EventBuffer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EventBuffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  float arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  CTA::TargetDriver::EventBuffer *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_EventBuffer" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EventBuffer" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_EventBuffer" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_EventBuffer" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (CTA::TargetDriver::EventBuffer *)new CTA::TargetDriver::EventBuffer(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__EventBuffer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EventBuffer__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  CTA::TargetDriver::EventBuffer *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_EventBuffer" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EventBuffer" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_EventBuffer" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (CTA::TargetDriver::EventBuffer *)new CTA::TargetDriver::EventBuffer(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__EventBuffer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EventBuffer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_EventBuffer", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_EventBuffer__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_EventBuffer__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_EventBuffer__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_EventBuffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::EventBuffer::EventBuffer(uint32_t,uint16_t,uint16_t,float,uint32_t)\n"
    "    CTA::TargetDriver::EventBuffer::EventBuffer(uint32_t,uint16_t,uint16_t,float)\n"
    "    CTA::TargetDriver::EventBuffer::EventBuffer(uint32_t,uint16_t,uint16_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_EventBuffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EventBuffer" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_AddNewPacket(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint32_t arg3 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "EventBuffer_AddNewPacket", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_AddNewPacket" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EventBuffer_AddNewPacket" "', argument " "2"" of type '" "uint8_t const *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EventBuffer_AddNewPacket" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EventBuffer_AddNewPacket" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EventBuffer_AddNewPacket" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  result = (bool)(arg1)->AddNewPacket((uint8_t const *)arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_ReadEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  CTA::TargetDriver::RawEvent *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_ReadEvent" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  result = (CTA::TargetDriver::RawEvent *)(arg1)->ReadEvent();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__RawEvent, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_Clear" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_ClearEvents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_ClearEvents" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  (arg1)->ClearEvents();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_Flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_Flush" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  (arg1)->Flush();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_Report(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "EventBuffer_Report", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_Report" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EventBuffer_Report" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EventBuffer_Report" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ((CTA::TargetDriver::EventBuffer const *)arg1)->Report(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_StatusOK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_StatusOK" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  result = (bool)((CTA::TargetDriver::EventBuffer const *)arg1)->StatusOK();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_GetEventRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  float result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_GetEventRate" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  result = (float)((CTA::TargetDriver::EventBuffer const *)arg1)->GetEventRate();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_GetPacketSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_GetPacketSize" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  result = (uint16_t)((CTA::TargetDriver::EventBuffer const *)arg1)->GetPacketSize();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_GetNPacketsPerEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_GetNPacketsPerEvent" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  result = (uint16_t)((CTA::TargetDriver::EventBuffer const *)arg1)->GetNPacketsPerEvent();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_GetReadIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_GetReadIndex" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  result = (int64_t)((CTA::TargetDriver::EventBuffer const *)arg1)->GetReadIndex();
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_GetWriteIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_GetWriteIndex" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  result = (int64_t)((CTA::TargetDriver::EventBuffer const *)arg1)->GetWriteIndex();
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_GetFinishedIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_GetFinishedIndex" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  result = (int64_t)((CTA::TargetDriver::EventBuffer const *)arg1)->GetFinishedIndex();
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_GetNumberIncomplete(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_GetNumberIncomplete" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  result = (int64_t)((CTA::TargetDriver::EventBuffer const *)arg1)->GetNumberIncomplete();
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_GetNumberToBeRead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_GetNumberToBeRead" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  result = (int64_t)((CTA::TargetDriver::EventBuffer const *)arg1)->GetNumberToBeRead();
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EventBuffer_DiagnosticReport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::EventBuffer *arg1 = (CTA::TargetDriver::EventBuffer *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "EventBuffer_DiagnosticReport", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__EventBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EventBuffer_DiagnosticReport" "', argument " "1"" of type '" "CTA::TargetDriver::EventBuffer const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::EventBuffer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EventBuffer_DiagnosticReport" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EventBuffer_DiagnosticReport" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ((CTA::TargetDriver::EventBuffer const *)arg1)->DiagnosticReport(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EventBuffer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__EventBuffer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EventBuffer_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DataListener__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  float arg4 ;
  uint32_t arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  CTA::TargetDriver::DataListener *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DataListener" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DataListener" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DataListener" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DataListener" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DataListener" "', argument " "5"" of type '" "uint32_t""'");
  } 
  arg5 = static_cast< uint32_t >(val5);
  result = (CTA::TargetDriver::DataListener *)new CTA::TargetDriver::DataListener(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__DataListener, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataListener__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  float arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  CTA::TargetDriver::DataListener *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DataListener" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DataListener" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DataListener" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DataListener" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (CTA::TargetDriver::DataListener *)new CTA::TargetDriver::DataListener(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__DataListener, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataListener__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  CTA::TargetDriver::DataListener *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DataListener" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DataListener" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DataListener" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (CTA::TargetDriver::DataListener *)new CTA::TargetDriver::DataListener(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CTA__TargetDriver__DataListener, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataListener(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DataListener", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DataListener__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_DataListener__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_DataListener__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DataListener'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::DataListener::DataListener(uint32_t,uint16_t,uint16_t,float,uint32_t)\n"
    "    CTA::TargetDriver::DataListener::DataListener(uint32_t,uint16_t,uint16_t,float)\n"
    "    CTA::TargetDriver::DataListener::DataListener(uint32_t,uint16_t,uint16_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DataListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataListener *arg1 = (CTA::TargetDriver::DataListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataListener, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataListener" "', argument " "1"" of type '" "CTA::TargetDriver::DataListener *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataListener * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataListener_AddDAQListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataListener *arg1 = (CTA::TargetDriver::DataListener *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataListener_AddDAQListener", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataListener_AddDAQListener" "', argument " "1"" of type '" "CTA::TargetDriver::DataListener *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataListener * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataListener_AddDAQListener" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataListener_AddDAQListener" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->AddDAQListener((std::string const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataListener_StopListening(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataListener *arg1 = (CTA::TargetDriver::DataListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataListener_StopListening" "', argument " "1"" of type '" "CTA::TargetDriver::DataListener *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataListener * >(argp1);
  (arg1)->StopListening();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataListener_StartListening(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataListener *arg1 = (CTA::TargetDriver::DataListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataListener_StartListening" "', argument " "1"" of type '" "CTA::TargetDriver::DataListener *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataListener * >(argp1);
  (arg1)->StartListening();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataListener_IsRunning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataListener *arg1 = (CTA::TargetDriver::DataListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataListener_IsRunning" "', argument " "1"" of type '" "CTA::TargetDriver::DataListener const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataListener * >(argp1);
  result = (bool)((CTA::TargetDriver::DataListener const *)arg1)->IsRunning();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataListener_DropPackets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataListener *arg1 = (CTA::TargetDriver::DataListener *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataListener_DropPackets" "', argument " "1"" of type '" "CTA::TargetDriver::DataListener *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataListener * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataListener_DropPackets" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->DropPackets(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataListener_DropPackets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataListener *arg1 = (CTA::TargetDriver::DataListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataListener_DropPackets" "', argument " "1"" of type '" "CTA::TargetDriver::DataListener *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataListener * >(argp1);
  (arg1)->DropPackets();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataListener_DropPackets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DataListener_DropPackets", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__DataListener, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DataListener_DropPackets__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CTA__TargetDriver__DataListener, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DataListener_DropPackets__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DataListener_DropPackets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTA::TargetDriver::DataListener::DropPackets(bool)\n"
    "    CTA::TargetDriver::DataListener::DropPackets()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataListener_GetNPacketsReceived(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataListener *arg1 = (CTA::TargetDriver::DataListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataListener_GetNPacketsReceived" "', argument " "1"" of type '" "CTA::TargetDriver::DataListener const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataListener * >(argp1);
  result = (uint64_t)((CTA::TargetDriver::DataListener const *)arg1)->GetNPacketsReceived();
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataListener_GetNPacketProblems(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataListener *arg1 = (CTA::TargetDriver::DataListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataListener_GetNPacketProblems" "', argument " "1"" of type '" "CTA::TargetDriver::DataListener const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataListener * >(argp1);
  result = (uint64_t)((CTA::TargetDriver::DataListener const *)arg1)->GetNPacketProblems();
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataListener_GetEventBuffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataListener *arg1 = (CTA::TargetDriver::DataListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::shared_ptr< CTA::TargetDriver::EventBuffer > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CTA__TargetDriver__DataListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataListener_GetEventBuffer" "', argument " "1"" of type '" "CTA::TargetDriver::DataListener const *""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataListener * >(argp1);
  result = ((CTA::TargetDriver::DataListener const *)arg1)->GetEventBuffer();
  resultobj = SWIG_NewPointerObj((new std::shared_ptr< CTA::TargetDriver::EventBuffer >(static_cast< const std::shared_ptr< CTA::TargetDriver::EventBuffer >& >(result))), SWIGTYPE_p_std__shared_ptrT_CTA__TargetDriver__EventBuffer_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DataListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CTA__TargetDriver__DataListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DataListener_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_get_default_config_dir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_default_config_dir", 0, 0, 0)) SWIG_fail;
  result = CTA::TargetDriver::get_default_config_dir();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_send_waveform_packet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CTA::TargetDriver::DataPacket *arg1 = 0 ;
  CTA::TargetDriver::ModuleSimulator *arg2 = 0 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "send_waveform_packet", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_CTA__TargetDriver__DataPacket,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "send_waveform_packet" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "send_waveform_packet" "', argument " "1"" of type '" "CTA::TargetDriver::DataPacket &""'"); 
  }
  arg1 = reinterpret_cast< CTA::TargetDriver::DataPacket * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_CTA__TargetDriver__ModuleSimulator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "send_waveform_packet" "', argument " "2"" of type '" "CTA::TargetDriver::ModuleSimulator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "send_waveform_packet" "', argument " "2"" of type '" "CTA::TargetDriver::ModuleSimulator &""'"); 
  }
  arg2 = reinterpret_cast< CTA::TargetDriver::ModuleSimulator * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "send_waveform_packet" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "send_waveform_packet" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  result = (int)CTA::TargetDriver::send_waveform_packet(*arg1,*arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, "delete_SwigPyIterator(SwigPyIterator self)"},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, "SwigPyIterator_value(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, "SwigPyIterator_incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"},
	 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, "SwigPyIterator_decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"},
	 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, "SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"},
	 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, "SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, "SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator"},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, "SwigPyIterator_next(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, "SwigPyIterator___next__(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, "SwigPyIterator_previous(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, "SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, "SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, "SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, "SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, "SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, "SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, "\n"
		"SwigPyIterator___sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		""},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "new_UDPBase", _wrap_new_UDPBase, METH_NOARGS, "new_UDPBase() -> UDPBase"},
	 { "delete_UDPBase", _wrap_delete_UDPBase, METH_O, "delete_UDPBase(UDPBase self)"},
	 { "UDPBase_Receive", _wrap_UDPBase_Receive, METH_VARARGS, "UDPBase_Receive(UDPBase self, void * message, ssize_t & length, uint32_t max_length) -> int"},
	 { "UDPBase_CloseSocket", _wrap_UDPBase_CloseSocket, METH_O, "UDPBase_CloseSocket(UDPBase self)"},
	 { "UDPBase_ReturnCodeToString", _wrap_UDPBase_ReturnCodeToString, METH_VARARGS, "UDPBase_ReturnCodeToString(UDPBase self, int code) -> std::string"},
	 { "UDPBase_SetVerbose", _wrap_UDPBase_SetVerbose, METH_VARARGS, "UDPBase_SetVerbose(UDPBase self, bool verbose=True)"},
	 { "UDPBase_swigregister", UDPBase_swigregister, METH_O, NULL},
	 { "UDPBase_swiginit", UDPBase_swiginit, METH_VARARGS, NULL},
	 { "new_UDPClient", _wrap_new_UDPClient, METH_VARARGS, "UDPClient(uint8_t maxattempts=5, uint32_t sctimeout_ms=200, uint32_t datatimeout_ms=20)"},
	 { "delete_UDPClient", _wrap_delete_UDPClient, METH_O, "delete_UDPClient(UDPClient self)"},
	 { "UDPClient_ConnectToServer", _wrap_UDPClient_ConnectToServer, METH_VARARGS, "UDPClient_ConnectToServer(UDPClient self, std::string const & pMyIP, uint16_t pMySourcePort, std::string const & pServerIP, uint16_t pServerPort, int32_t pSocketBufferSize=-1) -> int"},
	 { "UDPClient_AddDataListener", _wrap_UDPClient_AddDataListener, METH_VARARGS, "UDPClient_AddDataListener(UDPClient self, std::string const & pMyIP, uint16_t pMyDataReceivePort, int32_t pSocketBufferSize=-1) -> int"},
	 { "UDPClient_CloseSockets", _wrap_UDPClient_CloseSockets, METH_O, "UDPClient_CloseSockets(UDPClient self)"},
	 { "UDPClient_CloseDataListenerSockets", _wrap_UDPClient_CloseDataListenerSockets, METH_O, "UDPClient_CloseDataListenerSockets(UDPClient self)"},
	 { "UDPClient_GetDataPacket", _wrap_UDPClient_GetDataPacket, METH_VARARGS, "UDPClient_GetDataPacket(UDPClient self, void * tobefilled, uint32_t & bytes, size_t maxbytes) -> int"},
	 { "UDPClient_SendAndReceive", _wrap_UDPClient_SendAndReceive, METH_VARARGS, "UDPClient_SendAndReceive(UDPClient self, void const * message, uint32_t length, uint32_t maxlength) -> int"},
	 { "UDPClient_SetMaxAttempts", _wrap_UDPClient_SetMaxAttempts, METH_VARARGS, "UDPClient_SetMaxAttempts(UDPClient self, uint8_t max_attempts)"},
	 { "UDPClient_swigregister", UDPClient_swigregister, METH_O, NULL},
	 { "UDPClient_swiginit", UDPClient_swiginit, METH_VARARGS, NULL},
	 { "new_UDPServer", _wrap_new_UDPServer, METH_VARARGS, "UDPServer(std::string const & pMyIP, uint16_t pSlowControlListeningPort, uint16_t pDataDestPort, uint32_t receive_timout_ms=100)"},
	 { "delete_UDPServer", _wrap_delete_UDPServer, METH_O, "delete_UDPServer(UDPServer self)"},
	 { "UDPServer_SendResponse", _wrap_UDPServer_SendResponse, METH_VARARGS, "UDPServer_SendResponse(UDPServer self, void const * data, uint32_t length) -> int"},
	 { "UDPServer_SendDataPacket", _wrap_UDPServer_SendDataPacket, METH_VARARGS, "UDPServer_SendDataPacket(UDPServer self, void const * data, uint32_t length) -> int"},
	 { "UDPServer_Setup", _wrap_UDPServer_Setup, METH_VARARGS, "UDPServer_Setup(UDPServer self, std::string const & pMyIP, uint16_t pSlowControlListeningPort, uint16_t pDataDestPort, uint32_t receive_timout_ms) -> int"},
	 { "UDPServer_swigregister", UDPServer_swigregister, METH_O, NULL},
	 { "UDPServer_swiginit", UDPServer_swiginit, METH_VARARGS, NULL},
	 { "new_TargetModule", _wrap_new_TargetModule, METH_VARARGS, "\n"
		"TargetModule(uint16_t pModuleId=1)\n"
		"TargetModule(std::string const & pFPGADef, std::string const & pASICDef, uint16_t pModuleId=1)\n"
		"TargetModule(std::string const & pFPGADef, std::string const & pASICDef, std::string const & pTriggerASICDef, uint16_t pModuleId=1)\n"
		""},
	 { "TargetModule_SetIPAddresses", _wrap_TargetModule_SetIPAddresses, METH_VARARGS, "TargetModule_SetIPAddresses(TargetModule self, std::string const & pClientIP, std::string const & pModuleIP)"},
	 { "TargetModule_SetClientIP", _wrap_TargetModule_SetClientIP, METH_VARARGS, "TargetModule_SetClientIP(TargetModule self, std::string const & pClientIP)"},
	 { "TargetModule_SetModuleIP", _wrap_TargetModule_SetModuleIP, METH_VARARGS, "TargetModule_SetModuleIP(TargetModule self, std::string const & pModuleIP)"},
	 { "TargetModule_Exists", _wrap_TargetModule_Exists, METH_VARARGS, "TargetModule_Exists(TargetModule self, std::string ipaddress, std::string myip) -> bool"},
	 { "TargetModule_Connect", _wrap_TargetModule_Connect, METH_O, "TargetModule_Connect(TargetModule self) -> int"},
	 { "TargetModule_EstablishSlowControlLink", _wrap_TargetModule_EstablishSlowControlLink, METH_VARARGS, "TargetModule_EstablishSlowControlLink(TargetModule self, std::string const & pClientIP, std::string const & pModuelIP) -> int"},
	 { "TargetModule_AddDAQListener", _wrap_TargetModule_AddDAQListener, METH_VARARGS, "TargetModule_AddDAQListener(TargetModule self, std::string const & pClientIP) -> int"},
	 { "TargetModule_PackControlPacket", _wrap_TargetModule_PackControlPacket, METH_VARARGS, "TargetModule_PackControlPacket(uint8_t * packet, uint32_t addr, uint32_t data, bool iswrite)"},
	 { "TargetModule_UnpackControlPacket", _wrap_TargetModule_UnpackControlPacket, METH_VARARGS, "TargetModule_UnpackControlPacket(uint8_t const * packet, uint32_t & addr, bool & iswrite) -> int"},
	 { "TargetModule_GetFirmwareVersion", _wrap_TargetModule_GetFirmwareVersion, METH_O, "TargetModule_GetFirmwareVersion(TargetModule self) -> int"},
	 { "TargetModule_GetPrimaryBoardID", _wrap_TargetModule_GetPrimaryBoardID, METH_O, "TargetModule_GetPrimaryBoardID(TargetModule self) -> int"},
	 { "TargetModule_CheckResponse", _wrap_TargetModule_CheckResponse, METH_O, "TargetModule_CheckResponse(uint8_t const * packet) -> int"},
	 { "TargetModule_GetClockPhase", _wrap_TargetModule_GetClockPhase, METH_O, "TargetModule_GetClockPhase(TargetModule self) -> int"},
	 { "TargetModule_StopSampling", _wrap_TargetModule_StopSampling, METH_O, "TargetModule_StopSampling(TargetModule self)"},
	 { "TargetModule_CheckRegisters", _wrap_TargetModule_CheckRegisters, METH_O, "TargetModule_CheckRegisters(TargetModule self) -> int"},
	 { "TargetModule_GoToSafe", _wrap_TargetModule_GoToSafe, METH_O, "TargetModule_GoToSafe(TargetModule self) -> int"},
	 { "TargetModule_GoToPreSync", _wrap_TargetModule_GoToPreSync, METH_O, "TargetModule_GoToPreSync(TargetModule self) -> int"},
	 { "TargetModule_GoToReady", _wrap_TargetModule_GoToReady, METH_O, "TargetModule_GoToReady(TargetModule self) -> int"},
	 { "TargetModule_IsReady", _wrap_TargetModule_IsReady, METH_O, "TargetModule_IsReady(TargetModule self) -> bool"},
	 { "TargetModule_IsPreSync", _wrap_TargetModule_IsPreSync, METH_O, "TargetModule_IsPreSync(TargetModule self) -> bool"},
	 { "TargetModule_IsSafe", _wrap_TargetModule_IsSafe, METH_O, "TargetModule_IsSafe(TargetModule self) -> bool"},
	 { "TargetModule_IsUndefined", _wrap_TargetModule_IsUndefined, METH_O, "TargetModule_IsUndefined(TargetModule self) -> bool"},
	 { "TargetModule_IsContactable", _wrap_TargetModule_IsContactable, METH_O, "TargetModule_IsContactable(TargetModule self) -> bool"},
	 { "TargetModule_IsUnresponsive", _wrap_TargetModule_IsUnresponsive, METH_O, "TargetModule_IsUnresponsive(TargetModule self) -> bool"},
	 { "TargetModule_GetState", _wrap_TargetModule_GetState, METH_O, "TargetModule_GetState(TargetModule self) -> int"},
	 { "TargetModule_ReconnectToServer", _wrap_TargetModule_ReconnectToServer, METH_VARARGS, "TargetModule_ReconnectToServer(TargetModule self, std::string const & pMyIP, uint16_t pMySourcePort, std::string const & pServerIP, uint16_t pServerPort, int32_t pSocketBufferSize=-1) -> int"},
	 { "TargetModule_PrintAllRegisterSettings", _wrap_TargetModule_PrintAllRegisterSettings, METH_O, "TargetModule_PrintAllRegisterSettings(TargetModule self)"},
	 { "TargetModule_PrintAllRegisterValues", _wrap_TargetModule_PrintAllRegisterValues, METH_O, "TargetModule_PrintAllRegisterValues(TargetModule self)"},
	 { "TargetModule_GetStateString", _wrap_TargetModule_GetStateString, METH_O, "TargetModule_GetStateString(TargetModule self) -> std::string"},
	 { "TargetModule_WriteRegister", _wrap_TargetModule_WriteRegister, METH_VARARGS, "TargetModule_WriteRegister(TargetModule self, uint32_t address, uint32_t data) -> int"},
	 { "TargetModule_WriteRegisterAndCheck", _wrap_TargetModule_WriteRegisterAndCheck, METH_VARARGS, "TargetModule_WriteRegisterAndCheck(TargetModule self, uint32_t address, uint32_t data) -> int"},
	 { "TargetModule_WriteTARGETRegister", _wrap_TargetModule_WriteTARGETRegister, METH_VARARGS, "\n"
		"TargetModule_WriteTARGETRegister(TargetModule self, bool enableAsic0, bool enableAsic1, bool enableAsic2, bool enableAsic3, bool readback, bool latchIsRequired, uint8_t address, uint16_t value, bool isTriggerASIC=False) -> int\n"
		"TargetModule_WriteTARGETRegister(TargetModule self, bool readback, bool latchIsRequired, uint8_t address, uint16_t value, bool isTriggerASIC=False) -> int\n"
		""},
	 { "TargetModule_WriteSetting", _wrap_TargetModule_WriteSetting, METH_VARARGS, "TargetModule_WriteSetting(TargetModule self, std::string const & name, uint32_t val) -> int"},
	 { "TargetModule_ReadSetting", _wrap_TargetModule_ReadSetting, METH_VARARGS, "TargetModule_ReadSetting(TargetModule self, std::string const & name) -> int"},
	 { "TargetModule_WriteSettingFromConfig", _wrap_TargetModule_WriteSettingFromConfig, METH_VARARGS, "TargetModule_WriteSettingFromConfig(TargetModule self, std::string const & name) -> int"},
	 { "TargetModule_WriteRegisterFromConfig", _wrap_TargetModule_WriteRegisterFromConfig, METH_VARARGS, "TargetModule_WriteRegisterFromConfig(TargetModule self, uint32_t address) -> int"},
	 { "TargetModule_WriteASICSetting", _wrap_TargetModule_WriteASICSetting, METH_VARARGS, "TargetModule_WriteASICSetting(TargetModule self, std::string const & name, uint8_t asic, uint16_t val, bool individualASIC=False, bool isTriggerASIC=False) -> int"},
	 { "TargetModule_WriteTriggerASICSetting", _wrap_TargetModule_WriteTriggerASICSetting, METH_VARARGS, "TargetModule_WriteTriggerASICSetting(TargetModule self, std::string const & name, uint8_t asic, uint16_t val, bool individualASIC=False) -> int"},
	 { "TargetModule_WriteASICRegisterFromConfig", _wrap_TargetModule_WriteASICRegisterFromConfig, METH_VARARGS, "TargetModule_WriteASICRegisterFromConfig(TargetModule self, uint8_t address, uint8_t asic=0, bool individualASIC=False, bool isTriggerASIC=False) -> int"},
	 { "TargetModule_WriteTriggerASICRegisterFromConfig", _wrap_TargetModule_WriteTriggerASICRegisterFromConfig, METH_VARARGS, "TargetModule_WriteTriggerASICRegisterFromConfig(TargetModule self, uint8_t address, uint8_t asic=0, bool individualASIC=False) -> int"},
	 { "TargetModule_WriteASICSettingFromConfig", _wrap_TargetModule_WriteASICSettingFromConfig, METH_VARARGS, "TargetModule_WriteASICSettingFromConfig(TargetModule self, std::string const & name, uint8_t asic=0, bool individualASIC=False, bool isTriggerASIC=False) -> int"},
	 { "TargetModule_WriteTriggerASICSettingFromConfig", _wrap_TargetModule_WriteTriggerASICSettingFromConfig, METH_VARARGS, "TargetModule_WriteTriggerASICSettingFromConfig(TargetModule self, std::string const & name, uint8_t asic=0, bool individualASIC=False) -> int"},
	 { "TargetModule_WriteSettingCalibrated", _wrap_TargetModule_WriteSettingCalibrated, METH_VARARGS, "TargetModule_WriteSettingCalibrated(TargetModule self, std::string const & name, float val) -> int"},
	 { "TargetModule_ReadSettingCalibrated", _wrap_TargetModule_ReadSettingCalibrated, METH_VARARGS, "TargetModule_ReadSettingCalibrated(TargetModule self, std::string const & name) -> int"},
	 { "TargetModule_WriteSettingASICCalibrated", _wrap_TargetModule_WriteSettingASICCalibrated, METH_VARARGS, "TargetModule_WriteSettingASICCalibrated(TargetModule self, std::string const & name, uint8_t asic, float val, bool individualASIC=False, bool isTriggerASIC=False) -> int"},
	 { "TargetModule_WriteSettingTriggerASICCalibrated", _wrap_TargetModule_WriteSettingTriggerASICCalibrated, METH_VARARGS, "TargetModule_WriteSettingTriggerASICCalibrated(TargetModule self, std::string const & name, uint8_t asic, float val, bool individualASIC=False) -> int"},
	 { "TargetModule_PowerUpASIC", _wrap_TargetModule_PowerUpASIC, METH_VARARGS, "TargetModule_PowerUpASIC(TargetModule self, uint8_t asic=0, bool individialASIC=False) -> int"},
	 { "TargetModule_Initialise", _wrap_TargetModule_Initialise, METH_O, "TargetModule_Initialise(TargetModule self) -> int"},
	 { "TargetModule_EnableDLLFeedback", _wrap_TargetModule_EnableDLLFeedback, METH_O, "TargetModule_EnableDLLFeedback(TargetModule self) -> int"},
	 { "TargetModule_DisableDLLFeedBack", _wrap_TargetModule_DisableDLLFeedBack, METH_O, "TargetModule_DisableDLLFeedBack(TargetModule self) -> int"},
	 { "TargetModule_ReadRegister", _wrap_TargetModule_ReadRegister, METH_VARARGS, "TargetModule_ReadRegister(TargetModule self, uint32_t address) -> int"},
	 { "TargetModule_FillRegisterMapFromFPGA", _wrap_TargetModule_FillRegisterMapFromFPGA, METH_O, "TargetModule_FillRegisterMapFromFPGA(TargetModule self) -> int"},
	 { "TargetModule_DataPortPing", _wrap_TargetModule_DataPortPing, METH_VARARGS, "\n"
		"TargetModule_DataPortPing(std::string const & pClientIP, std::string const & pModuelIP)\n"
		"TargetModule_DataPortPing()\n"
		""},
	 { "TargetModule_DeleteDAQListeners", _wrap_TargetModule_DeleteDAQListeners, METH_O, "TargetModule_DeleteDAQListeners(TargetModule self)"},
	 { "TargetModule_QueryAndPrintAllRegisters", _wrap_TargetModule_QueryAndPrintAllRegisters, METH_VARARGS, "TargetModule_QueryAndPrintAllRegisters(TargetModule self, std::ostream & stream)"},
	 { "TargetModule_ReadHVCurrentInput", _wrap_TargetModule_ReadHVCurrentInput, METH_O, "TargetModule_ReadHVCurrentInput(TargetModule self) -> int"},
	 { "TargetModule_ReadHVVoltageInput", _wrap_TargetModule_ReadHVVoltageInput, METH_O, "TargetModule_ReadHVVoltageInput(TargetModule self) -> int"},
	 { "TargetModule_GetTempI2CPower", _wrap_TargetModule_GetTempI2CPower, METH_O, "TargetModule_GetTempI2CPower(TargetModule self) -> int"},
	 { "TargetModule_GetTempI2CAux", _wrap_TargetModule_GetTempI2CAux, METH_O, "TargetModule_GetTempI2CAux(TargetModule self) -> int"},
	 { "TargetModule_GetTempI2CPrimary", _wrap_TargetModule_GetTempI2CPrimary, METH_O, "TargetModule_GetTempI2CPrimary(TargetModule self) -> int"},
	 { "TargetModule_GetTempSIPM", _wrap_TargetModule_GetTempSIPM, METH_O, "TargetModule_GetTempSIPM(TargetModule self) -> int"},
	 { "TargetModule_ReadPowerBoardID", _wrap_TargetModule_ReadPowerBoardID, METH_O, "TargetModule_ReadPowerBoardID(TargetModule self) -> int"},
	 { "TargetModule_ReadHVEnableBytes", _wrap_TargetModule_ReadHVEnableBytes, METH_VARARGS, "TargetModule_ReadHVEnableBytes(TargetModule self, uint8_t & byte0, uint8_t & byte1) -> int"},
	 { "TargetModule_IsHVEnabled", _wrap_TargetModule_IsHVEnabled, METH_VARARGS, "TargetModule_IsHVEnabled(TargetModule self, uint8_t superPixel) -> int"},
	 { "TargetModule_WhichHVEnabled", _wrap_TargetModule_WhichHVEnabled, METH_VARARGS, "TargetModule_WhichHVEnabled(TargetModule self, std::vector< bool > & enabled) -> int"},
	 { "TargetModule_DisableHVSuperPixel", _wrap_TargetModule_DisableHVSuperPixel, METH_VARARGS, "TargetModule_DisableHVSuperPixel(TargetModule self, uint8_t superPixel) -> int"},
	 { "TargetModule_EnableHVSuperPixel", _wrap_TargetModule_EnableHVSuperPixel, METH_VARARGS, "TargetModule_EnableHVSuperPixel(TargetModule self, uint8_t superPixel) -> int"},
	 { "TargetModule_DisableHVAll", _wrap_TargetModule_DisableHVAll, METH_O, "TargetModule_DisableHVAll(TargetModule self) -> int"},
	 { "TargetModule_EnableHVAll", _wrap_TargetModule_EnableHVAll, METH_O, "TargetModule_EnableHVAll(TargetModule self) -> int"},
	 { "TargetModule_SetHVDAC", _wrap_TargetModule_SetHVDAC, METH_VARARGS, "TargetModule_SetHVDAC(TargetModule self, uint8_t superPixel, uint8_t val) -> int"},
	 { "TargetModule_ReadHVDAC", _wrap_TargetModule_ReadHVDAC, METH_VARARGS, "TargetModule_ReadHVDAC(TargetModule self, uint8_t superPixel) -> int"},
	 { "TargetModule_SetHVDACAll", _wrap_TargetModule_SetHVDACAll, METH_VARARGS, "TargetModule_SetHVDACAll(TargetModule self, uint8_t dacVal) -> int"},
	 { "TargetModule_SuperPixelIdToI2CAddr", _wrap_TargetModule_SuperPixelIdToI2CAddr, METH_VARARGS, "TargetModule_SuperPixelIdToI2CAddr(TargetModule self, uint8_t spId) -> int"},
	 { "TargetModule_SuperPixelIdToI2CRegAddr", _wrap_TargetModule_SuperPixelIdToI2CRegAddr, METH_VARARGS, "TargetModule_SuperPixelIdToI2CRegAddr(TargetModule self, uint8_t spId) -> int"},
	 { "TargetModule_SuperPixelIdToHVEneableBit", _wrap_TargetModule_SuperPixelIdToHVEneableBit, METH_VARARGS, "TargetModule_SuperPixelIdToHVEneableBit(TargetModule self, uint8_t spId) -> int"},
	 { "TargetModule_GetHVSuperPixel", _wrap_TargetModule_GetHVSuperPixel, METH_VARARGS, "TargetModule_GetHVSuperPixel(TargetModule self, uint8_t superPixel) -> int"},
	 { "TargetModule_ModifyModuleIP", _wrap_TargetModule_ModifyModuleIP, METH_VARARGS, "TargetModule_ModifyModuleIP(TargetModule self, uint8_t value) -> int"},
	 { "TargetModule_ReadModuleIP", _wrap_TargetModule_ReadModuleIP, METH_O, "TargetModule_ReadModuleIP(TargetModule self) -> int"},
	 { "TargetModule_ModifyModuleIdentifier", _wrap_TargetModule_ModifyModuleIdentifier, METH_VARARGS, "TargetModule_ModifyModuleIdentifier(TargetModule self, uint16_t value) -> int"},
	 { "TargetModule_ReadModuleIdentifier", _wrap_TargetModule_ReadModuleIdentifier, METH_VARARGS, "TargetModule_ReadModuleIdentifier(TargetModule self, uint16_t & val) -> int"},
	 { "delete_TargetModule", _wrap_delete_TargetModule, METH_O, "delete_TargetModule(TargetModule self)"},
	 { "TargetModule_swigregister", TargetModule_swigregister, METH_O, NULL},
	 { "TargetModule_swiginit", TargetModule_swiginit, METH_VARARGS, NULL},
	 { "Setting_regAddr_set", _wrap_Setting_regAddr_set, METH_VARARGS, "Setting_regAddr_set(Setting self, uint32_t regAddr)"},
	 { "Setting_regAddr_get", _wrap_Setting_regAddr_get, METH_O, "Setting_regAddr_get(Setting self) -> uint32_t"},
	 { "Setting_nBits_set", _wrap_Setting_nBits_set, METH_VARARGS, "Setting_nBits_set(Setting self, uint16_t nBits)"},
	 { "Setting_nBits_get", _wrap_Setting_nBits_get, METH_O, "Setting_nBits_get(Setting self) -> uint16_t"},
	 { "Setting_startBit_set", _wrap_Setting_startBit_set, METH_VARARGS, "Setting_startBit_set(Setting self, uint16_t startBit)"},
	 { "Setting_startBit_get", _wrap_Setting_startBit_get, METH_O, "Setting_startBit_get(Setting self) -> uint16_t"},
	 { "Setting_value_set", _wrap_Setting_value_set, METH_VARARGS, "Setting_value_set(Setting self, uint32_t value)"},
	 { "Setting_value_get", _wrap_Setting_value_get, METH_O, "Setting_value_get(Setting self) -> uint32_t"},
	 { "Setting_access_set", _wrap_Setting_access_set, METH_VARARGS, "Setting_access_set(Setting self, CTA::TargetDriver::Access access)"},
	 { "Setting_access_get", _wrap_Setting_access_get, METH_O, "Setting_access_get(Setting self) -> CTA::TargetDriver::Access"},
	 { "Setting_lowerBound_set", _wrap_Setting_lowerBound_set, METH_VARARGS, "Setting_lowerBound_set(Setting self, uint32_t lowerBound)"},
	 { "Setting_lowerBound_get", _wrap_Setting_lowerBound_get, METH_O, "Setting_lowerBound_get(Setting self) -> uint32_t"},
	 { "Setting_upperBound_set", _wrap_Setting_upperBound_set, METH_VARARGS, "Setting_upperBound_set(Setting self, uint32_t upperBound)"},
	 { "Setting_upperBound_get", _wrap_Setting_upperBound_get, METH_O, "Setting_upperBound_get(Setting self) -> uint32_t"},
	 { "Setting_multiplier_set", _wrap_Setting_multiplier_set, METH_VARARGS, "Setting_multiplier_set(Setting self, float multiplier)"},
	 { "Setting_multiplier_get", _wrap_Setting_multiplier_get, METH_O, "Setting_multiplier_get(Setting self) -> float"},
	 { "Setting_offset_set", _wrap_Setting_offset_set, METH_VARARGS, "Setting_offset_set(Setting self, float offset)"},
	 { "Setting_offset_get", _wrap_Setting_offset_get, METH_O, "Setting_offset_get(Setting self) -> float"},
	 { "Setting_description_set", _wrap_Setting_description_set, METH_VARARGS, "Setting_description_set(Setting self, std::string const & description)"},
	 { "Setting_description_get", _wrap_Setting_description_get, METH_O, "Setting_description_get(Setting self) -> std::string const &"},
	 { "new_Setting", _wrap_new_Setting, METH_NOARGS, "new_Setting() -> Setting"},
	 { "delete_Setting", _wrap_delete_Setting, METH_O, "delete_Setting(Setting self)"},
	 { "Setting_swigregister", Setting_swigregister, METH_O, NULL},
	 { "Setting_swiginit", Setting_swiginit, METH_VARARGS, NULL},
	 { "SettingASIC_settingASIC_set", _wrap_SettingASIC_settingASIC_set, METH_VARARGS, "SettingASIC_settingASIC_set(SettingASIC self, Setting settingASIC)"},
	 { "SettingASIC_settingASIC_get", _wrap_SettingASIC_settingASIC_get, METH_O, "SettingASIC_settingASIC_get(SettingASIC self) -> Setting"},
	 { "new_SettingASIC", _wrap_new_SettingASIC, METH_NOARGS, "new_SettingASIC() -> SettingASIC"},
	 { "delete_SettingASIC", _wrap_delete_SettingASIC, METH_O, "delete_SettingASIC(SettingASIC self)"},
	 { "SettingASIC_swigregister", SettingASIC_swigregister, METH_O, NULL},
	 { "SettingASIC_swiginit", SettingASIC_swiginit, METH_VARARGS, NULL},
	 { "RegisterFPGA_val_set", _wrap_RegisterFPGA_val_set, METH_VARARGS, "RegisterFPGA_val_set(RegisterFPGA self, uint32_t val)"},
	 { "RegisterFPGA_val_get", _wrap_RegisterFPGA_val_get, METH_O, "RegisterFPGA_val_get(RegisterFPGA self) -> uint32_t"},
	 { "RegisterFPGA_access_set", _wrap_RegisterFPGA_access_set, METH_VARARGS, "RegisterFPGA_access_set(RegisterFPGA self, CTA::TargetDriver::Access access)"},
	 { "RegisterFPGA_access_get", _wrap_RegisterFPGA_access_get, METH_O, "RegisterFPGA_access_get(RegisterFPGA self) -> CTA::TargetDriver::Access"},
	 { "new_RegisterFPGA", _wrap_new_RegisterFPGA, METH_NOARGS, "new_RegisterFPGA() -> RegisterFPGA"},
	 { "delete_RegisterFPGA", _wrap_delete_RegisterFPGA, METH_O, "delete_RegisterFPGA(RegisterFPGA self)"},
	 { "RegisterFPGA_swigregister", RegisterFPGA_swigregister, METH_O, NULL},
	 { "RegisterFPGA_swiginit", RegisterFPGA_swiginit, METH_VARARGS, NULL},
	 { "RegisterASIC_val_set", _wrap_RegisterASIC_val_set, METH_VARARGS, "RegisterASIC_val_set(RegisterASIC self, uint16_t [4] val)"},
	 { "RegisterASIC_val_get", _wrap_RegisterASIC_val_get, METH_O, "RegisterASIC_val_get(RegisterASIC self) -> uint16_t [4]"},
	 { "new_RegisterASIC", _wrap_new_RegisterASIC, METH_NOARGS, "new_RegisterASIC() -> RegisterASIC"},
	 { "delete_RegisterASIC", _wrap_delete_RegisterASIC, METH_O, "delete_RegisterASIC(RegisterASIC self)"},
	 { "RegisterASIC_swigregister", RegisterASIC_swigregister, METH_O, NULL},
	 { "RegisterASIC_swiginit", RegisterASIC_swiginit, METH_VARARGS, NULL},
	 { "new_RegisterSettings", _wrap_new_RegisterSettings, METH_VARARGS, "\n"
		"RegisterSettings(std::string const & targetFPGADefinitionFile, std::string const & targetASICDefinitionFile)\n"
		"new_RegisterSettings(std::string const & targetFPGADefinitionFile, std::string const & targetASICDefinitionFile, std::string const & targetTriggerASICDefinitionFile) -> RegisterSettings\n"
		""},
	 { "RegisterSettings_PrintSetting", _wrap_RegisterSettings_PrintSetting, METH_VARARGS, "RegisterSettings_PrintSetting(RegisterSettings self, Setting set)"},
	 { "RegisterSettings_PrintFPGASetting", _wrap_RegisterSettings_PrintFPGASetting, METH_VARARGS, "RegisterSettings_PrintFPGASetting(RegisterSettings self, std::string const & settingName)"},
	 { "RegisterSettings_PrintASICSetting", _wrap_RegisterSettings_PrintASICSetting, METH_VARARGS, "RegisterSettings_PrintASICSetting(RegisterSettings self, std::string const & settingName, bool isTriggerASIC=False)"},
	 { "RegisterSettings_PrintTriggerASICSetting", _wrap_RegisterSettings_PrintTriggerASICSetting, METH_VARARGS, "RegisterSettings_PrintTriggerASICSetting(RegisterSettings self, std::string const & settingName)"},
	 { "RegisterSettings_PrintAllSettings", _wrap_RegisterSettings_PrintAllSettings, METH_O, "RegisterSettings_PrintAllSettings(RegisterSettings self)"},
	 { "RegisterSettings_PrintHeaderFPGA", _wrap_RegisterSettings_PrintHeaderFPGA, METH_O, "RegisterSettings_PrintHeaderFPGA(RegisterSettings self)"},
	 { "RegisterSettings_PrintHeaderASIC", _wrap_RegisterSettings_PrintHeaderASIC, METH_VARARGS, "RegisterSettings_PrintHeaderASIC(RegisterSettings self, bool isTriggerASIC=False)"},
	 { "RegisterSettings_PrintHeaderTriggerASIC", _wrap_RegisterSettings_PrintHeaderTriggerASIC, METH_O, "RegisterSettings_PrintHeaderTriggerASIC(RegisterSettings self)"},
	 { "RegisterSettings_PrintAllRegisters", _wrap_RegisterSettings_PrintAllRegisters, METH_O, "RegisterSettings_PrintAllRegisters(RegisterSettings self)"},
	 { "RegisterSettings_GenerateASICMarkdown", _wrap_RegisterSettings_GenerateASICMarkdown, METH_VARARGS, "RegisterSettings_GenerateASICMarkdown(RegisterSettings self, std::string const & fname, bool isTriggerASIC=False)"},
	 { "RegisterSettings_GenerateTriggerASICMarkdown", _wrap_RegisterSettings_GenerateTriggerASICMarkdown, METH_VARARGS, "RegisterSettings_GenerateTriggerASICMarkdown(RegisterSettings self, std::string const & fname)"},
	 { "RegisterSettings_GenerateFPGAMarkdown", _wrap_RegisterSettings_GenerateFPGAMarkdown, METH_VARARGS, "RegisterSettings_GenerateFPGAMarkdown(RegisterSettings self, std::string const & fname)"},
	 { "RegisterSettings_ReadUserFPGAConfigFile", _wrap_RegisterSettings_ReadUserFPGAConfigFile, METH_VARARGS, "RegisterSettings_ReadUserFPGAConfigFile(RegisterSettings self, std::string const & configFile) -> int"},
	 { "RegisterSettings_ReadUserTriggerASICConfigFile", _wrap_RegisterSettings_ReadUserTriggerASICConfigFile, METH_VARARGS, "RegisterSettings_ReadUserTriggerASICConfigFile(RegisterSettings self, std::string const & configFile) -> int"},
	 { "RegisterSettings_ReadUserASICConfigFile", _wrap_RegisterSettings_ReadUserASICConfigFile, METH_VARARGS, "RegisterSettings_ReadUserASICConfigFile(RegisterSettings self, std::string const & configFile, bool isTriggerASIC=False) -> int"},
	 { "RegisterSettings_ModifyFPGASetting", _wrap_RegisterSettings_ModifyFPGASetting, METH_VARARGS, "RegisterSettings_ModifyFPGASetting(RegisterSettings self, std::string const & name, uint32_t newVal) -> int"},
	 { "RegisterSettings_GetRegisterPartially", _wrap_RegisterSettings_GetRegisterPartially, METH_VARARGS, "RegisterSettings_GetRegisterPartially(RegisterSettings self, uint32_t reg, Setting set, uint32_t & reg_par)"},
	 { "RegisterSettings_ModifyTriggerASICSetting", _wrap_RegisterSettings_ModifyTriggerASICSetting, METH_VARARGS, "RegisterSettings_ModifyTriggerASICSetting(RegisterSettings self, std::string const & name, uint8_t asic, uint16_t val) -> int"},
	 { "RegisterSettings_ModifyASICSetting", _wrap_RegisterSettings_ModifyASICSetting, METH_VARARGS, "RegisterSettings_ModifyASICSetting(RegisterSettings self, std::string const & name, uint8_t asic, uint16_t val, bool isTriggerASIC=False) -> int"},
	 { "RegisterSettings_GetFPGARegisterValue", _wrap_RegisterSettings_GetFPGARegisterValue, METH_VARARGS, "RegisterSettings_GetFPGARegisterValue(RegisterSettings self, uint32_t addr) -> int"},
	 { "RegisterSettings_GetTriggerASICRegisterValue", _wrap_RegisterSettings_GetTriggerASICRegisterValue, METH_VARARGS, "RegisterSettings_GetTriggerASICRegisterValue(RegisterSettings self, std::string const & name, uint8_t asic, uint16_t & val) -> int"},
	 { "RegisterSettings_GetASICRegisterValue", _wrap_RegisterSettings_GetASICRegisterValue, METH_VARARGS, "RegisterSettings_GetASICRegisterValue(RegisterSettings self, std::string const & name, uint8_t asic, uint16_t & val, bool isTriggerASIC=False) -> int"},
	 { "RegisterSettings_GetFPGASettingRegisterAddress", _wrap_RegisterSettings_GetFPGASettingRegisterAddress, METH_VARARGS, "RegisterSettings_GetFPGASettingRegisterAddress(RegisterSettings self, std::string const & name, uint32_t & addr) -> int"},
	 { "RegisterSettings_GetTriggerASICSettingRegisterAddress", _wrap_RegisterSettings_GetTriggerASICSettingRegisterAddress, METH_VARARGS, "RegisterSettings_GetTriggerASICSettingRegisterAddress(RegisterSettings self, std::string const & name, uint8_t & addr) -> int"},
	 { "RegisterSettings_GetASICSettingRegisterAddress", _wrap_RegisterSettings_GetASICSettingRegisterAddress, METH_VARARGS, "RegisterSettings_GetASICSettingRegisterAddress(RegisterSettings self, std::string const & name, uint8_t & addr, bool isTriggerASIC=False) -> int"},
	 { "RegisterSettings_fType_set", _wrap_RegisterSettings_fType_set, METH_VARARGS, "RegisterSettings_fType_set(RegisterSettings self, std::string const & fType)"},
	 { "RegisterSettings_fType_get", _wrap_RegisterSettings_fType_get, METH_O, "RegisterSettings_fType_get(RegisterSettings self) -> std::string const &"},
	 { "RegisterSettings_fFPGAFirmwareVersion_set", _wrap_RegisterSettings_fFPGAFirmwareVersion_set, METH_VARARGS, "RegisterSettings_fFPGAFirmwareVersion_set(RegisterSettings self, uint32_t fFPGAFirmwareVersion)"},
	 { "RegisterSettings_fFPGAFirmwareVersion_get", _wrap_RegisterSettings_fFPGAFirmwareVersion_get, METH_O, "RegisterSettings_fFPGAFirmwareVersion_get(RegisterSettings self) -> uint32_t"},
	 { "RegisterSettings_fFPGADescription_set", _wrap_RegisterSettings_fFPGADescription_set, METH_VARARGS, "RegisterSettings_fFPGADescription_set(RegisterSettings self, std::string const & fFPGADescription)"},
	 { "RegisterSettings_fFPGADescription_get", _wrap_RegisterSettings_fFPGADescription_get, METH_O, "RegisterSettings_fFPGADescription_get(RegisterSettings self) -> std::string const &"},
	 { "RegisterSettings_fFPGAAuthor_set", _wrap_RegisterSettings_fFPGAAuthor_set, METH_VARARGS, "RegisterSettings_fFPGAAuthor_set(RegisterSettings self, std::string const & fFPGAAuthor)"},
	 { "RegisterSettings_fFPGAAuthor_get", _wrap_RegisterSettings_fFPGAAuthor_get, METH_O, "RegisterSettings_fFPGAAuthor_get(RegisterSettings self) -> std::string const &"},
	 { "RegisterSettings_fFPGANumberOfRegisters_set", _wrap_RegisterSettings_fFPGANumberOfRegisters_set, METH_VARARGS, "RegisterSettings_fFPGANumberOfRegisters_set(RegisterSettings self, uint32_t fFPGANumberOfRegisters)"},
	 { "RegisterSettings_fFPGANumberOfRegisters_get", _wrap_RegisterSettings_fFPGANumberOfRegisters_get, METH_O, "RegisterSettings_fFPGANumberOfRegisters_get(RegisterSettings self) -> uint32_t"},
	 { "RegisterSettings_fASICDescription_set", _wrap_RegisterSettings_fASICDescription_set, METH_VARARGS, "RegisterSettings_fASICDescription_set(RegisterSettings self, std::string const & fASICDescription)"},
	 { "RegisterSettings_fASICDescription_get", _wrap_RegisterSettings_fASICDescription_get, METH_O, "RegisterSettings_fASICDescription_get(RegisterSettings self) -> std::string const &"},
	 { "RegisterSettings_fASICAuthor_set", _wrap_RegisterSettings_fASICAuthor_set, METH_VARARGS, "RegisterSettings_fASICAuthor_set(RegisterSettings self, std::string const & fASICAuthor)"},
	 { "RegisterSettings_fASICAuthor_get", _wrap_RegisterSettings_fASICAuthor_get, METH_O, "RegisterSettings_fASICAuthor_get(RegisterSettings self) -> std::string const &"},
	 { "RegisterSettings_fASICNumberOfRegisters_set", _wrap_RegisterSettings_fASICNumberOfRegisters_set, METH_VARARGS, "RegisterSettings_fASICNumberOfRegisters_set(RegisterSettings self, uint32_t fASICNumberOfRegisters)"},
	 { "RegisterSettings_fASICNumberOfRegisters_get", _wrap_RegisterSettings_fASICNumberOfRegisters_get, METH_O, "RegisterSettings_fASICNumberOfRegisters_get(RegisterSettings self) -> uint32_t"},
	 { "RegisterSettings_fTriggerASICDescription_set", _wrap_RegisterSettings_fTriggerASICDescription_set, METH_VARARGS, "RegisterSettings_fTriggerASICDescription_set(RegisterSettings self, std::string const & fTriggerASICDescription)"},
	 { "RegisterSettings_fTriggerASICDescription_get", _wrap_RegisterSettings_fTriggerASICDescription_get, METH_O, "RegisterSettings_fTriggerASICDescription_get(RegisterSettings self) -> std::string const &"},
	 { "RegisterSettings_fTriggerASICAuthor_set", _wrap_RegisterSettings_fTriggerASICAuthor_set, METH_VARARGS, "RegisterSettings_fTriggerASICAuthor_set(RegisterSettings self, std::string const & fTriggerASICAuthor)"},
	 { "RegisterSettings_fTriggerASICAuthor_get", _wrap_RegisterSettings_fTriggerASICAuthor_get, METH_O, "RegisterSettings_fTriggerASICAuthor_get(RegisterSettings self) -> std::string const &"},
	 { "RegisterSettings_fTriggerASICNumberOfRegisters_set", _wrap_RegisterSettings_fTriggerASICNumberOfRegisters_set, METH_VARARGS, "RegisterSettings_fTriggerASICNumberOfRegisters_set(RegisterSettings self, uint32_t fTriggerASICNumberOfRegisters)"},
	 { "RegisterSettings_fTriggerASICNumberOfRegisters_get", _wrap_RegisterSettings_fTriggerASICNumberOfRegisters_get, METH_O, "RegisterSettings_fTriggerASICNumberOfRegisters_get(RegisterSettings self) -> uint32_t"},
	 { "RegisterSettings_CheckFPGARegisterConsistency", _wrap_RegisterSettings_CheckFPGARegisterConsistency, METH_O, "RegisterSettings_CheckFPGARegisterConsistency(RegisterSettings self) -> int"},
	 { "RegisterSettings_CheckTriggerASICRegisterConsistency", _wrap_RegisterSettings_CheckTriggerASICRegisterConsistency, METH_O, "RegisterSettings_CheckTriggerASICRegisterConsistency(RegisterSettings self) -> int"},
	 { "RegisterSettings_CheckASICRegisterConsistency", _wrap_RegisterSettings_CheckASICRegisterConsistency, METH_VARARGS, "RegisterSettings_CheckASICRegisterConsistency(RegisterSettings self, bool isTriggerASIC=False) -> int"},
	 { "RegisterSettings_ReadDefinitionFileFPGA", _wrap_RegisterSettings_ReadDefinitionFileFPGA, METH_O, "RegisterSettings_ReadDefinitionFileFPGA(RegisterSettings self) -> int"},
	 { "RegisterSettings_ReadDefinitionFileTriggerASIC", _wrap_RegisterSettings_ReadDefinitionFileTriggerASIC, METH_O, "RegisterSettings_ReadDefinitionFileTriggerASIC(RegisterSettings self) -> int"},
	 { "RegisterSettings_ReadDefinitionFileASIC", _wrap_RegisterSettings_ReadDefinitionFileASIC, METH_VARARGS, "RegisterSettings_ReadDefinitionFileASIC(RegisterSettings self, bool isTriggerASIC=False) -> int"},
	 { "RegisterSettings_ModifyRegisterPartially", _wrap_RegisterSettings_ModifyRegisterPartially, METH_VARARGS, "RegisterSettings_ModifyRegisterPartially(RegisterSettings self, uint32_t & reg, Setting set)"},
	 { "RegisterSettings_CheckRegisterPartially", _wrap_RegisterSettings_CheckRegisterPartially, METH_VARARGS, "RegisterSettings_CheckRegisterPartially(RegisterSettings self, uint32_t reg, Setting set) -> bool"},
	 { "RegisterSettings_AddFPGASetting", _wrap_RegisterSettings_AddFPGASetting, METH_VARARGS, "RegisterSettings_AddFPGASetting(RegisterSettings self, std::string const & name, Setting setting) -> int"},
	 { "RegisterSettings_AddTriggerASICSetting", _wrap_RegisterSettings_AddTriggerASICSetting, METH_VARARGS, "RegisterSettings_AddTriggerASICSetting(RegisterSettings self, std::string const & name, SettingASIC setting) -> int"},
	 { "RegisterSettings_AddASICSetting", _wrap_RegisterSettings_AddASICSetting, METH_VARARGS, "RegisterSettings_AddASICSetting(RegisterSettings self, std::string const & name, SettingASIC setting, bool isTriggerASIC=False) -> int"},
	 { "RegisterSettings_UpdateFPGASettingMapFromRegisterMap", _wrap_RegisterSettings_UpdateFPGASettingMapFromRegisterMap, METH_O, "RegisterSettings_UpdateFPGASettingMapFromRegisterMap(RegisterSettings self) -> int"},
	 { "RegisterSettings_fDefintionFileFPGA_get", _wrap_RegisterSettings_fDefintionFileFPGA_get, METH_O, "RegisterSettings_fDefintionFileFPGA_get(RegisterSettings self) -> std::string const &"},
	 { "RegisterSettings_fDefintionFileASIC_get", _wrap_RegisterSettings_fDefintionFileASIC_get, METH_O, "RegisterSettings_fDefintionFileASIC_get(RegisterSettings self) -> std::string const &"},
	 { "RegisterSettings_fDefintionFileTriggerASIC_get", _wrap_RegisterSettings_fDefintionFileTriggerASIC_get, METH_O, "RegisterSettings_fDefintionFileTriggerASIC_get(RegisterSettings self) -> std::string const &"},
	 { "RegisterSettings_fSettingMapFPGA_set", _wrap_RegisterSettings_fSettingMapFPGA_set, METH_VARARGS, "RegisterSettings_fSettingMapFPGA_set(RegisterSettings self, std::map< std::string,CTA::TargetDriver::Setting > * fSettingMapFPGA)"},
	 { "RegisterSettings_fSettingMapFPGA_get", _wrap_RegisterSettings_fSettingMapFPGA_get, METH_O, "RegisterSettings_fSettingMapFPGA_get(RegisterSettings self) -> std::map< std::string,CTA::TargetDriver::Setting > *"},
	 { "RegisterSettings_fSettingMapASIC_set", _wrap_RegisterSettings_fSettingMapASIC_set, METH_VARARGS, "RegisterSettings_fSettingMapASIC_set(RegisterSettings self, std::map< std::string,CTA::TargetDriver::SettingASIC > * fSettingMapASIC)"},
	 { "RegisterSettings_fSettingMapASIC_get", _wrap_RegisterSettings_fSettingMapASIC_get, METH_O, "RegisterSettings_fSettingMapASIC_get(RegisterSettings self) -> std::map< std::string,CTA::TargetDriver::SettingASIC > *"},
	 { "RegisterSettings_fSettingMapTriggerASIC_set", _wrap_RegisterSettings_fSettingMapTriggerASIC_set, METH_VARARGS, "RegisterSettings_fSettingMapTriggerASIC_set(RegisterSettings self, std::map< std::string,CTA::TargetDriver::SettingASIC > * fSettingMapTriggerASIC)"},
	 { "RegisterSettings_fSettingMapTriggerASIC_get", _wrap_RegisterSettings_fSettingMapTriggerASIC_get, METH_O, "RegisterSettings_fSettingMapTriggerASIC_get(RegisterSettings self) -> std::map< std::string,CTA::TargetDriver::SettingASIC > *"},
	 { "RegisterSettings_fRegisterMapFPGA_set", _wrap_RegisterSettings_fRegisterMapFPGA_set, METH_VARARGS, "RegisterSettings_fRegisterMapFPGA_set(RegisterSettings self, std::map< uint32_t,CTA::TargetDriver::RegisterFPGA > * fRegisterMapFPGA)"},
	 { "RegisterSettings_fRegisterMapFPGA_get", _wrap_RegisterSettings_fRegisterMapFPGA_get, METH_O, "RegisterSettings_fRegisterMapFPGA_get(RegisterSettings self) -> std::map< uint32_t,CTA::TargetDriver::RegisterFPGA > *"},
	 { "RegisterSettings_fRegisterMapASIC_set", _wrap_RegisterSettings_fRegisterMapASIC_set, METH_VARARGS, "RegisterSettings_fRegisterMapASIC_set(RegisterSettings self, std::map< uint8_t,CTA::TargetDriver::RegisterASIC > * fRegisterMapASIC)"},
	 { "RegisterSettings_fRegisterMapASIC_get", _wrap_RegisterSettings_fRegisterMapASIC_get, METH_O, "RegisterSettings_fRegisterMapASIC_get(RegisterSettings self) -> std::map< uint8_t,CTA::TargetDriver::RegisterASIC > *"},
	 { "RegisterSettings_fRegisterMapTriggerASIC_set", _wrap_RegisterSettings_fRegisterMapTriggerASIC_set, METH_VARARGS, "RegisterSettings_fRegisterMapTriggerASIC_set(RegisterSettings self, std::map< uint8_t,CTA::TargetDriver::RegisterASIC > * fRegisterMapTriggerASIC)"},
	 { "RegisterSettings_fRegisterMapTriggerASIC_get", _wrap_RegisterSettings_fRegisterMapTriggerASIC_get, METH_O, "RegisterSettings_fRegisterMapTriggerASIC_get(RegisterSettings self) -> std::map< uint8_t,CTA::TargetDriver::RegisterASIC > *"},
	 { "delete_RegisterSettings", _wrap_delete_RegisterSettings, METH_O, "delete_RegisterSettings(RegisterSettings self)"},
	 { "RegisterSettings_swigregister", RegisterSettings_swigregister, METH_O, NULL},
	 { "RegisterSettings_swiginit", RegisterSettings_swiginit, METH_VARARGS, NULL},
	 { "new_ModuleSimulator", _wrap_new_ModuleSimulator, METH_VARARGS, "ModuleSimulator(std::string const & pModuleIP, std::string const & pFPGADef=\"\", std::string const & pASICDef=\"\", std::string const & pTriggerASICDef=\"\", double rate=10)"},
	 { "delete_ModuleSimulator", _wrap_delete_ModuleSimulator, METH_O, "delete_ModuleSimulator(ModuleSimulator self)"},
	 { "ModuleSimulator_ListenAndRespond", _wrap_ModuleSimulator_ListenAndRespond, METH_O, "ModuleSimulator_ListenAndRespond(ModuleSimulator self)"},
	 { "ModuleSimulator_RunTrigger", _wrap_ModuleSimulator_RunTrigger, METH_O, "ModuleSimulator_RunTrigger(ModuleSimulator self)"},
	 { "ModuleSimulator_CloseSockets", _wrap_ModuleSimulator_CloseSockets, METH_O, "ModuleSimulator_CloseSockets(ModuleSimulator self)"},
	 { "ModuleSimulator_IsRunning", _wrap_ModuleSimulator_IsRunning, METH_O, "ModuleSimulator_IsRunning(ModuleSimulator self) -> bool"},
	 { "ModuleSimulator_SetVerbose", _wrap_ModuleSimulator_SetVerbose, METH_VARARGS, "ModuleSimulator_SetVerbose(ModuleSimulator self, bool verbose)"},
	 { "ModuleSimulator_Start", _wrap_ModuleSimulator_Start, METH_O, "ModuleSimulator_Start(ModuleSimulator self)"},
	 { "ModuleSimulator_Stop", _wrap_ModuleSimulator_Stop, METH_O, "ModuleSimulator_Stop(ModuleSimulator self)"},
	 { "ModuleSimulator_StartTriggering", _wrap_ModuleSimulator_StartTriggering, METH_O, "ModuleSimulator_StartTriggering(ModuleSimulator self)"},
	 { "ModuleSimulator_StopTriggering", _wrap_ModuleSimulator_StopTriggering, METH_O, "ModuleSimulator_StopTriggering(ModuleSimulator self)"},
	 { "ModuleSimulator_SetTriggerRate", _wrap_ModuleSimulator_SetTriggerRate, METH_VARARGS, "ModuleSimulator_SetTriggerRate(ModuleSimulator self, double pRate)"},
	 { "ModuleSimulator_CheckTimeDifference", _wrap_ModuleSimulator_CheckTimeDifference, METH_O, "ModuleSimulator_CheckTimeDifference(ModuleSimulator self) -> bool"},
	 { "ModuleSimulator_SendEventData", _wrap_ModuleSimulator_SendEventData, METH_O, "ModuleSimulator_SendEventData(ModuleSimulator self)"},
	 { "ModuleSimulator_SetRefWaveform", _wrap_ModuleSimulator_SetRefWaveform, METH_O, "ModuleSimulator_SetRefWaveform(ModuleSimulator self)"},
	 { "ModuleSimulator_swigregister", ModuleSimulator_swigregister, METH_O, NULL},
	 { "ModuleSimulator_swiginit", ModuleSimulator_swiginit, METH_VARARGS, NULL},
	 { "new_Waveform", _wrap_new_Waveform, METH_VARARGS, "Waveform(uint8_t * data=None)"},
	 { "delete_Waveform", _wrap_delete_Waveform, METH_O, "delete_Waveform(Waveform self)"},
	 { "Waveform_AssociateData", _wrap_Waveform_AssociateData, METH_VARARGS, "Waveform_AssociateData(Waveform self, uint8_t * data)"},
	 { "Waveform_IsErrorFlagOn", _wrap_Waveform_IsErrorFlagOn, METH_O, "Waveform_IsErrorFlagOn(Waveform self) -> bool"},
	 { "Waveform_GetChannel", _wrap_Waveform_GetChannel, METH_O, "Waveform_GetChannel(Waveform self) -> uint8_t"},
	 { "Waveform_GetASIC", _wrap_Waveform_GetASIC, METH_O, "Waveform_GetASIC(Waveform self) -> uint8_t"},
	 { "Waveform_GetSamples", _wrap_Waveform_GetSamples, METH_O, "Waveform_GetSamples(Waveform self) -> uint16_t"},
	 { "Waveform_GetADC", _wrap_Waveform_GetADC, METH_VARARGS, "Waveform_GetADC(Waveform self, uint16_t n) -> uint16_t"},
	 { "Waveform_GetADC16bit", _wrap_Waveform_GetADC16bit, METH_VARARGS, "Waveform_GetADC16bit(Waveform self, uint16_t n) -> uint16_t"},
	 { "Waveform_GetPixelID", _wrap_Waveform_GetPixelID, METH_O, "Waveform_GetPixelID(Waveform self) -> uint16_t"},
	 { "Waveform_GetADCArray", _wrap_Waveform_GetADCArray, METH_VARARGS, "Waveform_GetADCArray(Waveform self, uint16_t * adcarray)"},
	 { "Waveform_GetADC16bitArray", _wrap_Waveform_GetADC16bitArray, METH_VARARGS, "Waveform_GetADC16bitArray(Waveform self, uint16_t * adcarray)"},
	 { "Waveform_brycesGetADCArray", _wrap_Waveform_brycesGetADCArray, METH_VARARGS, "Waveform_brycesGetADCArray(Waveform self, uint16_t * adcarray)"},
	 { "Waveform_brycesGetADC16bitArray", _wrap_Waveform_brycesGetADC16bitArray, METH_VARARGS, "Waveform_brycesGetADC16bitArray(Waveform self, uint16_t * adcarray)"},
	 { "Waveform_GetMeanAndStdDev", _wrap_Waveform_GetMeanAndStdDev, METH_VARARGS, "Waveform_GetMeanAndStdDev(Waveform self, float & mean, float & stddev, uint16_t maxsamples=0)"},
	 { "Waveform_GetMeanAndRMS", _wrap_Waveform_GetMeanAndRMS, METH_VARARGS, "Waveform_GetMeanAndRMS(Waveform self, float & mean, float & rms, uint16_t maxsamples=0)"},
	 { "Waveform_SetHeader", _wrap_Waveform_SetHeader, METH_VARARGS, "Waveform_SetHeader(Waveform self, uint8_t asic, uint8_t chan, uint16_t samples, bool errflag)"},
	 { "Waveform_SetADC", _wrap_Waveform_SetADC, METH_VARARGS, "Waveform_SetADC(Waveform self, uint16_t n, uint16_t val)"},
	 { "Waveform_SetADC16bit", _wrap_Waveform_SetADC16bit, METH_VARARGS, "Waveform_SetADC16bit(Waveform self, uint16_t n, uint16_t val)"},
	 { "Waveform_PackWaveform", _wrap_Waveform_PackWaveform, METH_VARARGS, "Waveform_PackWaveform(Waveform self, uint8_t asic, uint8_t chan, uint16_t samples, bool errflag, uint16_t * data=None)"},
	 { "Waveform_swigregister", Waveform_swigregister, METH_O, NULL},
	 { "Waveform_swiginit", Waveform_swiginit, METH_VARARGS, NULL},
	 { "new_DataPacket", _wrap_new_DataPacket, METH_VARARGS, "\n"
		"DataPacket(uint16_t waveforms_per_packet, uint16_t samples_per_waveform)\n"
		"DataPacket(uint16_t packetsize=0)\n"
		""},
	 { "delete_DataPacket", _wrap_delete_DataPacket, METH_O, "delete_DataPacket(DataPacket self)"},
	 { "DataPacket_IsEmpty", _wrap_DataPacket_IsEmpty, METH_O, "DataPacket_IsEmpty(DataPacket self) -> bool"},
	 { "DataPacket_IsValid", _wrap_DataPacket_IsValid, METH_O, "DataPacket_IsValid(DataPacket self) -> bool"},
	 { "DataPacket_GetStatus", _wrap_DataPacket_GetStatus, METH_O, "DataPacket_GetStatus(DataPacket self) -> int"},
	 { "DataPacket_GetStatusString", _wrap_DataPacket_GetStatusString, METH_O, "DataPacket_GetStatusString(DataPacket self) -> std::string"},
	 { "DataPacket_GetASICID", _wrap_DataPacket_GetASICID, METH_O, "DataPacket_GetASICID(DataPacket self) -> uint8_t"},
	 { "DataPacket_GetChannelID", _wrap_DataPacket_GetChannelID, METH_O, "DataPacket_GetChannelID(DataPacket self) -> uint8_t"},
	 { "DataPacket_GetNumberOfWaveforms", _wrap_DataPacket_GetNumberOfWaveforms, METH_O, "DataPacket_GetNumberOfWaveforms(DataPacket self) -> uint16_t"},
	 { "DataPacket_GetBuffers", _wrap_DataPacket_GetBuffers, METH_O, "DataPacket_GetBuffers(DataPacket self) -> uint16_t"},
	 { "DataPacket_GetWaveformLength", _wrap_DataPacket_GetWaveformLength, METH_O, "DataPacket_GetWaveformLength(DataPacket self) -> uint16_t"},
	 { "DataPacket_GetWaveformSamples", _wrap_DataPacket_GetWaveformSamples, METH_O, "DataPacket_GetWaveformSamples(DataPacket self) -> uint16_t"},
	 { "DataPacket_GetWaveformBytes", _wrap_DataPacket_GetWaveformBytes, METH_O, "DataPacket_GetWaveformBytes(DataPacket self) -> uint16_t"},
	 { "DataPacket_IsFirstSubPacket", _wrap_DataPacket_IsFirstSubPacket, METH_O, "DataPacket_IsFirstSubPacket(DataPacket self) -> bool"},
	 { "DataPacket_IsLastSubPacket", _wrap_DataPacket_IsLastSubPacket, METH_O, "DataPacket_IsLastSubPacket(DataPacket self) -> bool"},
	 { "DataPacket_GetTotalSizeInBytes", _wrap_DataPacket_GetTotalSizeInBytes, METH_O, "DataPacket_GetTotalSizeInBytes(DataPacket self) -> uint16_t"},
	 { "DataPacket_GetEventNumber", _wrap_DataPacket_GetEventNumber, METH_O, "DataPacket_GetEventNumber(DataPacket self) -> uint16_t"},
	 { "DataPacket_GetSlotID", _wrap_DataPacket_GetSlotID, METH_O, "DataPacket_GetSlotID(DataPacket self) -> uint8_t"},
	 { "DataPacket_GetDetectorID", _wrap_DataPacket_GetDetectorID, METH_O, "DataPacket_GetDetectorID(DataPacket self) -> uint8_t"},
	 { "DataPacket_GetEventSequenceNumber", _wrap_DataPacket_GetEventSequenceNumber, METH_O, "DataPacket_GetEventSequenceNumber(DataPacket self) -> uint8_t"},
	 { "DataPacket_GetDetectorUniqueTag", _wrap_DataPacket_GetDetectorUniqueTag, METH_O, "DataPacket_GetDetectorUniqueTag(DataPacket self) -> uint8_t"},
	 { "DataPacket_GetTACKTime", _wrap_DataPacket_GetTACKTime, METH_O, "DataPacket_GetTACKTime(DataPacket self) -> uint64_t"},
	 { "DataPacket_GetTACKMode", _wrap_DataPacket_GetTACKMode, METH_O, "DataPacket_GetTACKMode(DataPacket self) -> uint8_t"},
	 { "DataPacket_IsZeroSupressionEnabled", _wrap_DataPacket_IsZeroSupressionEnabled, METH_O, "DataPacket_IsZeroSupressionEnabled(DataPacket self) -> bool"},
	 { "DataPacket_GetStaleBit", _wrap_DataPacket_GetStaleBit, METH_O, "DataPacket_GetStaleBit(DataPacket self) -> uint8_t"},
	 { "DataPacket_GetColumn", _wrap_DataPacket_GetColumn, METH_O, "DataPacket_GetColumn(DataPacket self) -> uint8_t"},
	 { "DataPacket_GetRow", _wrap_DataPacket_GetRow, METH_O, "DataPacket_GetRow(DataPacket self) -> uint8_t"},
	 { "DataPacket_GetBlockPhase", _wrap_DataPacket_GetBlockPhase, METH_O, "DataPacket_GetBlockPhase(DataPacket self) -> uint8_t"},
	 { "DataPacket_CalculateFirstCellId", _wrap_DataPacket_CalculateFirstCellId, METH_VARARGS, "DataPacket_CalculateFirstCellId(uint16_t pRow, uint16_t pColumn, uint16_t pBlockPhase) -> uint16_t"},
	 { "DataPacket_CalculatePacketSizeInBytes", _wrap_DataPacket_CalculatePacketSizeInBytes, METH_VARARGS, "DataPacket_CalculatePacketSizeInBytes(uint16_t pWaveformsPerPacket, uint16_t pSamplesPerWaveform) -> uint16_t"},
	 { "DataPacket_CalculateRowColumnBlockPhase", _wrap_DataPacket_CalculateRowColumnBlockPhase, METH_VARARGS, "DataPacket_CalculateRowColumnBlockPhase(uint16_t pCellId, uint16_t & pRow, uint16_t & pColumn, uint16_t & pBlockPhase)"},
	 { "DataPacket_GetNCells", _wrap_DataPacket_GetNCells, METH_NOARGS, "DataPacket_GetNCells() -> uint16_t"},
	 { "DataPacket_GetFirstCellId", _wrap_DataPacket_GetFirstCellId, METH_O, "DataPacket_GetFirstCellId(DataPacket self) -> uint16_t"},
	 { "DataPacket_GetWaveform", _wrap_DataPacket_GetWaveform, METH_VARARGS, "DataPacket_GetWaveform(DataPacket self, uint16_t waveformindex) -> Waveform"},
	 { "DataPacket_GetPacketID", _wrap_DataPacket_GetPacketID, METH_O, "DataPacket_GetPacketID(DataPacket self) -> bool"},
	 { "DataPacket_AssociateWaveform", _wrap_DataPacket_AssociateWaveform, METH_VARARGS, "DataPacket_AssociateWaveform(DataPacket self, uint16_t n, Waveform pWaveform)"},
	 { "DataPacket_FillHeader", _wrap_DataPacket_FillHeader, METH_VARARGS, "DataPacket_FillHeader(DataPacket self, uint16_t waves_per_packet, uint16_t waveform_samples, uint8_t camera_slot_id, uint8_t module_index, uint8_t event_sequence_number, uint64_t tack, uint8_t quad, uint8_t row, uint8_t col)"},
	 { "DataPacket_FillFooter", _wrap_DataPacket_FillFooter, METH_O, "DataPacket_FillFooter(DataPacket self)"},
	 { "DataPacket_SummarisePacket", _wrap_DataPacket_SummarisePacket, METH_VARARGS, "DataPacket_SummarisePacket(DataPacket self, std::ostream & os=std::cout)"},
	 { "DataPacket_Allocate", _wrap_DataPacket_Allocate, METH_VARARGS, "DataPacket_Allocate(DataPacket self, uint16_t packetsize)"},
	 { "DataPacket_Assign", _wrap_DataPacket_Assign, METH_VARARGS, "DataPacket_Assign(DataPacket self, uint8_t * data, uint16_t packetsize)"},
	 { "DataPacket_Fill", _wrap_DataPacket_Fill, METH_VARARGS, "DataPacket_Fill(DataPacket self, uint8_t const * data, uint16_t packetsize) -> bool"},
	 { "DataPacket_ClearFilledFlag", _wrap_DataPacket_ClearFilledFlag, METH_O, "DataPacket_ClearFilledFlag(DataPacket self)"},
	 { "DataPacket_Deallocate", _wrap_DataPacket_Deallocate, METH_O, "DataPacket_Deallocate(DataPacket self)"},
	 { "DataPacket_IsFilled", _wrap_DataPacket_IsFilled, METH_O, "DataPacket_IsFilled(DataPacket self) -> bool"},
	 { "DataPacket_GetPacketSize", _wrap_DataPacket_GetPacketSize, METH_O, "DataPacket_GetPacketSize(DataPacket self) -> uint16_t"},
	 { "DataPacket_GetData", _wrap_DataPacket_GetData, METH_O, "DataPacket_GetData(DataPacket self) -> uint8_t *"},
	 { "DataPacket_Print", _wrap_DataPacket_Print, METH_O, "DataPacket_Print(DataPacket self)"},
	 { "DataPacket_FillZero", _wrap_DataPacket_FillZero, METH_O, "DataPacket_FillZero(DataPacket self)"},
	 { "DataPacket_swigregister", DataPacket_swigregister, METH_O, NULL},
	 { "DataPacket_swiginit", DataPacket_swiginit, METH_VARARGS, NULL},
	 { "delete_TesterBoard", _wrap_delete_TesterBoard, METH_O, "delete_TesterBoard(TesterBoard self)"},
	 { "TesterBoard_Init", _wrap_TesterBoard_Init, METH_VARARGS, "TesterBoard_Init(TesterBoard self, std::string const & my_ip, std::string const & tb_ip) -> int"},
	 { "TesterBoard_GetFirmwareVersion", _wrap_TesterBoard_GetFirmwareVersion, METH_O, "TesterBoard_GetFirmwareVersion(TesterBoard self) -> uint32_t"},
	 { "TesterBoard_GetSerialNumber", _wrap_TesterBoard_GetSerialNumber, METH_O, "TesterBoard_GetSerialNumber(TesterBoard self) -> uint64_t"},
	 { "TesterBoard_GetStatus", _wrap_TesterBoard_GetStatus, METH_O, "TesterBoard_GetStatus(TesterBoard self) -> uint32_t"},
	 { "TesterBoard_PrintStatus", _wrap_TesterBoard_PrintStatus, METH_O, "TesterBoard_PrintStatus(TesterBoard self)"},
	 { "TesterBoard_TurnOffAnalogInput", _wrap_TesterBoard_TurnOffAnalogInput, METH_O, "TesterBoard_TurnOffAnalogInput(TesterBoard self)"},
	 { "TesterBoard_IsCameraModuleConnected", _wrap_TesterBoard_IsCameraModuleConnected, METH_O, "TesterBoard_IsCameraModuleConnected(TesterBoard self) -> bool"},
	 { "TesterBoard_SetStatusOfBPLines", _wrap_TesterBoard_SetStatusOfBPLines, METH_VARARGS, "TesterBoard_SetStatusOfBPLines(TesterBoard self, bool bp6, bool bp4)"},
	 { "TesterBoard_EnableReset", _wrap_TesterBoard_EnableReset, METH_VARARGS, "TesterBoard_EnableReset(TesterBoard self, bool enable)"},
	 { "TesterBoard_SetTriggerDeadTime", _wrap_TesterBoard_SetTriggerDeadTime, METH_VARARGS, "TesterBoard_SetTriggerDeadTime(TesterBoard self, uint16_t deadtime) -> int"},
	 { "TesterBoard_SetClockOffset", _wrap_TesterBoard_SetClockOffset, METH_VARARGS, "TesterBoard_SetClockOffset(TesterBoard self, uint8_t offset) -> int"},
	 { "TesterBoard_SendSoftwareTrigger", _wrap_TesterBoard_SendSoftwareTrigger, METH_O, "TesterBoard_SendSoftwareTrigger(TesterBoard self) -> int"},
	 { "TesterBoard_ResyncTrigger", _wrap_TesterBoard_ResyncTrigger, METH_O, "TesterBoard_ResyncTrigger(TesterBoard self)"},
	 { "TesterBoard_SetTriggerModeAndType", _wrap_TesterBoard_SetTriggerModeAndType, METH_VARARGS, "TesterBoard_SetTriggerModeAndType(TesterBoard self, uint8_t mode, uint8_t type) -> int"},
	 { "TesterBoard_SetTriggerMode", _wrap_TesterBoard_SetTriggerMode, METH_VARARGS, "TesterBoard_SetTriggerMode(TesterBoard self, uint8_t mode) -> int"},
	 { "TesterBoard_EnableExternalTrigger", _wrap_TesterBoard_EnableExternalTrigger, METH_VARARGS, "TesterBoard_EnableExternalTrigger(TesterBoard self, bool enable)"},
	 { "TesterBoard_EnableSoftwareTrigger", _wrap_TesterBoard_EnableSoftwareTrigger, METH_VARARGS, "TesterBoard_EnableSoftwareTrigger(TesterBoard self, bool enable)"},
	 { "TesterBoard_GetTriggerMode", _wrap_TesterBoard_GetTriggerMode, METH_O, "TesterBoard_GetTriggerMode(TesterBoard self) -> uint8_t"},
	 { "TesterBoard_EnableTrigger", _wrap_TesterBoard_EnableTrigger, METH_VARARGS, "\n"
		"TesterBoard_EnableTrigger(TesterBoard self, uint8_t asic, bool b0, bool b1, bool b2, bool b3)\n"
		"TesterBoard_EnableTrigger(TesterBoard self, uint8_t asic, uint8_t group, bool enable)\n"
		""},
	 { "TesterBoard_EnableTriggerCounterContribution", _wrap_TesterBoard_EnableTriggerCounterContribution, METH_VARARGS, "TesterBoard_EnableTriggerCounterContribution(TesterBoard self, uint8_t asic, uint8_t group, bool enable)"},
	 { "TesterBoard_StartTriggerEfficiencyCounter", _wrap_TesterBoard_StartTriggerEfficiencyCounter, METH_VARARGS, "TesterBoard_StartTriggerEfficiencyCounter(TesterBoard self, uint32_t duration)"},
	 { "TesterBoard_GetTriggerCounter", _wrap_TesterBoard_GetTriggerCounter, METH_O, "TesterBoard_GetTriggerCounter(TesterBoard self) -> uint32_t"},
	 { "TesterBoard_GetTriggerEfficiencyCounter", _wrap_TesterBoard_GetTriggerEfficiencyCounter, METH_O, "TesterBoard_GetTriggerEfficiencyCounter(TesterBoard self) -> uint32_t"},
	 { "TesterBoard_StartTimeBaseCounting", _wrap_TesterBoard_StartTimeBaseCounting, METH_VARARGS, "TesterBoard_StartTimeBaseCounting(TesterBoard self, uint64_t start)"},
	 { "TesterBoard_GetTACKMessage", _wrap_TesterBoard_GetTACKMessage, METH_O, "TesterBoard_GetTACKMessage(TesterBoard self) -> uint64_t"},
	 { "TesterBoard_IsTriggerEfficiencyCounterOutsideDeadTimeCompleted", _wrap_TesterBoard_IsTriggerEfficiencyCounterOutsideDeadTimeCompleted, METH_O, "TesterBoard_IsTriggerEfficiencyCounterOutsideDeadTimeCompleted(TesterBoard self) -> bool"},
	 { "TesterBoard_GetTriggerEfficiencyCounterOutsideDeadTime", _wrap_TesterBoard_GetTriggerEfficiencyCounterOutsideDeadTime, METH_O, "TesterBoard_GetTriggerEfficiencyCounterOutsideDeadTime(TesterBoard self) -> uint32_t"},
	 { "new_TesterBoard", _wrap_new_TesterBoard, METH_NOARGS, "new_TesterBoard() -> TesterBoard"},
	 { "TesterBoard_swigregister", TesterBoard_swigregister, METH_O, NULL},
	 { "TesterBoard_swiginit", TesterBoard_swiginit, METH_VARARGS, NULL},
	 { "new_EventHeader", _wrap_new_EventHeader, METH_NOARGS, "new_EventHeader() -> EventHeader"},
	 { "delete_EventHeader", _wrap_delete_EventHeader, METH_O, "delete_EventHeader(EventHeader self)"},
	 { "EventHeader_Init", _wrap_EventHeader_Init, METH_O, "EventHeader_Init(EventHeader self)"},
	 { "EventHeader_SetEventID", _wrap_EventHeader_SetEventID, METH_VARARGS, "EventHeader_SetEventID(EventHeader self, uint32_t pEventID)"},
	 { "EventHeader_GetEventID", _wrap_EventHeader_GetEventID, METH_O, "EventHeader_GetEventID(EventHeader self) -> uint32_t"},
	 { "EventHeader_SetTACK", _wrap_EventHeader_SetTACK, METH_VARARGS, "EventHeader_SetTACK(EventHeader self, uint64_t pTACK)"},
	 { "EventHeader_GetTACK", _wrap_EventHeader_GetTACK, METH_O, "EventHeader_GetTACK(EventHeader self) -> uint64_t"},
	 { "EventHeader_SetNPacketsFilled", _wrap_EventHeader_SetNPacketsFilled, METH_VARARGS, "EventHeader_SetNPacketsFilled(EventHeader self, uint16_t pNPacketsFilled)"},
	 { "EventHeader_GetNPacketsFilled", _wrap_EventHeader_GetNPacketsFilled, METH_O, "EventHeader_GetNPacketsFilled(EventHeader self) -> uint16_t"},
	 { "EventHeader_IncrementNPacketsFilled", _wrap_EventHeader_IncrementNPacketsFilled, METH_O, "EventHeader_IncrementNPacketsFilled(EventHeader self)"},
	 { "EventHeader_SetTimeStamp", _wrap_EventHeader_SetTimeStamp, METH_VARARGS, "EventHeader_SetTimeStamp(EventHeader self, int64_t pSec, int64_t pNanosec)"},
	 { "EventHeader_GetTimeStamp", _wrap_EventHeader_GetTimeStamp, METH_VARARGS, "EventHeader_GetTimeStamp(EventHeader self, int64_t & pSec, int64_t & pNanosec)"},
	 { "EventHeader_SetTimeStampNow", _wrap_EventHeader_SetTimeStampNow, METH_O, "EventHeader_SetTimeStampNow(EventHeader self)"},
	 { "EventHeader_CalcDeltaTSinceTimeStamp", _wrap_EventHeader_CalcDeltaTSinceTimeStamp, METH_O, "EventHeader_CalcDeltaTSinceTimeStamp(EventHeader self) -> double"},
	 { "EventHeader_IfTimeStampIsZero", _wrap_EventHeader_IfTimeStampIsZero, METH_O, "EventHeader_IfTimeStampIsZero(EventHeader self) -> bool"},
	 { "EventHeader_swigregister", EventHeader_swigregister, METH_O, NULL},
	 { "EventHeader_swiginit", EventHeader_swiginit, METH_VARARGS, NULL},
	 { "new_RawEvent", _wrap_new_RawEvent, METH_VARARGS, "new_RawEvent(uint16_t pNPacketsPerEvent, uint16_t pPacketSize) -> RawEvent"},
	 { "delete_RawEvent", _wrap_delete_RawEvent, METH_O, "delete_RawEvent(RawEvent self)"},
	 { "RawEvent_Clear", _wrap_RawEvent_Clear, METH_O, "RawEvent_Clear(RawEvent self)"},
	 { "RawEvent_GetDataPackets", _wrap_RawEvent_GetDataPackets, METH_O, "RawEvent_GetDataPackets(RawEvent self) -> std::vector< CTA::TargetDriver::DataPacket * > const &"},
	 { "RawEvent_GetPacketSize", _wrap_RawEvent_GetPacketSize, METH_O, "RawEvent_GetPacketSize(RawEvent self) -> uint16_t"},
	 { "RawEvent_GetEventHeader", _wrap_RawEvent_GetEventHeader, METH_O, "RawEvent_GetEventHeader(RawEvent self) -> EventHeader"},
	 { "RawEvent_GetNPacketsPerEvent", _wrap_RawEvent_GetNPacketsPerEvent, METH_O, "RawEvent_GetNPacketsPerEvent(RawEvent self) -> std::size_t"},
	 { "RawEvent_GetTimeoutSec", _wrap_RawEvent_GetTimeoutSec, METH_O, "RawEvent_GetTimeoutSec(RawEvent self) -> double"},
	 { "RawEvent_SetTimeoutSec", _wrap_RawEvent_SetTimeoutSec, METH_O, "RawEvent_SetTimeoutSec(double pTimeoutSec)"},
	 { "RawEvent_IsEmpty", _wrap_RawEvent_IsEmpty, METH_O, "RawEvent_IsEmpty(RawEvent self) -> bool"},
	 { "RawEvent_IsTimedOut", _wrap_RawEvent_IsTimedOut, METH_O, "RawEvent_IsTimedOut(RawEvent self) -> bool"},
	 { "RawEvent_WasFlushed", _wrap_RawEvent_WasFlushed, METH_O, "RawEvent_WasFlushed(RawEvent self) -> bool"},
	 { "RawEvent_WasRead", _wrap_RawEvent_WasRead, METH_O, "RawEvent_WasRead(RawEvent self) -> bool"},
	 { "RawEvent_SetToRead", _wrap_RawEvent_SetToRead, METH_O, "RawEvent_SetToRead(RawEvent self)"},
	 { "RawEvent_SetToFlushed", _wrap_RawEvent_SetToFlushed, METH_O, "RawEvent_SetToFlushed(RawEvent self)"},
	 { "RawEvent_IsBeingBuilt", _wrap_RawEvent_IsBeingBuilt, METH_O, "RawEvent_IsBeingBuilt(RawEvent self) -> bool"},
	 { "RawEvent_IsComplete", _wrap_RawEvent_IsComplete, METH_O, "RawEvent_IsComplete(RawEvent self) -> bool"},
	 { "RawEvent_AddNewPacket", _wrap_RawEvent_AddNewPacket, METH_VARARGS, "RawEvent_AddNewPacket(RawEvent self, uint8_t const * pData, uint16_t pPacketID, uint16_t pPacketSize, bool checkflag=False) -> bool"},
	 { "RawEvent_WaveformCheckStatus", _wrap_RawEvent_WaveformCheckStatus, METH_O, "RawEvent_WaveformCheckStatus(RawEvent self) -> bool"},
	 { "RawEvent_swigregister", RawEvent_swigregister, METH_O, NULL},
	 { "RawEvent_swiginit", RawEvent_swiginit, METH_VARARGS, NULL},
	 { "new_EventBuffer", _wrap_new_EventBuffer, METH_VARARGS, "EventBuffer(uint32_t pBufferDepth, uint16_t pNPacketsPerEvent, uint16_t pPacketSize, float pBuildTimeout=0.2, uint32_t pCheckFreq=0)"},
	 { "delete_EventBuffer", _wrap_delete_EventBuffer, METH_O, "delete_EventBuffer(EventBuffer self)"},
	 { "EventBuffer_AddNewPacket", _wrap_EventBuffer_AddNewPacket, METH_VARARGS, "EventBuffer_AddNewPacket(EventBuffer self, uint8_t const * pData, uint32_t pEventID, uint16_t pPacketID, uint16_t pPacketSize) -> bool"},
	 { "EventBuffer_ReadEvent", _wrap_EventBuffer_ReadEvent, METH_O, "EventBuffer_ReadEvent(EventBuffer self) -> RawEvent"},
	 { "EventBuffer_Clear", _wrap_EventBuffer_Clear, METH_O, "EventBuffer_Clear(EventBuffer self)"},
	 { "EventBuffer_ClearEvents", _wrap_EventBuffer_ClearEvents, METH_O, "EventBuffer_ClearEvents(EventBuffer self)"},
	 { "EventBuffer_Flush", _wrap_EventBuffer_Flush, METH_O, "EventBuffer_Flush(EventBuffer self)"},
	 { "EventBuffer_Report", _wrap_EventBuffer_Report, METH_VARARGS, "EventBuffer_Report(EventBuffer self, std::ostream & stream)"},
	 { "EventBuffer_StatusOK", _wrap_EventBuffer_StatusOK, METH_O, "EventBuffer_StatusOK(EventBuffer self) -> bool"},
	 { "EventBuffer_GetEventRate", _wrap_EventBuffer_GetEventRate, METH_O, "EventBuffer_GetEventRate(EventBuffer self) -> float"},
	 { "EventBuffer_GetPacketSize", _wrap_EventBuffer_GetPacketSize, METH_O, "EventBuffer_GetPacketSize(EventBuffer self) -> uint16_t"},
	 { "EventBuffer_GetNPacketsPerEvent", _wrap_EventBuffer_GetNPacketsPerEvent, METH_O, "EventBuffer_GetNPacketsPerEvent(EventBuffer self) -> uint16_t"},
	 { "EventBuffer_GetReadIndex", _wrap_EventBuffer_GetReadIndex, METH_O, "EventBuffer_GetReadIndex(EventBuffer self) -> int64_t"},
	 { "EventBuffer_GetWriteIndex", _wrap_EventBuffer_GetWriteIndex, METH_O, "EventBuffer_GetWriteIndex(EventBuffer self) -> int64_t"},
	 { "EventBuffer_GetFinishedIndex", _wrap_EventBuffer_GetFinishedIndex, METH_O, "EventBuffer_GetFinishedIndex(EventBuffer self) -> int64_t"},
	 { "EventBuffer_GetNumberIncomplete", _wrap_EventBuffer_GetNumberIncomplete, METH_O, "EventBuffer_GetNumberIncomplete(EventBuffer self) -> int64_t"},
	 { "EventBuffer_GetNumberToBeRead", _wrap_EventBuffer_GetNumberToBeRead, METH_O, "EventBuffer_GetNumberToBeRead(EventBuffer self) -> int64_t"},
	 { "EventBuffer_DiagnosticReport", _wrap_EventBuffer_DiagnosticReport, METH_VARARGS, "EventBuffer_DiagnosticReport(EventBuffer self, std::ostream & stream)"},
	 { "EventBuffer_swigregister", EventBuffer_swigregister, METH_O, NULL},
	 { "EventBuffer_swiginit", EventBuffer_swiginit, METH_VARARGS, NULL},
	 { "new_DataListener", _wrap_new_DataListener, METH_VARARGS, "DataListener(uint32_t pBufferDepth, uint16_t pNPacketsPerEvent, uint16_t pPacketSize, float pBuildTimeout=0.2, uint32_t pCheckFreq=0)"},
	 { "delete_DataListener", _wrap_delete_DataListener, METH_O, "delete_DataListener(DataListener self)"},
	 { "DataListener_AddDAQListener", _wrap_DataListener_AddDAQListener, METH_VARARGS, "DataListener_AddDAQListener(DataListener self, std::string const & pMyIP) -> int"},
	 { "DataListener_StopListening", _wrap_DataListener_StopListening, METH_O, "DataListener_StopListening(DataListener self)"},
	 { "DataListener_StartListening", _wrap_DataListener_StartListening, METH_O, "DataListener_StartListening(DataListener self)"},
	 { "DataListener_IsRunning", _wrap_DataListener_IsRunning, METH_O, "DataListener_IsRunning(DataListener self) -> bool"},
	 { "DataListener_DropPackets", _wrap_DataListener_DropPackets, METH_VARARGS, "DataListener_DropPackets(DataListener self, bool drop=True)"},
	 { "DataListener_GetNPacketsReceived", _wrap_DataListener_GetNPacketsReceived, METH_O, "DataListener_GetNPacketsReceived(DataListener self) -> uint64_t"},
	 { "DataListener_GetNPacketProblems", _wrap_DataListener_GetNPacketProblems, METH_O, "DataListener_GetNPacketProblems(DataListener self) -> uint64_t"},
	 { "DataListener_GetEventBuffer", _wrap_DataListener_GetEventBuffer, METH_O, "DataListener_GetEventBuffer(DataListener self) -> std::shared_ptr< CTA::TargetDriver::EventBuffer >"},
	 { "DataListener_swigregister", DataListener_swigregister, METH_O, NULL},
	 { "DataListener_swiginit", DataListener_swiginit, METH_VARARGS, NULL},
	 { "get_default_config_dir", _wrap_get_default_config_dir, METH_NOARGS, "get_default_config_dir() -> std::string"},
	 { "send_waveform_packet", _wrap_send_waveform_packet, METH_VARARGS, "send_waveform_packet(DataPacket p, ModuleSimulator sim, uint16_t waves, uint16_t samples) -> int"},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_CTA__TargetDriver__TesterBoardTo_p_CTA__TargetDriver__TargetModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CTA::TargetDriver::TargetModule *)  ((CTA::TargetDriver::TesterBoard *) x));
}
static void *_p_CTA__TargetDriver__ModuleSimulatorTo_p_CTA__TargetDriver__UDPServer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CTA::TargetDriver::UDPServer *)  ((CTA::TargetDriver::ModuleSimulator *) x));
}
static void *_p_CTA__TargetDriver__TargetModuleTo_p_CTA__TargetDriver__UDPBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CTA::TargetDriver::UDPBase *) (CTA::TargetDriver::UDPClient *) ((CTA::TargetDriver::TargetModule *) x));
}
static void *_p_CTA__TargetDriver__UDPServerTo_p_CTA__TargetDriver__UDPBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CTA::TargetDriver::UDPBase *)  ((CTA::TargetDriver::UDPServer *) x));
}
static void *_p_CTA__TargetDriver__ModuleSimulatorTo_p_CTA__TargetDriver__UDPBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CTA::TargetDriver::UDPBase *) (CTA::TargetDriver::UDPServer *) ((CTA::TargetDriver::ModuleSimulator *) x));
}
static void *_p_CTA__TargetDriver__DataListenerTo_p_CTA__TargetDriver__UDPBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CTA::TargetDriver::UDPBase *) (CTA::TargetDriver::UDPClient *) ((CTA::TargetDriver::DataListener *) x));
}
static void *_p_CTA__TargetDriver__UDPClientTo_p_CTA__TargetDriver__UDPBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CTA::TargetDriver::UDPBase *)  ((CTA::TargetDriver::UDPClient *) x));
}
static void *_p_CTA__TargetDriver__TesterBoardTo_p_CTA__TargetDriver__UDPBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CTA::TargetDriver::UDPBase *) (CTA::TargetDriver::UDPClient *)(CTA::TargetDriver::TargetModule *) ((CTA::TargetDriver::TesterBoard *) x));
}
static void *_p_CTA__TargetDriver__TargetModuleTo_p_CTA__TargetDriver__UDPClient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CTA::TargetDriver::UDPClient *)  ((CTA::TargetDriver::TargetModule *) x));
}
static void *_p_CTA__TargetDriver__DataListenerTo_p_CTA__TargetDriver__UDPClient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CTA::TargetDriver::UDPClient *)  ((CTA::TargetDriver::DataListener *) x));
}
static void *_p_CTA__TargetDriver__TesterBoardTo_p_CTA__TargetDriver__UDPClient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CTA::TargetDriver::UDPClient *) (CTA::TargetDriver::TargetModule *) ((CTA::TargetDriver::TesterBoard *) x));
}
static swig_type_info _swigt__p_CTA__TargetDriver__DataListener = {"_p_CTA__TargetDriver__DataListener", "CTA::TargetDriver::DataListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__DataPacket = {"_p_CTA__TargetDriver__DataPacket", "CTA::TargetDriver::DataPacket *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__EventBuffer = {"_p_CTA__TargetDriver__EventBuffer", "CTA::TargetDriver::EventBuffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__EventHeader = {"_p_CTA__TargetDriver__EventHeader", "CTA::TargetDriver::EventHeader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__ModuleSimulator = {"_p_CTA__TargetDriver__ModuleSimulator", "CTA::TargetDriver::ModuleSimulator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__RawEvent = {"_p_CTA__TargetDriver__RawEvent", "CTA::TargetDriver::RawEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__RegisterASIC = {"_p_CTA__TargetDriver__RegisterASIC", "CTA::TargetDriver::RegisterASIC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__RegisterFPGA = {"_p_CTA__TargetDriver__RegisterFPGA", "CTA::TargetDriver::RegisterFPGA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__RegisterSettings = {"_p_CTA__TargetDriver__RegisterSettings", "CTA::TargetDriver::RegisterSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__Setting = {"_p_CTA__TargetDriver__Setting", "CTA::TargetDriver::Setting *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__SettingASIC = {"_p_CTA__TargetDriver__SettingASIC", "CTA::TargetDriver::SettingASIC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__TargetModule = {"_p_CTA__TargetDriver__TargetModule", "CTA::TargetDriver::TargetModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__TesterBoard = {"_p_CTA__TargetDriver__TesterBoard", "CTA::TargetDriver::TesterBoard *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__UDPBase = {"_p_CTA__TargetDriver__UDPBase", "CTA::TargetDriver::UDPBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__UDPClient = {"_p_CTA__TargetDriver__UDPClient", "CTA::TargetDriver::UDPClient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__UDPServer = {"_p_CTA__TargetDriver__UDPServer", "CTA::TargetDriver::UDPServer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CTA__TargetDriver__Waveform = {"_p_CTA__TargetDriver__Waveform", "CTA::TargetDriver::Waveform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RA_cit = {"_p_RA_cit", "RA_cit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RF_cit = {"_p_RF_cit", "RF_cit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SA_cit = {"_p_SA_cit", "SA_cit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SF_cit = {"_p_SF_cit", "SF_cit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ssize_t = {"_p_ssize_t", "ssize_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_CTA__TargetDriver__SettingASIC_t = {"_p_std__mapT_std__string_CTA__TargetDriver__SettingASIC_t", "std::map< std::string,CTA::TargetDriver::SettingASIC > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_CTA__TargetDriver__Setting_t = {"_p_std__mapT_std__string_CTA__TargetDriver__Setting_t", "std::map< std::string,CTA::TargetDriver::Setting > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_unsigned_char_CTA__TargetDriver__RegisterASIC_t = {"_p_std__mapT_unsigned_char_CTA__TargetDriver__RegisterASIC_t", "std::map< unsigned char,CTA::TargetDriver::RegisterASIC > *|std::map< uint8_t,CTA::TargetDriver::RegisterASIC > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_unsigned_int_CTA__TargetDriver__RegisterFPGA_t = {"_p_std__mapT_unsigned_int_CTA__TargetDriver__RegisterFPGA_t", "std::map< uint32_t,CTA::TargetDriver::RegisterFPGA > *|std::map< unsigned int,CTA::TargetDriver::RegisterFPGA > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_CTA__TargetDriver__EventBuffer_t = {"_p_std__shared_ptrT_CTA__TargetDriver__EventBuffer_t", "std::shared_ptr< CTA::TargetDriver::EventBuffer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_CTA__TargetDriver__DataPacket_p_t = {"_p_std__vectorT_CTA__TargetDriver__DataPacket_p_t", "std::vector< CTA::TargetDriver::DataPacket * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_bool_t = {"_p_std__vectorT_bool_t", "std::vector< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CTA__TargetDriver__DataListener,
  &_swigt__p_CTA__TargetDriver__DataPacket,
  &_swigt__p_CTA__TargetDriver__EventBuffer,
  &_swigt__p_CTA__TargetDriver__EventHeader,
  &_swigt__p_CTA__TargetDriver__ModuleSimulator,
  &_swigt__p_CTA__TargetDriver__RawEvent,
  &_swigt__p_CTA__TargetDriver__RegisterASIC,
  &_swigt__p_CTA__TargetDriver__RegisterFPGA,
  &_swigt__p_CTA__TargetDriver__RegisterSettings,
  &_swigt__p_CTA__TargetDriver__Setting,
  &_swigt__p_CTA__TargetDriver__SettingASIC,
  &_swigt__p_CTA__TargetDriver__TargetModule,
  &_swigt__p_CTA__TargetDriver__TesterBoard,
  &_swigt__p_CTA__TargetDriver__UDPBase,
  &_swigt__p_CTA__TargetDriver__UDPClient,
  &_swigt__p_CTA__TargetDriver__UDPServer,
  &_swigt__p_CTA__TargetDriver__Waveform,
  &_swigt__p_RA_cit,
  &_swigt__p_RF_cit,
  &_swigt__p_SA_cit,
  &_swigt__p_SF_cit,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_ssize_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__mapT_std__string_CTA__TargetDriver__SettingASIC_t,
  &_swigt__p_std__mapT_std__string_CTA__TargetDriver__Setting_t,
  &_swigt__p_std__mapT_unsigned_char_CTA__TargetDriver__RegisterASIC_t,
  &_swigt__p_std__mapT_unsigned_int_CTA__TargetDriver__RegisterFPGA_t,
  &_swigt__p_std__ostream,
  &_swigt__p_std__shared_ptrT_CTA__TargetDriver__EventBuffer_t,
  &_swigt__p_std__vectorT_CTA__TargetDriver__DataPacket_p_t,
  &_swigt__p_std__vectorT_bool_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_CTA__TargetDriver__DataListener[] = {  {&_swigt__p_CTA__TargetDriver__DataListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__DataPacket[] = {  {&_swigt__p_CTA__TargetDriver__DataPacket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__EventBuffer[] = {  {&_swigt__p_CTA__TargetDriver__EventBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__EventHeader[] = {  {&_swigt__p_CTA__TargetDriver__EventHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__ModuleSimulator[] = {  {&_swigt__p_CTA__TargetDriver__ModuleSimulator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__RawEvent[] = {  {&_swigt__p_CTA__TargetDriver__RawEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__RegisterASIC[] = {  {&_swigt__p_CTA__TargetDriver__RegisterASIC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__RegisterFPGA[] = {  {&_swigt__p_CTA__TargetDriver__RegisterFPGA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__RegisterSettings[] = {  {&_swigt__p_CTA__TargetDriver__RegisterSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__Setting[] = {  {&_swigt__p_CTA__TargetDriver__Setting, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__SettingASIC[] = {  {&_swigt__p_CTA__TargetDriver__SettingASIC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__TargetModule[] = {  {&_swigt__p_CTA__TargetDriver__TargetModule, 0, 0, 0},  {&_swigt__p_CTA__TargetDriver__TesterBoard, _p_CTA__TargetDriver__TesterBoardTo_p_CTA__TargetDriver__TargetModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__TesterBoard[] = {  {&_swigt__p_CTA__TargetDriver__TesterBoard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__UDPBase[] = {  {&_swigt__p_CTA__TargetDriver__TargetModule, _p_CTA__TargetDriver__TargetModuleTo_p_CTA__TargetDriver__UDPBase, 0, 0},  {&_swigt__p_CTA__TargetDriver__UDPServer, _p_CTA__TargetDriver__UDPServerTo_p_CTA__TargetDriver__UDPBase, 0, 0},  {&_swigt__p_CTA__TargetDriver__UDPBase, 0, 0, 0},  {&_swigt__p_CTA__TargetDriver__ModuleSimulator, _p_CTA__TargetDriver__ModuleSimulatorTo_p_CTA__TargetDriver__UDPBase, 0, 0},  {&_swigt__p_CTA__TargetDriver__DataListener, _p_CTA__TargetDriver__DataListenerTo_p_CTA__TargetDriver__UDPBase, 0, 0},  {&_swigt__p_CTA__TargetDriver__TesterBoard, _p_CTA__TargetDriver__TesterBoardTo_p_CTA__TargetDriver__UDPBase, 0, 0},  {&_swigt__p_CTA__TargetDriver__UDPClient, _p_CTA__TargetDriver__UDPClientTo_p_CTA__TargetDriver__UDPBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__UDPClient[] = {  {&_swigt__p_CTA__TargetDriver__TargetModule, _p_CTA__TargetDriver__TargetModuleTo_p_CTA__TargetDriver__UDPClient, 0, 0},  {&_swigt__p_CTA__TargetDriver__DataListener, _p_CTA__TargetDriver__DataListenerTo_p_CTA__TargetDriver__UDPClient, 0, 0},  {&_swigt__p_CTA__TargetDriver__UDPClient, 0, 0, 0},  {&_swigt__p_CTA__TargetDriver__TesterBoard, _p_CTA__TargetDriver__TesterBoardTo_p_CTA__TargetDriver__UDPClient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__UDPServer[] = {  {&_swigt__p_CTA__TargetDriver__UDPServer, 0, 0, 0},  {&_swigt__p_CTA__TargetDriver__ModuleSimulator, _p_CTA__TargetDriver__ModuleSimulatorTo_p_CTA__TargetDriver__UDPServer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTA__TargetDriver__Waveform[] = {  {&_swigt__p_CTA__TargetDriver__Waveform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RA_cit[] = {  {&_swigt__p_RA_cit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RF_cit[] = {  {&_swigt__p_RF_cit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SA_cit[] = {  {&_swigt__p_SA_cit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SF_cit[] = {  {&_swigt__p_SF_cit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ssize_t[] = {  {&_swigt__p_ssize_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_CTA__TargetDriver__SettingASIC_t[] = {  {&_swigt__p_std__mapT_std__string_CTA__TargetDriver__SettingASIC_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_CTA__TargetDriver__Setting_t[] = {  {&_swigt__p_std__mapT_std__string_CTA__TargetDriver__Setting_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_unsigned_char_CTA__TargetDriver__RegisterASIC_t[] = {  {&_swigt__p_std__mapT_unsigned_char_CTA__TargetDriver__RegisterASIC_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_unsigned_int_CTA__TargetDriver__RegisterFPGA_t[] = {  {&_swigt__p_std__mapT_unsigned_int_CTA__TargetDriver__RegisterFPGA_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_CTA__TargetDriver__EventBuffer_t[] = {  {&_swigt__p_std__shared_ptrT_CTA__TargetDriver__EventBuffer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_CTA__TargetDriver__DataPacket_p_t[] = {  {&_swigt__p_std__vectorT_CTA__TargetDriver__DataPacket_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_bool_t[] = {  {&_swigt__p_std__vectorT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CTA__TargetDriver__DataListener,
  _swigc__p_CTA__TargetDriver__DataPacket,
  _swigc__p_CTA__TargetDriver__EventBuffer,
  _swigc__p_CTA__TargetDriver__EventHeader,
  _swigc__p_CTA__TargetDriver__ModuleSimulator,
  _swigc__p_CTA__TargetDriver__RawEvent,
  _swigc__p_CTA__TargetDriver__RegisterASIC,
  _swigc__p_CTA__TargetDriver__RegisterFPGA,
  _swigc__p_CTA__TargetDriver__RegisterSettings,
  _swigc__p_CTA__TargetDriver__Setting,
  _swigc__p_CTA__TargetDriver__SettingASIC,
  _swigc__p_CTA__TargetDriver__TargetModule,
  _swigc__p_CTA__TargetDriver__TesterBoard,
  _swigc__p_CTA__TargetDriver__UDPBase,
  _swigc__p_CTA__TargetDriver__UDPClient,
  _swigc__p_CTA__TargetDriver__UDPServer,
  _swigc__p_CTA__TargetDriver__Waveform,
  _swigc__p_RA_cit,
  _swigc__p_RF_cit,
  _swigc__p_SA_cit,
  _swigc__p_SF_cit,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_ssize_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__mapT_std__string_CTA__TargetDriver__SettingASIC_t,
  _swigc__p_std__mapT_std__string_CTA__TargetDriver__Setting_t,
  _swigc__p_std__mapT_unsigned_char_CTA__TargetDriver__RegisterASIC_t,
  _swigc__p_std__mapT_unsigned_int_CTA__TargetDriver__RegisterFPGA_t,
  _swigc__p_std__ostream,
  _swigc__p_std__shared_ptrT_CTA__TargetDriver__EventBuffer_t,
  _swigc__p_std__vectorT_CTA__TargetDriver__DataPacket_p_t,
  _swigc__p_std__vectorT_bool_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        "swigvarlink",                      /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        0,                                  /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
        0,                                  /* tp_del */
        0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
        0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
        0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
        0,                                  /* tp_prev */
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        memcpy(gv->name, name, size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *globals = 0;
    if (!globals) {
      globals = SWIG_newvarlink();
    }
    return globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
  SWIG_Python_SetConstant(d, "TC_TIME_OUT",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "TC_UNEXPECTED_RESPONSE",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "TC_ERR_BAD_PACKET",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "TC_ERR_NO_RESPONSE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "TC_OK",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "TC_ERR_COMM_FAILURE",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, "TC_ERR_CONF_FAILURE",SWIG_From_int(static_cast< int >(-2)));
  SWIG_Python_SetConstant(d, "TC_ERR_USER_ERROR",SWIG_From_int(static_cast< int >(-3)));
  SWIG_Python_SetConstant(d, "TM_SOURCE_PORT",SWIG_From_int(static_cast< int >(8200)));
  SWIG_Python_SetConstant(d, "TM_DAQ_PORT",SWIG_From_int(static_cast< int >(8107)));
  SWIG_Python_SetConstant(d, "TM_SPECIAL_PORT",SWIG_From_int(static_cast< int >(8300)));
  SWIG_Python_SetConstant(d, "TM_DEST_PORT",SWIG_From_int(static_cast< int >(8105)));
  SWIG_Python_SetConstant(d, "TM_DATASEND_PORT",SWIG_From_int(static_cast< int >(8106)));
  SWIG_Python_SetConstant(d, "TM_SOCK_BUF_SIZE_SC",SWIG_From_int(static_cast< int >(10000)));
  SWIG_Python_SetConstant(d, "TM_SOCK_BUF_SIZE_DAQ",SWIG_From_int(static_cast< int >(999424)));
  SWIG_Python_SetConstant(d, "TM_MAX_ATTEMPTS",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "TM_RESPONSE_TIME_OUT",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, "TM_DAQ_TIME_OUT",SWIG_From_int(static_cast< int >(100)));
  SWIG_Python_SetConstant(d, "TM_CONTROLPACKET_SIZE",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "TM_BUFFER_SIZE",SWIG_From_int(static_cast< int >(4095)));
  SWIG_Python_SetConstant(d, "TM_ASICS",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "TM_TRIGGERPIXELS_PER_ASIC",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "TM_PIXELS_PER_ASIC",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "TM_TRIGGERPIXELS_PER_MODULE",SWIG_From_int(static_cast< int >((4*4))));
  SWIG_Python_SetConstant(d, "TM_PIXELS_PER_MODULE",SWIG_From_int(static_cast< int >((4*16))));
  SWIG_Python_SetConstant(d, "TM_STATE_NOTPRESENT",SWIG_From_int(static_cast< int >(-3)));
  SWIG_Python_SetConstant(d, "TM_STATE_NOTPOWERED",SWIG_From_int(static_cast< int >(-2)));
  SWIG_Python_SetConstant(d, "TM_STATE_UNRESPONSIVE",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, "TM_STATE_UNDEFINED",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "TM_STATE_SAFE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "TM_STATE_PRESYNC",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "TM_STATE_READY",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "TargetModule_eHVInput",SWIG_From_int(static_cast< int >(CTA::TargetDriver::TargetModule::eHVInput)));
  SWIG_Python_SetConstant(d, "TargetModule_eTemperature",SWIG_From_int(static_cast< int >(CTA::TargetDriver::TargetModule::eTemperature)));
  SWIG_Python_SetConstant(d, "TargetModule_eID",SWIG_From_int(static_cast< int >(CTA::TargetDriver::TargetModule::eID)));
  SWIG_Python_SetConstant(d, "TargetModule_eHVEnable",SWIG_From_int(static_cast< int >(CTA::TargetDriver::TargetModule::eHVEnable)));
  SWIG_Python_SetConstant(d, "TargetModule_eHVSetDAC0",SWIG_From_int(static_cast< int >(CTA::TargetDriver::TargetModule::eHVSetDAC0)));
  SWIG_Python_SetConstant(d, "TargetModule_eHVSetDAC1",SWIG_From_int(static_cast< int >(CTA::TargetDriver::TargetModule::eHVSetDAC1)));
  SWIG_Python_SetConstant(d, "TargetModule_eHVSetDAC2",SWIG_From_int(static_cast< int >(CTA::TargetDriver::TargetModule::eHVSetDAC2)));
  SWIG_Python_SetConstant(d, "TargetModule_eHVSetDAC3",SWIG_From_int(static_cast< int >(CTA::TargetDriver::TargetModule::eHVSetDAC3)));
  SWIG_Python_SetConstant(d, "TargetModule_eUnkown",SWIG_From_int(static_cast< int >(CTA::TargetDriver::TargetModule::eUnkown)));
  SWIG_Python_SetConstant(d, "eRW",SWIG_From_int(static_cast< int >(CTA::TargetDriver::eRW)));
  SWIG_Python_SetConstant(d, "eR",SWIG_From_int(static_cast< int >(CTA::TargetDriver::eR)));
  SWIG_Python_SetConstant(d, "eW",SWIG_From_int(static_cast< int >(CTA::TargetDriver::eW)));
  SWIG_Python_SetConstant(d, "eRW_NS",SWIG_From_int(static_cast< int >(CTA::TargetDriver::eRW_NS)));
  SWIG_Python_SetConstant(d, "T_PACKET_HEADER_WORDS",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "T_PACKET_FOOTER_WORDS",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "T_WAVEFORM_HEADER_WORDS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "T_SAMPLES_PER_WAVEFORM_BLOCK",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "T_PACKET_OK",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "T_PACKET_ERROR_NODATA",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "T_PACKET_ERROR_BADLENGTH",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "T_PACKET_ERROR_BADCRC",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "T_PACKET_ERROR_LASTBYTES",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "T_PACKET_ERROR_NOWAVEFORMS",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "TESTER_BOARD_PORT",SWIG_From_int(static_cast< int >(8104)));
  SWIG_Python_SetConstant(d, "TESTER_COMMAND_PORT",SWIG_From_int(static_cast< int >(8103)));
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "cvar", globals);
  Py_DECREF(globals);
  SWIG_addvarlink(globals, "EventHeader_kColumnType", Swig_var_EventHeader_kColumnType_get, Swig_var_EventHeader_kColumnType_set);
  SWIG_addvarlink(globals, "EventHeader_kColumnForm", Swig_var_EventHeader_kColumnForm_get, Swig_var_EventHeader_kColumnForm_set);
  SWIG_addvarlink(globals, "EventHeader_kColumnUnit", Swig_var_EventHeader_kColumnUnit_get, Swig_var_EventHeader_kColumnUnit_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

