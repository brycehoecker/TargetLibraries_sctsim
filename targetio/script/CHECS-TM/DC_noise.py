import target_driver
import target_io
import time
import numpy as np

outfileroot = "/home/cta/luigi/CHECS-TM/data/20170425/DC_noise4/events_Vped{}.tio"
my_ip = "192.168.12.1"
module_ip = "192.168.12.173"

module_def = "/home/cta/Software/TargetDriver/branches/issue17229/config/TC_MSA_FPGA_Firmware0xC0000002.def"
asic_def = "/home/cta/Software/TargetDriver/branches/issue17229/config/TC_ASIC.def"
trigger_asic_def = "/home/cta/Software/TargetDriver/branches/issue17229/config/T5TEA_ASIC.def"

module = target_driver.TargetModule(module_def, asic_def, trigger_asic_def, 0)
module.ReconnectToServer(my_ip, 8201, module_ip, 8105)

ret, fw = module.ReadRegister(0)
print "Firmware version: {:x}".format(fw)

for asic in range(4):
    module.WriteSetting("EnableChannelsASIC{}".format(asic), 0xffff)
module.WriteSetting("Zero_Enable", 0x1)
module.WriteSetting("DoneSignalSpeedUp",1)
nblocks = 3
module.WriteSetting("NumberOfBlocks", 3)

kNPacketsPerEvent = 64
# by default we have a data packet for each channel, this can be changed
kPacketSize = target_driver.DataPacket_CalculatePacketSizeInBytes(1, 32 * (nblocks + 1))
kBufferDepth = 1000

ped_vals = np.arange(1000,4096,50)

for vped in ped_vals:
    print "setting Vped to {} DAC".format(vped)
    for asic in range(4):
        for channel in range(16):
            module.WriteTriggerASICSetting("Vped_{}".format(channel),asic,int(vped),True)
    time.sleep(2)

    listener = target_io.DataListener(kBufferDepth, kNPacketsPerEvent, kPacketSize)
    listener.AddDAQListener(my_ip)
    listener.StartListening()
    writer = target_io.EventFileWriter(outfileroot.format(vped), kNPacketsPerEvent, kPacketSize)
    buf = listener.GetEventBuffer()
    writer.StartWatchingBuffer(buf)

    ####start data taking
    module.WriteSetting("TriggerDelay", 580)
    # lookback time between instant when the trigger is issued and the portion of the ASIC storage to digitize
    module.WriteSetting("TACK_TriggerType", 0x0)
    module.WriteSetting("TACK_TriggerMode", 0x0)
    # normal trigger operations
    module.WriteSetting("ExtTriggerDirection", 1)
    # enables hardsync trigger generated by FPGA, frequency ~120 Hz, in sync with signal sampling
    # (also, we always read out the same portion of the storage array)
    module.WriteSetting("TACK_EnableTrigger", 0x10000)  # hardware trigger

    time.sleep(3)  # wait 3 s to accumulate data

    ####stops data taking
    module.WriteSetting("TACK_EnableTrigger", 0)  # disable all triggers
    module.WriteSetting("ExtTriggerDirection", 0x0)  # restores hard trigger from external source

    ####close connection to module and output file
    writer.StopWatchingBuffer()  # stops data storing in file
    buf.Flush()
    writer.Close()

module.CloseSockets()
