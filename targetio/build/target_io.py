# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _target_io
else:
    import _target_io

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _target_io.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _target_io.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _target_io.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _target_io.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _target_io.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _target_io.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _target_io.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _target_io.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _target_io.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _target_io.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _target_io.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _target_io.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _target_io.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _target_io.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _target_io.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _target_io.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _target_io.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _target_io.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _target_io:
_target_io.SwigPyIterator_swigregister(SwigPyIterator)

class Waveform(object):
    r"""Proxy of C++ CTA::TargetDriver::Waveform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, data=None):
        r"""__init__(Waveform self, uint8_t * data=None) -> Waveform"""
        _target_io.Waveform_swiginit(self, _target_io.new_Waveform(data))
    __swig_destroy__ = _target_io.delete_Waveform

    def AssociateData(self, data):
        r"""AssociateData(Waveform self, uint8_t * data)"""
        return _target_io.Waveform_AssociateData(self, data)

    def IsErrorFlagOn(self):
        r"""IsErrorFlagOn(Waveform self) -> bool"""
        return _target_io.Waveform_IsErrorFlagOn(self)

    def GetChannel(self):
        r"""GetChannel(Waveform self) -> uint8_t"""
        return _target_io.Waveform_GetChannel(self)

    def GetASIC(self):
        r"""GetASIC(Waveform self) -> uint8_t"""
        return _target_io.Waveform_GetASIC(self)

    def GetSamples(self):
        r"""GetSamples(Waveform self) -> uint16_t"""
        return _target_io.Waveform_GetSamples(self)

    def GetADC(self, n):
        r"""GetADC(Waveform self, uint16_t n) -> uint16_t"""
        return _target_io.Waveform_GetADC(self, n)

    def GetADC16bit(self, n):
        r"""GetADC16bit(Waveform self, uint16_t n) -> uint16_t"""
        return _target_io.Waveform_GetADC16bit(self, n)

    def GetPixelID(self):
        r"""GetPixelID(Waveform self) -> uint16_t"""
        return _target_io.Waveform_GetPixelID(self)

    def GetADCArray(self, adcarray):
        r"""GetADCArray(Waveform self, uint16_t * adcarray)"""
        return _target_io.Waveform_GetADCArray(self, adcarray)

    def GetADC16bitArray(self, adcarray):
        r"""GetADC16bitArray(Waveform self, uint16_t * adcarray)"""
        return _target_io.Waveform_GetADC16bitArray(self, adcarray)

    def GetMeanAndStdDev(self, mean, stddev, maxsamples=0):
        r"""GetMeanAndStdDev(Waveform self, float & mean, float & stddev, uint16_t maxsamples=0)"""
        return _target_io.Waveform_GetMeanAndStdDev(self, mean, stddev, maxsamples)

    def GetMeanAndRMS(self, mean, rms, maxsamples=0):
        r"""GetMeanAndRMS(Waveform self, float & mean, float & rms, uint16_t maxsamples=0)"""
        return _target_io.Waveform_GetMeanAndRMS(self, mean, rms, maxsamples)

    def SetHeader(self, asic, chan, samples, errflag):
        r"""SetHeader(Waveform self, uint8_t asic, uint8_t chan, uint16_t samples, bool errflag)"""
        return _target_io.Waveform_SetHeader(self, asic, chan, samples, errflag)

    def SetADC(self, n, val):
        r"""SetADC(Waveform self, uint16_t n, uint16_t val)"""
        return _target_io.Waveform_SetADC(self, n, val)

    def SetADC16bit(self, n, val):
        r"""SetADC16bit(Waveform self, uint16_t n, uint16_t val)"""
        return _target_io.Waveform_SetADC16bit(self, n, val)

    def PackWaveform(self, asic, chan, samples, errflag, data=None):
        r"""PackWaveform(Waveform self, uint8_t asic, uint8_t chan, uint16_t samples, bool errflag, uint16_t * data=None)"""
        return _target_io.Waveform_PackWaveform(self, asic, chan, samples, errflag, data)

# Register Waveform in _target_io:
_target_io.Waveform_swigregister(Waveform)

T_PACKET_HEADER_WORDS = _target_io.T_PACKET_HEADER_WORDS

T_PACKET_FOOTER_WORDS = _target_io.T_PACKET_FOOTER_WORDS

T_WAVEFORM_HEADER_WORDS = _target_io.T_WAVEFORM_HEADER_WORDS

T_SAMPLES_PER_WAVEFORM_BLOCK = _target_io.T_SAMPLES_PER_WAVEFORM_BLOCK

T_PACKET_OK = _target_io.T_PACKET_OK

T_PACKET_ERROR_NODATA = _target_io.T_PACKET_ERROR_NODATA

T_PACKET_ERROR_BADLENGTH = _target_io.T_PACKET_ERROR_BADLENGTH

T_PACKET_ERROR_BADCRC = _target_io.T_PACKET_ERROR_BADCRC

T_PACKET_ERROR_LASTBYTES = _target_io.T_PACKET_ERROR_LASTBYTES

T_PACKET_ERROR_NOWAVEFORMS = _target_io.T_PACKET_ERROR_NOWAVEFORMS

class DataPacket(object):
    r"""Proxy of C++ CTA::TargetDriver::DataPacket class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DataPacket self, uint16_t waveforms_per_packet, uint16_t samples_per_waveform) -> DataPacket
        __init__(DataPacket self, uint16_t packetsize=0) -> DataPacket
        """
        _target_io.DataPacket_swiginit(self, _target_io.new_DataPacket(*args))
    __swig_destroy__ = _target_io.delete_DataPacket

    def IsEmpty(self):
        r"""IsEmpty(DataPacket self) -> bool"""
        return _target_io.DataPacket_IsEmpty(self)

    def IsValid(self):
        r"""IsValid(DataPacket self) -> bool"""
        return _target_io.DataPacket_IsValid(self)

    def GetStatus(self):
        r"""GetStatus(DataPacket self) -> int"""
        return _target_io.DataPacket_GetStatus(self)

    def GetStatusString(self):
        r"""GetStatusString(DataPacket self) -> std::string"""
        return _target_io.DataPacket_GetStatusString(self)

    def GetASICID(self):
        r"""GetASICID(DataPacket self) -> uint8_t"""
        return _target_io.DataPacket_GetASICID(self)

    def GetChannelID(self):
        r"""GetChannelID(DataPacket self) -> uint8_t"""
        return _target_io.DataPacket_GetChannelID(self)

    def GetNumberOfWaveforms(self):
        r"""GetNumberOfWaveforms(DataPacket self) -> uint16_t"""
        return _target_io.DataPacket_GetNumberOfWaveforms(self)

    def GetBuffers(self):
        r"""GetBuffers(DataPacket self) -> uint16_t"""
        return _target_io.DataPacket_GetBuffers(self)

    def GetWaveformLength(self):
        r"""GetWaveformLength(DataPacket self) -> uint16_t"""
        return _target_io.DataPacket_GetWaveformLength(self)

    def GetWaveformSamples(self):
        r"""GetWaveformSamples(DataPacket self) -> uint16_t"""
        return _target_io.DataPacket_GetWaveformSamples(self)

    def GetWaveformBytes(self):
        r"""GetWaveformBytes(DataPacket self) -> uint16_t"""
        return _target_io.DataPacket_GetWaveformBytes(self)

    def IsFirstSubPacket(self):
        r"""IsFirstSubPacket(DataPacket self) -> bool"""
        return _target_io.DataPacket_IsFirstSubPacket(self)

    def IsLastSubPacket(self):
        r"""IsLastSubPacket(DataPacket self) -> bool"""
        return _target_io.DataPacket_IsLastSubPacket(self)

    def GetTotalSizeInBytes(self):
        r"""GetTotalSizeInBytes(DataPacket self) -> uint16_t"""
        return _target_io.DataPacket_GetTotalSizeInBytes(self)

    def GetEventNumber(self):
        r"""GetEventNumber(DataPacket self) -> uint16_t"""
        return _target_io.DataPacket_GetEventNumber(self)

    def GetSlotID(self):
        r"""GetSlotID(DataPacket self) -> uint8_t"""
        return _target_io.DataPacket_GetSlotID(self)

    def GetDetectorID(self):
        r"""GetDetectorID(DataPacket self) -> uint8_t"""
        return _target_io.DataPacket_GetDetectorID(self)

    def GetEventSequenceNumber(self):
        r"""GetEventSequenceNumber(DataPacket self) -> uint8_t"""
        return _target_io.DataPacket_GetEventSequenceNumber(self)

    def GetDetectorUniqueTag(self):
        r"""GetDetectorUniqueTag(DataPacket self) -> uint8_t"""
        return _target_io.DataPacket_GetDetectorUniqueTag(self)

    def GetTACKTime(self):
        r"""GetTACKTime(DataPacket self) -> uint64_t"""
        return _target_io.DataPacket_GetTACKTime(self)

    def GetTACKMode(self):
        r"""GetTACKMode(DataPacket self) -> uint8_t"""
        return _target_io.DataPacket_GetTACKMode(self)

    def IsZeroSupressionEnabled(self):
        r"""IsZeroSupressionEnabled(DataPacket self) -> bool"""
        return _target_io.DataPacket_IsZeroSupressionEnabled(self)

    def GetStaleBit(self):
        r"""GetStaleBit(DataPacket self) -> uint8_t"""
        return _target_io.DataPacket_GetStaleBit(self)

    def GetColumn(self):
        r"""GetColumn(DataPacket self) -> uint8_t"""
        return _target_io.DataPacket_GetColumn(self)

    def GetRow(self):
        r"""GetRow(DataPacket self) -> uint8_t"""
        return _target_io.DataPacket_GetRow(self)

    def GetBlockPhase(self):
        r"""GetBlockPhase(DataPacket self) -> uint8_t"""
        return _target_io.DataPacket_GetBlockPhase(self)

    @staticmethod
    def CalculateFirstCellId(pRow, pColumn, pBlockPhase):
        r"""CalculateFirstCellId(uint16_t pRow, uint16_t pColumn, uint16_t pBlockPhase) -> uint16_t"""
        return _target_io.DataPacket_CalculateFirstCellId(pRow, pColumn, pBlockPhase)

    @staticmethod
    def CalculatePacketSizeInBytes(pWaveformsPerPacket, pSamplesPerWaveform):
        r"""CalculatePacketSizeInBytes(uint16_t pWaveformsPerPacket, uint16_t pSamplesPerWaveform) -> uint16_t"""
        return _target_io.DataPacket_CalculatePacketSizeInBytes(pWaveformsPerPacket, pSamplesPerWaveform)

    @staticmethod
    def CalculateRowColumnBlockPhase(pCellId, pRow, pColumn, pBlockPhase):
        r"""CalculateRowColumnBlockPhase(uint16_t pCellId, uint16_t & pRow, uint16_t & pColumn, uint16_t & pBlockPhase)"""
        return _target_io.DataPacket_CalculateRowColumnBlockPhase(pCellId, pRow, pColumn, pBlockPhase)

    @staticmethod
    def GetNCells():
        r"""GetNCells() -> uint16_t"""
        return _target_io.DataPacket_GetNCells()

    def GetFirstCellId(self):
        r"""GetFirstCellId(DataPacket self) -> uint16_t"""
        return _target_io.DataPacket_GetFirstCellId(self)

    def GetWaveform(self, waveformindex):
        r"""GetWaveform(DataPacket self, uint16_t waveformindex) -> Waveform"""
        return _target_io.DataPacket_GetWaveform(self, waveformindex)

    def GetPacketID(self, packet_id):
        r"""GetPacketID(DataPacket self, uint16_t & packet_id) -> bool"""
        return _target_io.DataPacket_GetPacketID(self, packet_id)

    def AssociateWaveform(self, n, pWaveform):
        r"""AssociateWaveform(DataPacket self, uint16_t n, Waveform pWaveform)"""
        return _target_io.DataPacket_AssociateWaveform(self, n, pWaveform)

    def FillHeader(self, waves_per_packet, waveform_samples, camera_slot_id, module_index, event_sequence_number, tack, quad, row, col):
        r"""FillHeader(DataPacket self, uint16_t waves_per_packet, uint16_t waveform_samples, uint8_t camera_slot_id, uint8_t module_index, uint8_t event_sequence_number, uint64_t tack, uint8_t quad, uint8_t row, uint8_t col)"""
        return _target_io.DataPacket_FillHeader(self, waves_per_packet, waveform_samples, camera_slot_id, module_index, event_sequence_number, tack, quad, row, col)

    def FillFooter(self):
        r"""FillFooter(DataPacket self)"""
        return _target_io.DataPacket_FillFooter(self)

    def SummarisePacket(self, *args):
        r"""SummarisePacket(DataPacket self, std::ostream & os=std::cout)"""
        return _target_io.DataPacket_SummarisePacket(self, *args)

    def Allocate(self, packetsize):
        r"""Allocate(DataPacket self, uint16_t packetsize)"""
        return _target_io.DataPacket_Allocate(self, packetsize)

    def Assign(self, data, packetsize):
        r"""Assign(DataPacket self, uint8_t * data, uint16_t packetsize)"""
        return _target_io.DataPacket_Assign(self, data, packetsize)

    def Fill(self, data, packetsize):
        r"""Fill(DataPacket self, uint8_t const * data, uint16_t packetsize) -> bool"""
        return _target_io.DataPacket_Fill(self, data, packetsize)

    def ClearFilledFlag(self):
        r"""ClearFilledFlag(DataPacket self)"""
        return _target_io.DataPacket_ClearFilledFlag(self)

    def Deallocate(self):
        r"""Deallocate(DataPacket self)"""
        return _target_io.DataPacket_Deallocate(self)

    def IsFilled(self):
        r"""IsFilled(DataPacket self) -> bool"""
        return _target_io.DataPacket_IsFilled(self)

    def GetPacketSize(self):
        r"""GetPacketSize(DataPacket self) -> uint16_t"""
        return _target_io.DataPacket_GetPacketSize(self)

    def GetData(self):
        r"""GetData(DataPacket self) -> uint8_t *"""
        return _target_io.DataPacket_GetData(self)

    def Print(self):
        r"""Print(DataPacket self)"""
        return _target_io.DataPacket_Print(self)

    def FillZero(self):
        r"""FillZero(DataPacket self)"""
        return _target_io.DataPacket_FillZero(self)

# Register DataPacket in _target_io:
_target_io.DataPacket_swigregister(DataPacket)

def DataPacket_CalculateFirstCellId(pRow, pColumn, pBlockPhase):
    r"""DataPacket_CalculateFirstCellId(uint16_t pRow, uint16_t pColumn, uint16_t pBlockPhase) -> uint16_t"""
    return _target_io.DataPacket_CalculateFirstCellId(pRow, pColumn, pBlockPhase)

def DataPacket_CalculatePacketSizeInBytes(pWaveformsPerPacket, pSamplesPerWaveform):
    r"""DataPacket_CalculatePacketSizeInBytes(uint16_t pWaveformsPerPacket, uint16_t pSamplesPerWaveform) -> uint16_t"""
    return _target_io.DataPacket_CalculatePacketSizeInBytes(pWaveformsPerPacket, pSamplesPerWaveform)

def DataPacket_CalculateRowColumnBlockPhase(pCellId, pRow, pColumn, pBlockPhase):
    r"""DataPacket_CalculateRowColumnBlockPhase(uint16_t pCellId, uint16_t & pRow, uint16_t & pColumn, uint16_t & pBlockPhase)"""
    return _target_io.DataPacket_CalculateRowColumnBlockPhase(pCellId, pRow, pColumn, pBlockPhase)

def DataPacket_GetNCells():
    r"""DataPacket_GetNCells() -> uint16_t"""
    return _target_io.DataPacket_GetNCells()

class EventHeader(object):
    r"""Proxy of C++ CTA::TargetDriver::EventHeader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(EventHeader self) -> EventHeader"""
        _target_io.EventHeader_swiginit(self, _target_io.new_EventHeader())
    __swig_destroy__ = _target_io.delete_EventHeader

    def Init(self):
        r"""Init(EventHeader self)"""
        return _target_io.EventHeader_Init(self)

    def SetEventID(self, pEventID):
        r"""SetEventID(EventHeader self, uint32_t pEventID)"""
        return _target_io.EventHeader_SetEventID(self, pEventID)

    def GetEventID(self):
        r"""GetEventID(EventHeader self) -> uint32_t"""
        return _target_io.EventHeader_GetEventID(self)

    def SetTACK(self, pTACK):
        r"""SetTACK(EventHeader self, uint64_t pTACK)"""
        return _target_io.EventHeader_SetTACK(self, pTACK)

    def GetTACK(self):
        r"""GetTACK(EventHeader self) -> uint64_t"""
        return _target_io.EventHeader_GetTACK(self)

    def SetNPacketsFilled(self, pNPacketsFilled):
        r"""SetNPacketsFilled(EventHeader self, uint16_t pNPacketsFilled)"""
        return _target_io.EventHeader_SetNPacketsFilled(self, pNPacketsFilled)

    def GetNPacketsFilled(self):
        r"""GetNPacketsFilled(EventHeader self) -> uint16_t"""
        return _target_io.EventHeader_GetNPacketsFilled(self)

    def IncrementNPacketsFilled(self):
        r"""IncrementNPacketsFilled(EventHeader self)"""
        return _target_io.EventHeader_IncrementNPacketsFilled(self)

    def SetTimeStamp(self, pSec, pNanosec):
        r"""SetTimeStamp(EventHeader self, int64_t pSec, int64_t pNanosec)"""
        return _target_io.EventHeader_SetTimeStamp(self, pSec, pNanosec)

    def GetTimeStamp(self, pSec, pNanosec):
        r"""GetTimeStamp(EventHeader self, int64_t & pSec, int64_t & pNanosec)"""
        return _target_io.EventHeader_GetTimeStamp(self, pSec, pNanosec)

    def SetTimeStampNow(self):
        r"""SetTimeStampNow(EventHeader self)"""
        return _target_io.EventHeader_SetTimeStampNow(self)

    def CalcDeltaTSinceTimeStamp(self):
        r"""CalcDeltaTSinceTimeStamp(EventHeader self) -> double"""
        return _target_io.EventHeader_CalcDeltaTSinceTimeStamp(self)

    def IfTimeStampIsZero(self):
        r"""IfTimeStampIsZero(EventHeader self) -> bool"""
        return _target_io.EventHeader_IfTimeStampIsZero(self)

# Register EventHeader in _target_io:
_target_io.EventHeader_swigregister(EventHeader)
cvar = _target_io.cvar
EventHeader.kColumnType = _target_io.cvar.EventHeader_kColumnType
EventHeader.kColumnForm = _target_io.cvar.EventHeader_kColumnForm
EventHeader.kColumnUnit = _target_io.cvar.EventHeader_kColumnUnit

class RawEvent(object):
    r"""Proxy of C++ CTA::TargetDriver::RawEvent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pNPacketsPerEvent, pPacketSize):
        r"""__init__(RawEvent self, uint16_t pNPacketsPerEvent, uint16_t pPacketSize) -> RawEvent"""
        _target_io.RawEvent_swiginit(self, _target_io.new_RawEvent(pNPacketsPerEvent, pPacketSize))
    __swig_destroy__ = _target_io.delete_RawEvent

    def Clear(self):
        r"""Clear(RawEvent self)"""
        return _target_io.RawEvent_Clear(self)

    def GetDataPackets(self):
        r"""GetDataPackets(RawEvent self) -> std::vector< CTA::TargetDriver::DataPacket *,std::allocator< CTA::TargetDriver::DataPacket * > > const &"""
        return _target_io.RawEvent_GetDataPackets(self)

    def GetPacketSize(self):
        r"""GetPacketSize(RawEvent self) -> uint16_t"""
        return _target_io.RawEvent_GetPacketSize(self)

    def GetEventHeader(self):
        r"""GetEventHeader(RawEvent self) -> EventHeader"""
        return _target_io.RawEvent_GetEventHeader(self)

    def GetNPacketsPerEvent(self):
        r"""GetNPacketsPerEvent(RawEvent self) -> std::size_t"""
        return _target_io.RawEvent_GetNPacketsPerEvent(self)

    def GetTimeoutSec(self):
        r"""GetTimeoutSec(RawEvent self) -> double"""
        return _target_io.RawEvent_GetTimeoutSec(self)

    @staticmethod
    def SetTimeoutSec(pTimeoutSec):
        r"""SetTimeoutSec(double pTimeoutSec)"""
        return _target_io.RawEvent_SetTimeoutSec(pTimeoutSec)

    def IsEmpty(self):
        r"""IsEmpty(RawEvent self) -> bool"""
        return _target_io.RawEvent_IsEmpty(self)

    def IsTimedOut(self):
        r"""IsTimedOut(RawEvent self) -> bool"""
        return _target_io.RawEvent_IsTimedOut(self)

    def WasFlushed(self):
        r"""WasFlushed(RawEvent self) -> bool"""
        return _target_io.RawEvent_WasFlushed(self)

    def WasRead(self):
        r"""WasRead(RawEvent self) -> bool"""
        return _target_io.RawEvent_WasRead(self)

    def SetToRead(self):
        r"""SetToRead(RawEvent self)"""
        return _target_io.RawEvent_SetToRead(self)

    def SetToFlushed(self):
        r"""SetToFlushed(RawEvent self)"""
        return _target_io.RawEvent_SetToFlushed(self)

    def IsBeingBuilt(self):
        r"""IsBeingBuilt(RawEvent self) -> bool"""
        return _target_io.RawEvent_IsBeingBuilt(self)

    def IsComplete(self):
        r"""IsComplete(RawEvent self) -> bool"""
        return _target_io.RawEvent_IsComplete(self)

    def AddNewPacket(self, pData, pPacketID, pPacketSize, checkflag=False):
        r"""AddNewPacket(RawEvent self, uint8_t const * pData, uint16_t pPacketID, uint16_t pPacketSize, bool checkflag=False) -> bool"""
        return _target_io.RawEvent_AddNewPacket(self, pData, pPacketID, pPacketSize, checkflag)

    def WaveformCheckStatus(self):
        r"""WaveformCheckStatus(RawEvent self) -> bool"""
        return _target_io.RawEvent_WaveformCheckStatus(self)

# Register RawEvent in _target_io:
_target_io.RawEvent_swigregister(RawEvent)

def RawEvent_SetTimeoutSec(pTimeoutSec):
    r"""RawEvent_SetTimeoutSec(double pTimeoutSec)"""
    return _target_io.RawEvent_SetTimeoutSec(pTimeoutSec)

class EventBuffer(object):
    r"""Proxy of C++ CTA::TargetDriver::EventBuffer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pBufferDepth, pNPacketsPerEvent, pPacketSize, pBuildTimeout=0.2, pCheckFreq=0):
        r"""__init__(EventBuffer self, uint32_t pBufferDepth, uint16_t pNPacketsPerEvent, uint16_t pPacketSize, float pBuildTimeout=0.2, uint32_t pCheckFreq=0) -> EventBuffer"""
        _target_io.EventBuffer_swiginit(self, _target_io.new_EventBuffer(pBufferDepth, pNPacketsPerEvent, pPacketSize, pBuildTimeout, pCheckFreq))
    __swig_destroy__ = _target_io.delete_EventBuffer

    def AddNewPacket(self, pData, pEventID, pPacketID, pPacketSize):
        r"""AddNewPacket(EventBuffer self, uint8_t const * pData, uint32_t pEventID, uint16_t pPacketID, uint16_t pPacketSize) -> bool"""
        return _target_io.EventBuffer_AddNewPacket(self, pData, pEventID, pPacketID, pPacketSize)

    def ReadEvent(self):
        r"""ReadEvent(EventBuffer self) -> RawEvent"""
        return _target_io.EventBuffer_ReadEvent(self)

    def Clear(self):
        r"""Clear(EventBuffer self)"""
        return _target_io.EventBuffer_Clear(self)

    def ClearEvents(self):
        r"""ClearEvents(EventBuffer self)"""
        return _target_io.EventBuffer_ClearEvents(self)

    def Flush(self):
        r"""Flush(EventBuffer self)"""
        return _target_io.EventBuffer_Flush(self)

    def Report(self, stream):
        r"""Report(EventBuffer self, std::ostream & stream)"""
        return _target_io.EventBuffer_Report(self, stream)

    def StatusOK(self):
        r"""StatusOK(EventBuffer self) -> bool"""
        return _target_io.EventBuffer_StatusOK(self)

    def GetEventRate(self):
        r"""GetEventRate(EventBuffer self) -> float"""
        return _target_io.EventBuffer_GetEventRate(self)

    def GetPacketSize(self):
        r"""GetPacketSize(EventBuffer self) -> uint16_t"""
        return _target_io.EventBuffer_GetPacketSize(self)

    def GetNPacketsPerEvent(self):
        r"""GetNPacketsPerEvent(EventBuffer self) -> uint16_t"""
        return _target_io.EventBuffer_GetNPacketsPerEvent(self)

    def GetReadIndex(self):
        r"""GetReadIndex(EventBuffer self) -> int64_t"""
        return _target_io.EventBuffer_GetReadIndex(self)

    def GetWriteIndex(self):
        r"""GetWriteIndex(EventBuffer self) -> int64_t"""
        return _target_io.EventBuffer_GetWriteIndex(self)

    def GetFinishedIndex(self):
        r"""GetFinishedIndex(EventBuffer self) -> int64_t"""
        return _target_io.EventBuffer_GetFinishedIndex(self)

    def GetNumberIncomplete(self):
        r"""GetNumberIncomplete(EventBuffer self) -> int64_t"""
        return _target_io.EventBuffer_GetNumberIncomplete(self)

    def GetNumberToBeRead(self):
        r"""GetNumberToBeRead(EventBuffer self) -> int64_t"""
        return _target_io.EventBuffer_GetNumberToBeRead(self)

    def DiagnosticReport(self, stream):
        r"""DiagnosticReport(EventBuffer self, std::ostream & stream)"""
        return _target_io.EventBuffer_DiagnosticReport(self, stream)

# Register EventBuffer in _target_io:
_target_io.EventBuffer_swigregister(EventBuffer)

class DataListener(object):
    r"""Proxy of C++ CTA::TargetDriver::DataListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pBufferDepth, pNPacketsPerEvent, pPacketSize, pBuildTimeout=0.2, pCheckFreq=0):
        r"""__init__(DataListener self, uint32_t pBufferDepth, uint16_t pNPacketsPerEvent, uint16_t pPacketSize, float pBuildTimeout=0.2, uint32_t pCheckFreq=0) -> DataListener"""
        _target_io.DataListener_swiginit(self, _target_io.new_DataListener(pBufferDepth, pNPacketsPerEvent, pPacketSize, pBuildTimeout, pCheckFreq))
    __swig_destroy__ = _target_io.delete_DataListener

    def AddDAQListener(self, pMyIP):
        r"""AddDAQListener(DataListener self, std::string const & pMyIP) -> int"""
        return _target_io.DataListener_AddDAQListener(self, pMyIP)

    def StopListening(self):
        r"""StopListening(DataListener self)"""
        return _target_io.DataListener_StopListening(self)

    def StartListening(self):
        r"""StartListening(DataListener self)"""
        return _target_io.DataListener_StartListening(self)

    def IsRunning(self):
        r"""IsRunning(DataListener self) -> bool"""
        return _target_io.DataListener_IsRunning(self)

    def DropPackets(self, drop=True):
        r"""DropPackets(DataListener self, bool drop=True)"""
        return _target_io.DataListener_DropPackets(self, drop)

    def GetNPacketsReceived(self):
        r"""GetNPacketsReceived(DataListener self) -> uint64_t"""
        return _target_io.DataListener_GetNPacketsReceived(self)

    def GetNPacketProblems(self):
        r"""GetNPacketProblems(DataListener self) -> uint64_t"""
        return _target_io.DataListener_GetNPacketProblems(self)

    def GetEventBuffer(self):
        r"""GetEventBuffer(DataListener self) -> std::shared_ptr< CTA::TargetDriver::EventBuffer >"""
        return _target_io.DataListener_GetEventBuffer(self)

# Register DataListener in _target_io:
_target_io.DataListener_swigregister(DataListener)

class EventFileWriter(object):
    r"""Proxy of C++ CTA::TargetIO::EventFileWriter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EventFileWriter self, std::string const & pFileName, uint16_t pNPacketsPerEvent, uint16_t pPacketSizeInByte) -> EventFileWriter
        __init__(EventFileWriter self, std::string const & pR1FileName, EventFileReader pR0Reader) -> EventFileWriter
        """
        _target_io.EventFileWriter_swiginit(self, _target_io.new_EventFileWriter(*args))
    __swig_destroy__ = _target_io.delete_EventFileWriter

    def AddComment(self, pComment):
        r"""AddComment(EventFileWriter self, std::string const & pComment)"""
        return _target_io.EventFileWriter_AddComment(self, pComment)

    def AddHistory(self, pHistory):
        r"""AddHistory(EventFileWriter self, std::string const & pHistory)"""
        return _target_io.EventFileWriter_AddHistory(self, pHistory)

    def AddCardImage(self, *args):
        r"""
        AddCardImage(EventFileWriter self, std::string const & pKeyword, bool pValue, std::string const & pComment, bool pUpdate=False)
        AddCardImage(EventFileWriter self, std::string const & pKeyword, double pValue, std::string const & pComment, bool pUpdate=False)
        AddCardImage(EventFileWriter self, std::string const & pKeyword, float pValue, std::string const & pComment, bool pUpdate=False)
        AddCardImage(EventFileWriter self, std::string const & pKeyword, uint8_t pValue, std::string const & pComment, bool pUpdate=False)
        AddCardImage(EventFileWriter self, std::string const & pKeyword, uint16_t pValue, std::string const & pComment, bool pUpdate=False)
        AddCardImage(EventFileWriter self, std::string const & pKeyword, uint32_t pValue, std::string const & pComment, bool pUpdate=False)
        AddCardImage(EventFileWriter self, std::string const & pKeyword, int32_t pValue, std::string const & pComment, bool pUpdate=False)
        AddCardImage(EventFileWriter self, std::string const & pKeyword, int64_t pValue, std::string const & pComment, bool pUpdate=False)
        AddCardImage(EventFileWriter self, std::string const & pKeyword, std::string const & pValue, std::string const & pComment, bool pUpdate=False)
        AddCardImage(EventFileWriter self, std::string const & pKeyword, char const * pValue, std::string const & pComment, bool pUpdate=False)
        """
        return _target_io.EventFileWriter_AddCardImage(self, *args)

    def AddEvent(self, pRawEvent):
        r"""AddEvent(EventFileWriter self, RawEvent pRawEvent)"""
        return _target_io.EventFileWriter_AddEvent(self, pRawEvent)

    def Close(self, pWriteDateEnd=True):
        r"""Close(EventFileWriter self, bool pWriteDateEnd=True)"""
        return _target_io.EventFileWriter_Close(self, pWriteDateEnd)

    def Flush(self):
        r"""Flush(EventFileWriter self)"""
        return _target_io.EventFileWriter_Flush(self)

    def StartWatchingBuffer(self, pEventBuffer):
        r"""StartWatchingBuffer(EventFileWriter self, std::shared_ptr< CTA::TargetDriver::EventBuffer > pEventBuffer)"""
        return _target_io.EventFileWriter_StartWatchingBuffer(self, pEventBuffer)

    def StopWatchingBuffer(self):
        r"""StopWatchingBuffer(EventFileWriter self)"""
        return _target_io.EventFileWriter_StopWatchingBuffer(self)

    def SetWatcherSleep(self, pSleepUs):
        r"""SetWatcherSleep(EventFileWriter self, useconds_t pSleepUs)"""
        return _target_io.EventFileWriter_SetWatcherSleep(self, pSleepUs)

    def WriteConfig(self, pConfig):
        r"""WriteConfig(EventFileWriter self, std::string const & pConfig)"""
        return _target_io.EventFileWriter_WriteConfig(self, pConfig)

    @staticmethod
    def MakeEventFileWriter(listener, fname):
        r"""MakeEventFileWriter(DataListener listener, std::string const & fname) -> std::shared_ptr< CTA::TargetIO::EventFileWriter >"""
        return _target_io.EventFileWriter_MakeEventFileWriter(listener, fname)

    def DoNotWrite(self):
        r"""DoNotWrite(EventFileWriter self)"""
        return _target_io.EventFileWriter_DoNotWrite(self)

    def GetPacketsWritten(self):
        r"""GetPacketsWritten(EventFileWriter self) -> int"""
        return _target_io.EventFileWriter_GetPacketsWritten(self)

# Register EventFileWriter in _target_io:
_target_io.EventFileWriter_swigregister(EventFileWriter)

def EventFileWriter_MakeEventFileWriter(listener, fname):
    r"""EventFileWriter_MakeEventFileWriter(DataListener listener, std::string const & fname) -> std::shared_ptr< CTA::TargetIO::EventFileWriter >"""
    return _target_io.EventFileWriter_MakeEventFileWriter(listener, fname)

class FitsPlaceHolder(object):
    r"""Proxy of C++ CTA::TargetIO::FitsPlaceHolder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _target_io.delete_FitsPlaceHolder

    def AsBool(self):
        r"""AsBool(FitsPlaceHolder self) -> bool"""
        return _target_io.FitsPlaceHolder_AsBool(self)

    def AsComplexDouble(self):
        r"""AsComplexDouble(FitsPlaceHolder self) -> std::complex< double >"""
        return _target_io.FitsPlaceHolder_AsComplexDouble(self)

    def AsDouble(self):
        r"""AsDouble(FitsPlaceHolder self) -> double"""
        return _target_io.FitsPlaceHolder_AsDouble(self)

    def AsFitsString(self):
        r"""AsFitsString(FitsPlaceHolder self) -> std::string"""
        return _target_io.FitsPlaceHolder_AsFitsString(self)

    def AsInt(self):
        r"""AsInt(FitsPlaceHolder self) -> int32_t"""
        return _target_io.FitsPlaceHolder_AsInt(self)

    def AsInt64(self):
        r"""AsInt64(FitsPlaceHolder self) -> int64_t"""
        return _target_io.FitsPlaceHolder_AsInt64(self)

    def AsString(self):
        r"""AsString(FitsPlaceHolder self) -> std::string"""
        return _target_io.FitsPlaceHolder_AsString(self)

    def IsBool(self):
        r"""IsBool(FitsPlaceHolder self) -> bool"""
        return _target_io.FitsPlaceHolder_IsBool(self)

    def IsComplexDouble(self):
        r"""IsComplexDouble(FitsPlaceHolder self) -> bool"""
        return _target_io.FitsPlaceHolder_IsComplexDouble(self)

    def IsDouble(self):
        r"""IsDouble(FitsPlaceHolder self) -> bool"""
        return _target_io.FitsPlaceHolder_IsDouble(self)

    def IsInt(self):
        r"""IsInt(FitsPlaceHolder self) -> bool"""
        return _target_io.FitsPlaceHolder_IsInt(self)

    def IsInt64(self):
        r"""IsInt64(FitsPlaceHolder self) -> bool"""
        return _target_io.FitsPlaceHolder_IsInt64(self)

    def IsString(self):
        r"""IsString(FitsPlaceHolder self) -> bool"""
        return _target_io.FitsPlaceHolder_IsString(self)

# Register FitsPlaceHolder in _target_io:
_target_io.FitsPlaceHolder_swigregister(FitsPlaceHolder)

class FitsKeyValue(object):
    r"""Proxy of C++ CTA::TargetIO::FitsKeyValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FitsKeyValue self) -> FitsKeyValue
        __init__(FitsKeyValue self, FitsKeyValue pValue) -> FitsKeyValue
        """
        _target_io.FitsKeyValue_swiginit(self, _target_io.new_FitsKeyValue(*args))
    __swig_destroy__ = _target_io.delete_FitsKeyValue

    def AsBool(self):
        r"""AsBool(FitsKeyValue self) -> bool"""
        return _target_io.FitsKeyValue_AsBool(self)

    def AsComplexDouble(self):
        r"""AsComplexDouble(FitsKeyValue self) -> std::complex< double >"""
        return _target_io.FitsKeyValue_AsComplexDouble(self)

    def AsDouble(self):
        r"""AsDouble(FitsKeyValue self) -> double"""
        return _target_io.FitsKeyValue_AsDouble(self)

    def AsFitsString(self):
        r"""AsFitsString(FitsKeyValue self) -> std::string"""
        return _target_io.FitsKeyValue_AsFitsString(self)

    def AsInt(self):
        r"""AsInt(FitsKeyValue self) -> int32_t"""
        return _target_io.FitsKeyValue_AsInt(self)

    def AsInt64(self):
        r"""AsInt64(FitsKeyValue self) -> int64_t"""
        return _target_io.FitsKeyValue_AsInt64(self)

    def AsString(self):
        r"""AsString(FitsKeyValue self) -> std::string"""
        return _target_io.FitsKeyValue_AsString(self)

    def IsBool(self):
        r"""IsBool(FitsKeyValue self) -> bool"""
        return _target_io.FitsKeyValue_IsBool(self)

    def IsComplexDouble(self):
        r"""IsComplexDouble(FitsKeyValue self) -> bool"""
        return _target_io.FitsKeyValue_IsComplexDouble(self)

    def IsDouble(self):
        r"""IsDouble(FitsKeyValue self) -> bool"""
        return _target_io.FitsKeyValue_IsDouble(self)

    def IsInt(self):
        r"""IsInt(FitsKeyValue self) -> bool"""
        return _target_io.FitsKeyValue_IsInt(self)

    def IsInt64(self):
        r"""IsInt64(FitsKeyValue self) -> bool"""
        return _target_io.FitsKeyValue_IsInt64(self)

    def IsString(self):
        r"""IsString(FitsKeyValue self) -> bool"""
        return _target_io.FitsKeyValue_IsString(self)

    def __nonzero__(self):
        return _target_io.FitsKeyValue___nonzero__(self)
    __bool__ = __nonzero__



# Register FitsKeyValue in _target_io:
_target_io.FitsKeyValue_swigregister(FitsKeyValue)

class FitsCardImage(object):
    r"""Proxy of C++ CTA::TargetIO::FitsCardImage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FitsCardImage self, std::string const & pKeyword, std::string const & pComment) -> FitsCardImage
        __init__(FitsCardImage self, std::string const & pKeyword, FitsKeyValue pValue, std::string const & pComment) -> FitsCardImage
        __init__(FitsCardImage self, std::string const & pKeyword, bool pValue, std::string const & pComment) -> FitsCardImage
        __init__(FitsCardImage self, std::string const & pKeyword, double pValue, std::string const & pComment) -> FitsCardImage
        __init__(FitsCardImage self, std::string const & pKeyword, float pValue, std::string const & pComment) -> FitsCardImage
        __init__(FitsCardImage self, std::string const & pKeyword, int32_t pValue, std::string const & pComment) -> FitsCardImage
        __init__(FitsCardImage self, std::string const & pKeyword, int64_t pValue, std::string const & pComment) -> FitsCardImage
        __init__(FitsCardImage self, std::string const & pKeyword, std::complex< double > const & pValue, std::string const & pComment) -> FitsCardImage
        __init__(FitsCardImage self, std::string const & pKeyword, std::complex< float > const & pValue, std::string const & pComment) -> FitsCardImage
        __init__(FitsCardImage self, std::string const & pKeyword, std::string const & pValue, std::string const & pComment) -> FitsCardImage
        """
        _target_io.FitsCardImage_swiginit(self, _target_io.new_FitsCardImage(*args))
    __swig_destroy__ = _target_io.delete_FitsCardImage

    def GetComment(self):
        r"""GetComment(FitsCardImage self) -> std::string"""
        return _target_io.FitsCardImage_GetComment(self)

    def GetKeyword(self):
        r"""GetKeyword(FitsCardImage self) -> std::string"""
        return _target_io.FitsCardImage_GetKeyword(self)

    def GetValue(self):
        r"""GetValue(FitsCardImage self) -> std::shared_ptr< CTA::TargetIO::FitsKeyValue >"""
        return _target_io.FitsCardImage_GetValue(self)

    def IsComment(self):
        r"""IsComment(FitsCardImage self) -> bool"""
        return _target_io.FitsCardImage_IsComment(self)

    def IsCommentary(self):
        r"""IsCommentary(FitsCardImage self) -> bool"""
        return _target_io.FitsCardImage_IsCommentary(self)

    def IsHistory(self):
        r"""IsHistory(FitsCardImage self) -> bool"""
        return _target_io.FitsCardImage_IsHistory(self)

    def Print(self):
        r"""Print(FitsCardImage self)"""
        return _target_io.FitsCardImage_Print(self)

    def SetComment(self, pComment):
        r"""SetComment(FitsCardImage self, std::string const & pComment)"""
        return _target_io.FitsCardImage_SetComment(self, pComment)

    def SetKeyword(self, pKeyword):
        r"""SetKeyword(FitsCardImage self, std::string const & pKeyword)"""
        return _target_io.FitsCardImage_SetKeyword(self, pKeyword)

    def SetEmptyValue(self):
        r"""SetEmptyValue(FitsCardImage self)"""
        return _target_io.FitsCardImage_SetEmptyValue(self)

    def SetValue(self, *args):
        r"""
        SetValue(FitsCardImage self, FitsKeyValue pValue)
        SetValue(FitsCardImage self, bool pValue)
        SetValue(FitsCardImage self, double pValue)
        SetValue(FitsCardImage self, float pValue)
        SetValue(FitsCardImage self, int32_t pValue)
        SetValue(FitsCardImage self, int64_t pValue)
        SetValue(FitsCardImage self, std::complex< double > const & pValue)
        SetValue(FitsCardImage self, std::complex< float > const & pValue)
        SetValue(FitsCardImage self, std::string const & pValue)
        SetValue(FitsCardImage self, char const * pValue)
        """
        return _target_io.FitsCardImage_SetValue(self, *args)

    def ToString(self):
        r"""ToString(FitsCardImage self) -> std::string"""
        return _target_io.FitsCardImage_ToString(self)

# Register FitsCardImage in _target_io:
_target_io.FitsCardImage_swigregister(FitsCardImage)

class EventFile(object):
    r"""Proxy of C++ CTA::TargetIO::EventFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(EventFile self) -> EventFile"""
        _target_io.EventFile_swiginit(self, _target_io.new_EventFile())
    __swig_destroy__ = _target_io.delete_EventFile

    def Close(self):
        r"""Close(EventFile self)"""
        return _target_io.EventFile_Close(self)

    def IsOpen(self):
        r"""IsOpen(EventFile self) -> bool"""
        return _target_io.EventFile_IsOpen(self)

    def GetCardImage(self, pKeyword):
        r"""GetCardImage(EventFile self, std::string const & pKeyword) -> std::shared_ptr< CTA::TargetIO::FitsCardImage >"""
        return _target_io.EventFile_GetCardImage(self, pKeyword)

    def GetNrows(self):
        r"""GetNrows(EventFile self) -> long"""
        return _target_io.EventFile_GetNrows(self)

    def GetFileName(self):
        r"""GetFileName(EventFile self) -> std::string"""
        return _target_io.EventFile_GetFileName(self)

    def PrintHeader(self):
        r"""PrintHeader(EventFile self)"""
        return _target_io.EventFile_PrintHeader(self)

    def CopyHeaderIntoNewFile(self, pNewFileFitsPointer):
        r"""CopyHeaderIntoNewFile(EventFile self, fitsfile * pNewFileFitsPointer) -> int"""
        return _target_io.EventFile_CopyHeaderIntoNewFile(self, pNewFileFitsPointer)

    def HasCardImage(self, pKeyword):
        r"""HasCardImage(EventFile self, std::string const & pKeyword) -> bool"""
        return _target_io.EventFile_HasCardImage(self, pKeyword)

# Register EventFile in _target_io:
_target_io.EventFile_swigregister(EventFile)

class EventFileReader(EventFile):
    r"""Proxy of C++ CTA::TargetIO::EventFileReader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pFileName):
        r"""__init__(EventFileReader self, std::string const & pFileName) -> EventFileReader"""
        _target_io.EventFileReader_swiginit(self, _target_io.new_EventFileReader(pFileName))
    __swig_destroy__ = _target_io.delete_EventFileReader

    def Close(self):
        r"""Close(EventFileReader self)"""
        return _target_io.EventFileReader_Close(self)

    def GetEventHeader(self, pEventIndex, pHeader):
        r"""GetEventHeader(EventFileReader self, uint32_t pEventIndex, EventHeader pHeader) -> bool"""
        return _target_io.EventFileReader_GetEventHeader(self, pEventIndex, pHeader)

    def GetEventPacket(self, pEventIndex, pPacketID):
        r"""GetEventPacket(EventFileReader self, uint32_t pEventIndex, uint16_t pPacketID) -> uint8_t *"""
        return _target_io.EventFileReader_GetEventPacket(self, pEventIndex, pPacketID)

    def GetPacketSize(self):
        r"""GetPacketSize(EventFileReader self) -> uint16_t"""
        return _target_io.EventFileReader_GetPacketSize(self)

    def GetNEvents(self):
        r"""GetNEvents(EventFileReader self) -> uint32_t"""
        return _target_io.EventFileReader_GetNEvents(self)

    def GetNPacketsPerEvent(self):
        r"""GetNPacketsPerEvent(EventFileReader self) -> uint32_t"""
        return _target_io.EventFileReader_GetNPacketsPerEvent(self)

    def ReadConfig(self, pConfig):
        r"""ReadConfig(EventFileReader self, std::string & pConfig)"""
        return _target_io.EventFileReader_ReadConfig(self, pConfig)

    def GetSN(self, slot):
        r"""GetSN(EventFileReader self, uint16_t slot) -> int16_t"""
        return _target_io.EventFileReader_GetSN(self, slot)

    def GetSiPMTemp(self, slot):
        r"""GetSiPMTemp(EventFileReader self, uint16_t slot) -> float"""
        return _target_io.EventFileReader_GetSiPMTemp(self, slot)

    def GetPrimaryTemp(self, slot):
        r"""GetPrimaryTemp(EventFileReader self, uint16_t slot) -> float"""
        return _target_io.EventFileReader_GetPrimaryTemp(self, slot)

    def GetSPDAC(self, slot, sp):
        r"""GetSPDAC(EventFileReader self, uint16_t slot, uint16_t sp) -> int16_t"""
        return _target_io.EventFileReader_GetSPDAC(self, slot, sp)

    def GetSPHVON(self, slot, sp):
        r"""GetSPHVON(EventFileReader self, uint16_t slot, uint16_t sp) -> int16_t"""
        return _target_io.EventFileReader_GetSPHVON(self, slot, sp)

    def GetCameraVersion(self):
        r"""GetCameraVersion(EventFileReader self) -> std::string"""
        return _target_io.EventFileReader_GetCameraVersion(self)

# Register EventFileReader in _target_io:
_target_io.EventFileReader_swigregister(EventFileReader)

class WaveformArrayReader(object):
    r"""Proxy of C++ CTA::TargetIO::WaveformArrayReader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fNEvents = property(_target_io.WaveformArrayReader_fNEvents_get, _target_io.WaveformArrayReader_fNEvents_set, doc=r"""fNEvents : size_t""")
    fFirstEventID = property(_target_io.WaveformArrayReader_fFirstEventID_get, _target_io.WaveformArrayReader_fFirstEventID_set, doc=r"""fFirstEventID : size_t""")
    fLastEventID = property(_target_io.WaveformArrayReader_fLastEventID_get, _target_io.WaveformArrayReader_fLastEventID_set, doc=r"""fLastEventID : size_t""")
    fNPixels = property(_target_io.WaveformArrayReader_fNPixels_get, _target_io.WaveformArrayReader_fNPixels_set, doc=r"""fNPixels : size_t""")
    fNSuperpixelsPerModule = property(_target_io.WaveformArrayReader_fNSuperpixelsPerModule_get, _target_io.WaveformArrayReader_fNSuperpixelsPerModule_set, doc=r"""fNSuperpixelsPerModule : size_t""")
    fNModules = property(_target_io.WaveformArrayReader_fNModules_get, _target_io.WaveformArrayReader_fNModules_set, doc=r"""fNModules : size_t""")
    fNSamples = property(_target_io.WaveformArrayReader_fNSamples_get, _target_io.WaveformArrayReader_fNSamples_set, doc=r"""fNSamples : size_t""")
    fRunID = property(_target_io.WaveformArrayReader_fRunID_get, _target_io.WaveformArrayReader_fRunID_set, doc=r"""fRunID : uint32_t""")
    fCameraVersion = property(_target_io.WaveformArrayReader_fCameraVersion_get, _target_io.WaveformArrayReader_fCameraVersion_set, doc=r"""fCameraVersion : std::string""")
    fR1 = property(_target_io.WaveformArrayReader_fR1_get, _target_io.WaveformArrayReader_fR1_set, doc=r"""fR1 : bool""")
    fOffset = property(_target_io.WaveformArrayReader_fOffset_get, _target_io.WaveformArrayReader_fOffset_set, doc=r"""fOffset : float""")
    fScale = property(_target_io.WaveformArrayReader_fScale_get, _target_io.WaveformArrayReader_fScale_set, doc=r"""fScale : float""")

    def __init__(self, filepath, skip_events=0, skip_end_events=0, silent=False):
        r"""__init__(WaveformArrayReader self, std::string const & filepath, uint16_t skip_events=0, uint16_t skip_end_events=0, bool silent=False) -> WaveformArrayReader"""
        _target_io.WaveformArrayReader_swiginit(self, _target_io.new_WaveformArrayReader(filepath, skip_events, skip_end_events, silent))
    __swig_destroy__ = _target_io.delete_WaveformArrayReader

    def GetEventID(self, event_index):
        r"""GetEventID(WaveformArrayReader self, uint32_t event_index) -> uint32_t"""
        return _target_io.WaveformArrayReader_GetEventID(self, event_index)

    def GetEventIndex(self, event_id):
        r"""GetEventIndex(WaveformArrayReader self, uint32_t event_id) -> uint32_t"""
        return _target_io.WaveformArrayReader_GetEventIndex(self, event_id)

    def GetSN(self, tm):
        r"""GetSN(WaveformArrayReader self, uint16_t tm) -> int16_t"""
        return _target_io.WaveformArrayReader_GetSN(self, tm)

    def GetSiPMTemp(self, tm):
        r"""GetSiPMTemp(WaveformArrayReader self, uint16_t tm) -> float"""
        return _target_io.WaveformArrayReader_GetSiPMTemp(self, tm)

    def GetPrimaryTemp(self, tm):
        r"""GetPrimaryTemp(WaveformArrayReader self, uint16_t tm) -> float"""
        return _target_io.WaveformArrayReader_GetPrimaryTemp(self, tm)

    def GetSPDAC(self, tm, sp):
        r"""GetSPDAC(WaveformArrayReader self, uint16_t tm, uint16_t sp) -> int16_t"""
        return _target_io.WaveformArrayReader_GetSPDAC(self, tm, sp)

    def GetSPHVON(self, tm, sp):
        r"""GetSPHVON(WaveformArrayReader self, uint16_t tm, uint16_t sp) -> int16_t"""
        return _target_io.WaveformArrayReader_GetSPHVON(self, tm, sp)

    def GetR0Event(self, event_index, waveforms):
        r"""GetR0Event(WaveformArrayReader self, uint32_t event_index, uint16_t * waveforms)"""
        return _target_io.WaveformArrayReader_GetR0Event(self, event_index, waveforms)

    def GetR1Event(self, event_index, waveforms):
        r"""GetR1Event(WaveformArrayReader self, uint32_t event_index, float * waveforms)"""
        return _target_io.WaveformArrayReader_GetR1Event(self, event_index, waveforms)

# Register WaveformArrayReader in _target_io:
_target_io.WaveformArrayReader_swigregister(WaveformArrayReader)

class VectorDataPacketSharedPtr(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorDataPacketSharedPtr self) -> SwigPyIterator"""
        return _target_io.VectorDataPacketSharedPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorDataPacketSharedPtr self) -> bool"""
        return _target_io.VectorDataPacketSharedPtr___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorDataPacketSharedPtr self) -> bool"""
        return _target_io.VectorDataPacketSharedPtr___bool__(self)

    def __len__(self):
        r"""__len__(VectorDataPacketSharedPtr self) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::size_type"""
        return _target_io.VectorDataPacketSharedPtr___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::difference_type i, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::difference_type j) -> VectorDataPacketSharedPtr"""
        return _target_io.VectorDataPacketSharedPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::difference_type i, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::difference_type j)
        __setslice__(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::difference_type i, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::difference_type j, VectorDataPacketSharedPtr v)
        """
        return _target_io.VectorDataPacketSharedPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::difference_type i, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::difference_type j)"""
        return _target_io.VectorDataPacketSharedPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::difference_type i)
        __delitem__(VectorDataPacketSharedPtr self, PySliceObject * slice)
        """
        return _target_io.VectorDataPacketSharedPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorDataPacketSharedPtr self, PySliceObject * slice) -> VectorDataPacketSharedPtr
        __getitem__(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::difference_type i) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::value_type const &
        """
        return _target_io.VectorDataPacketSharedPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorDataPacketSharedPtr self, PySliceObject * slice, VectorDataPacketSharedPtr v)
        __setitem__(VectorDataPacketSharedPtr self, PySliceObject * slice)
        __setitem__(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::difference_type i, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::value_type const & x)
        """
        return _target_io.VectorDataPacketSharedPtr___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorDataPacketSharedPtr self) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::value_type"""
        return _target_io.VectorDataPacketSharedPtr_pop(self)

    def append(self, x):
        r"""append(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::value_type const & x)"""
        return _target_io.VectorDataPacketSharedPtr_append(self, x)

    def empty(self):
        r"""empty(VectorDataPacketSharedPtr self) -> bool"""
        return _target_io.VectorDataPacketSharedPtr_empty(self)

    def size(self):
        r"""size(VectorDataPacketSharedPtr self) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::size_type"""
        return _target_io.VectorDataPacketSharedPtr_size(self)

    def swap(self, v):
        r"""swap(VectorDataPacketSharedPtr self, VectorDataPacketSharedPtr v)"""
        return _target_io.VectorDataPacketSharedPtr_swap(self, v)

    def begin(self):
        r"""begin(VectorDataPacketSharedPtr self) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::iterator"""
        return _target_io.VectorDataPacketSharedPtr_begin(self)

    def end(self):
        r"""end(VectorDataPacketSharedPtr self) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::iterator"""
        return _target_io.VectorDataPacketSharedPtr_end(self)

    def rbegin(self):
        r"""rbegin(VectorDataPacketSharedPtr self) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::reverse_iterator"""
        return _target_io.VectorDataPacketSharedPtr_rbegin(self)

    def rend(self):
        r"""rend(VectorDataPacketSharedPtr self) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::reverse_iterator"""
        return _target_io.VectorDataPacketSharedPtr_rend(self)

    def clear(self):
        r"""clear(VectorDataPacketSharedPtr self)"""
        return _target_io.VectorDataPacketSharedPtr_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorDataPacketSharedPtr self) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::allocator_type"""
        return _target_io.VectorDataPacketSharedPtr_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorDataPacketSharedPtr self)"""
        return _target_io.VectorDataPacketSharedPtr_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::iterator pos) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::iterator
        erase(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::iterator first, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::iterator last) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::iterator
        """
        return _target_io.VectorDataPacketSharedPtr_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorDataPacketSharedPtr self) -> VectorDataPacketSharedPtr
        __init__(VectorDataPacketSharedPtr self, VectorDataPacketSharedPtr other) -> VectorDataPacketSharedPtr
        __init__(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::size_type size) -> VectorDataPacketSharedPtr
        __init__(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::size_type size, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::value_type const & value) -> VectorDataPacketSharedPtr
        """
        _target_io.VectorDataPacketSharedPtr_swiginit(self, _target_io.new_VectorDataPacketSharedPtr(*args))

    def push_back(self, x):
        r"""push_back(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::value_type const & x)"""
        return _target_io.VectorDataPacketSharedPtr_push_back(self, x)

    def front(self):
        r"""front(VectorDataPacketSharedPtr self) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::value_type const &"""
        return _target_io.VectorDataPacketSharedPtr_front(self)

    def back(self):
        r"""back(VectorDataPacketSharedPtr self) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::value_type const &"""
        return _target_io.VectorDataPacketSharedPtr_back(self)

    def assign(self, n, x):
        r"""assign(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::size_type n, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::value_type const & x)"""
        return _target_io.VectorDataPacketSharedPtr_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::size_type new_size)
        resize(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::size_type new_size, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::value_type const & x)
        """
        return _target_io.VectorDataPacketSharedPtr_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::iterator pos, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::value_type const & x) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::iterator
        insert(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::iterator pos, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::size_type n, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::value_type const & x)
        """
        return _target_io.VectorDataPacketSharedPtr_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorDataPacketSharedPtr self, std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::size_type n)"""
        return _target_io.VectorDataPacketSharedPtr_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorDataPacketSharedPtr self) -> std::vector< std::shared_ptr< CTA::TargetDriver::DataPacket > >::size_type"""
        return _target_io.VectorDataPacketSharedPtr_capacity(self)
    __swig_destroy__ = _target_io.delete_VectorDataPacketSharedPtr

# Register VectorDataPacketSharedPtr in _target_io:
_target_io.VectorDataPacketSharedPtr_swigregister(VectorDataPacketSharedPtr)



